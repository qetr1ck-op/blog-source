<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.2.5" created="2015-10-08 20:38" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Save My Day</title>
	<link>http://savemyday.in</link>
	<description>Notes from my web life</description>
	<pubDate>Thu, 08 Oct 2015 20:38:13 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://savemyday.in</wp:base_site_url>
	<wp:base_blog_url>http://savemyday.in</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>qetr1ck</wp:author_login><wp:author_email>orestprustayko@gmail.com</wp:author_email><wp:author_display_name><![CDATA[qetr1ck]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>


	<generator>http://wordpress.org/?v=4.2.5</generator>

	<item>
		<title>Web Services, WSDL, SOAP envelope with JavaScript</title>
		<link>http://savemyday.in/soap-with-javascript/</link>
		<pubDate>Mon, 17 Mar 2014 20:18:22 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in?p=6</guid>
		<description></description>
		<content:encoded><![CDATA[The main concept of Web Services is to exchange data between two devices using standardized protocols and messages. 

<ul style="list-style: none;">
	<li><a class="link-icon" href="/soap-with-javascript/#What is Web Service and WSDL?"></a>What is Web Service and WSDL?</li>
	<li><a class="link-icon" href="/soap-with-javascript/#SOAP protocol"></a>SOAP protocol</li>
	<li><a class="link-icon" href="/soap-with-javascript/#Example of SOAP envelope"></a>Example of SOAP envelope</li>
	<li><a class="link-icon" href="/soap-with-javascript/#Create/receive SOAP request/response. $soap, $xml, $get Helpers"></a>Create/receive SOAP request/response. $soap, $xml, $get Helpers</code></li>
</ul>

<!--more-->

<a href="" name="What is Web Service and WSDL?"></a>
<div class="title-block">
	<i class="attention"></i>What is Web Service and WSDL?
</div>
The <code>W3C</code> defines a Web services: a software system designed to support machine-to-machine interaction over network. It has an interface described in a machine-processable format (specifically WSDL). Other systems interact with the Web service in a manner prescribed by its description using SOAP messages, REST, or using HTTP with an XML serialization in with other Web-related standards</blockquote>
And for little clear about WSDL (Web Services Description Language) - describes services as collection of network endpoints or ports in XML format.

Exchange messages usually accomplished by protocol <code>HTTP</code>. However, it should be noted that it is still used, but very rarely, protocol - <code>SMTP</code> (Simple Mail Transfer Protocol).

<a href="" name="SOAP protocol"></a>
<div class="title-block">
	<i class="attention"></i>SOAP protocol
</div>

Protocol <code>SOAP</code> transfers messages or small amount of information. <code>SOAP</code> messages formatted in <code>XML</code> and are typically send using <code>HTTP</code>. Some time ago <code>SOAP</code> was spelled as Simply Object Access Protocol. But time passed and everybody saws that protocol isn't simple and nothingness in common with access to objects. And from SOAP v1.2 it is just a SOAP and nothing else.

<div class="wp-center">
[caption id="" align="aligncenter" width="600"]<img src="http://savemyday.in/source/images/soaps.jpg" alt="" width="1040"/> SOAP it's just a soap[/caption]
</div>

<a href="" name="Example of SOAP envelope"></a>
<div class="title-block">
	<i class="attention"></i>Example of SOAP envelope
</div>

</code>The SOAP message has 3 parts</code> : envelope, head, body. Body contains all <code>response/request</code> data. Also can say that head isn't required and in modern apps doesn't used.
<div class="wp-center">

[caption id="" align="aligncenter" width="250"]<img src="http://savemyday.in/source/images/soap_message.gif" alt="" width="250" /> SOAP Envelope[/caption]

</div>
Example of SOAP XML:

[xml]
<?xml version="1.0" encoding="utf-8" ?>
<soapenv:Envelope
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
	xmlns:urn="urn:WebservicesName">
	<soapenv:Header/>
	<soapenv:Body>
		<urn:ProductService.getProductByHash
			soapenv:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
			<return xsi:type="getProductByHash ">
				<product_hash xsi:type="xsd:string">product hash here!</product_hash>
			</return>
		</urn:ProductService.getProductByHash>
	</soapenv:Body>
</soapenv:Envelope>
[/xml]

What here have happened? In the beginning I created SOAP envelope, which call <code>service</code> with URN (Uniform Resource Name). Then calling <code>method</code> getProductByHash. SOAP <code>response</code> of web-service have next view, only body tag:

[xml]
<soapenv:Body>
	<urn:ProductService.getProductByHash
		soapenv:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
		<return xsi:type="getProductByHash ">
			<product_id xsi:type="xsd:string">260891</emag_id>
		</return>
	</urn:ProductService.getProductByHash>
</soapenv:Body>
[/xml]

<a href="" name="Create/receive SOAP request/response. $soap, $xml, $get Helpers"></a>
<div class="title-block">
	<i class="attention"></i>Create/receive SOAP request/response. $soap, $xml, $get Helpers
</div>

<code>$soap</code> helper module:

[javascript]
/**
 * [main module]
 * @return {[object]} [with methods: createRequest, createField, getResponseNode
 * getErrorNode, getFieldValue]
 */
var $soap = function() {
    function getWrappedRequest(pURN, pBody, pHead) {
        var vWR = {
            "soapenv:Envelope": {
                "#attributes": {
                    "xmlns:xsi": "http://www.w3.org/2001/XMLSchema-instance",
                    "xmlns:xsd": "http://www.w3.org/2001/XMLSchema",
                    "xmlns:soapenv": "http://schemas.xmlsoap.org/soap/envelope/",
                    "xmlns:urn": pURN
                },
                "soapenv:Header": {},
                "soapenv:Body": {}
            }
        };

        if (pHead)
            vWR["soapenv:Envelope"]["soapenv:Header"] = pHead;
        if (pBody)
            vWR["soapenv:Envelope"]["soapenv:Body"] = pBody;

        return vWR;
    }

    function getNode(pNS, pData, pType) {
        return pData["SOAP-ENV:Envelope"]["SOAP-ENV:Body"]["ns1:Webservices" + pNS + "." + pType + "Response"]["return"];
    }

    return {
        /**
         * [request with xml attributes]
         * @param {[string]} pURN [name of webservice]
         * @param {[strting]} pName [method]
         * @param {[object]} pExt [body data to server]
         * @return {[object]} [JavaScript soap envelope]
         */
        createRequest: function(pURN, pName, pExt) {
            var vSR = {},
                vSRT = (vSR[pURN + "." + pName] = {
                    "#attributes": {
                        "soapenv:encodingStyle": "http://schemas.xmlsoap.org/soap/encoding/"
                    },
                    "return": {
                        "#attributes": {
                            "xsi:type": pName + 'Request'
                        }
                    }
                });

            if (pExt)
                for (var vPrt in pExt)
                    vSRT["return"][vPrt] = pExt[vPrt];

            var vRes = getWrappedRequest(pURN, vSR);
            return vRes;
        },
        /**
         * [create soap field]
         * @param {[string]} pType [type of field]
         * @param {[string/number]} pValue [name of value]
         * @return {[type]} [description]
         */
        createField: function(pType, pValue) {
            var vRes = {
                "#attributes": {
                    "xsi:type": "xsd:" + pType
                },
                "#text": pValue
            };
            return vRes;
        },

        getResponseNode: function(pNS, pData, pType) {
            return getNode(pNS, pData, pType)["response"];
        },

        getErrorNode: function(pNS, pData, pType) {
            return getNode(pNS, pData, pType)["error"];
        },

        getFieldValue: function(pData, pName) {
            return pName ? pData[pName]["#text"] : pData["#text"];
        }
    };
}();
[/javascript]

Example <code>SOAP request</code> as JavasSript object:

[javascript]
var vRequestObj = $soap.createRequest('urn:Webservices' + 'PortalEmags', 'getEmagIdByHash',
	{
		"pdf_hash" : $soap.createField("string", "717fb24cc33821afb4bcd529696cdfce"),
		"userid_hash" : $soap.createField("string", "65a47daeabcb54e4ecc3923aecdab697")
	});
[/javascript]
<div class="wp-center">

[caption id="" align="aligncenter" width="568"]<img src="http://savemyday.in/source/images/soap_object_log.png" alt="" width="568" height="474" /> log of SOAP responce with specific field[/caption]
</div>

<hr />

Once I have obtained object with property which I need to use for create XML SOAP Request. It's time to use <code>$xml</code> helper with whole bunch of useful methods. The source on <a href="https://github.com/qetr1ck-op/blogs-article/blob/master/published/Web%20Services%2C%20WSDL%2C%20SOAP%20envelope%20with%20JavaScript/%24xml.js">github</a>.

Creating XHR object, 2 callbacks, and send request via POST. Parse XML into JSON object -> fetch response property -> get value on <a href="https://github.com/qetr1ck-op/blogs-article/blob/master/published/Web%20Services%2C%20WSDL%2C%20SOAP%20envelope%20with%20JavaScript/example.js">github</a>.

And, finally response data in Chrome console:

<div class="wp-center">
[caption id="" align="aligncenter" width="799"]<img src="http://savemyday.in/source/images/soap_log.png" alt="" width="799" height="46" /> log of SOAP responce with specific field[/caption]</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6</wp:post_id>
		<wp:post_date>2014-03-17 22:18:22</wp:post_date>
		<wp:post_date_gmt>2014-03-17 20:18:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>soap-with-javascript</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="category" nicename="javascript-2"><![CDATA[Javascript]]></category>
		<category domain="post_tag" nicename="soap"><![CDATA[soap]]></category>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<category domain="post_tag" nicename="web-2"><![CDATA[web]]></category>
		<category domain="post_tag" nicename="wsdl"><![CDATA[wsdl]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,0,0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_post_restored_from</wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:20:"restored_revision_id";i:273;s:16:"restored_by_user";i:1;s:13:"restored_time";i:1406052374;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3330088025]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Git and GitHub. Git versus Subversion.</title>
		<link>http://savemyday.in/git-vc-github/</link>
		<pubDate>Sat, 29 Mar 2014 15:24:17 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in?p=75</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="wp-center">
[caption id="" align="aligncenter" width="300"]<img src="http://savemyday.in/source/images/git-github.png" alt="Git and GitHub" width="300"/>Git and GitHub[/caption]
</div>

<!--more-->

<a href name="Git and GiHub"></a>
<div class="title-block">
	<i class="attention"></i>Git and GiHub
</div>

So <code>Git and GitHub</code> are parts of one complex system, witch complement each other:
<ul>
	<li>
	Git is a version control system. Git is the name of <code>VCS</code> version control system wrote by <a href="http://en.wikipedia.org/wiki/Linus_Torvalds" title="Linus Torvalds">Linus Torvalds</a>. There are always series of <code>commits</code>(snapshots). You see a path of this snapshots, in which order they were created. You create <code>branch</code> and use snapshot for <code>revert</code> changes.
	</li>
	<li>
	GitHub is website on which you can publish your Git repositories and collaborate with other people.
	</li>
</ul>

<a href name="What is better, Subversion or Git?"></a>
<div class="title-block">
	<i class="attention"></i>What to choose, Subversion or Git?
</div>

Git is not better than Subversion. But is also not worst. It's different:

<ul>
	<li>The key difference is that it's a <code>decentralized</code>. With Git you can do practically anything off-line, cause everyone has their own repository. For example:  I have a server at home and a Laptop on the road, and SVN simply doesn't work well here. With SVN, I can't have local source control if I'm not connected to the repository (Yes, I know about SVK or about ways to copy the repo). With Git, that's the default mode anyway. It's an extra command though (<code>git commit</code> commits locally, whereas <code>git push origin master</code> pushes the master branch to the remote branch named "origin").</li>
	<li>Making <code>branches</code> and <code>merging</code> between branches is really easy.Even if you don't have commit rights for a project, you can still have your own repository on-line, and publish "push requests" for your changes. Everybody who likes your changes can pull them into their project, including the official maintainers. It's trivial to fork a project, modify it, and still keep merging in the bugfixes from the HEAD branch.
	</li>
	<li>Git is perfectly suited for Open Source projects: just fork it, commit your changes to your own Fork, and then ask the original project maintainer to pull your changes. With Git, this just works. Really, try it on <code>Github</code>, it's magic.</li>
	<li>Git adds <code>complexity</code>. Two modes of creating repositories, checkout vs. clone, commit vs. push... You have to know which commands work locally and which work with "the server" (I'm assuming most people still like a central "master-repository").</li>
</ul>

Make my day:
<a href="http://stackoverflow.com/questions/11816424/understanding-the-basics-of-git-and-github" title="stackoverflow">understanding-the-basics-of-git-and-github</a>
<a href="http://stackoverflow.com/questions/871/why-is-git-better-than-subversion">Discussion on StackOverflow</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>75</wp:post_id>
		<wp:post_date>2014-03-29 17:24:17</wp:post_date>
		<wp:post_date_gmt>2014-03-29 15:24:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>git-vc-github</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="git"><![CDATA[Git]]></category>
		<category domain="category" nicename="git"><![CDATA[Git]]></category>
		<category domain="post_tag" nicename="github"><![CDATA[GitHub]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<category domain="post_tag" nicename="web-2"><![CDATA[web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3566524759]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>114</wp:comment_id>
			<wp:comment_author><![CDATA[online schools]]></wp:comment_author>
			<wp:comment_author_email>Helmkamp287749@outlook.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.beonelearning.com</wp:comment_author_url>
			<wp:comment_author_IP>184.95.52.218</wp:comment_author_IP>
			<wp:comment_date>2014-08-24 03:01:47</wp:comment_date>
			<wp:comment_date_gmt>2014-08-24 01:01:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You've some very nice ideas. Continue the great work.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[true]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408842107.5601050853729248046875;s:7:"message";s:35:"Akismet caught this comment as spam";s:5:"event";s:10:"check-spam";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_pro_tip</wp:meta_key>
				<wp:meta_value><![CDATA[discard]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408892421.98404598236083984375;s:7:"message";s:41:"qetr1ck reported this comment as not spam";s:5:"event";s:10:"report-ham";s:4:"user";s:7:"qetr1ck";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user</wp:meta_key>
				<wp:meta_value><![CDATA[qetr1ck]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408892454.95141506195068359375;s:7:"message";s:46:"qetr1ck changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"qetr1ck";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Forms: event &quot;submit&quot; and navigation with &quot;tab&quot;, &quot;shift-tab&quot;</title>
		<link>http://savemyday.in/81/</link>
		<pubDate>Sun, 30 Mar 2014 19:47:59 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in?p=81</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="wp-center">
[caption id="" align="aligncenter" width="300"]<img src="http://savemyday.in/source/images/Event submit and navigation with tab, shift-tab/form.png" alt="Event submit and navigation with tab, shift-tab" width="600"/>Git and GitHub[/caption]
</div>

<!--more-->

Main functional requirement are:
<ul>
  <li>
  When submitting a form (OK / Enter) - the callback function must be called with the value of the field
  </li>
  <li>
  Clicking on Cancel or press the Esc - should call the function callback (null). Esc key to close the form should always, even if the message input field is not in focus.
  </li>
  <li>
    Form should do modal affect, all other element on page must be unlclickable.
  </li>
  <li>
    Form always centered in middle, height of form has no matter
  </li>
  <li>
    When form appears input field in focus and user have possibility use Tab/Tab-Shift for switch only inputs in the form.
  </li>
</ul>

<p data-height="268" data-theme-id="0" data-slug-hash="xuizw" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/xuizw/'>xuizw</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

Make my day:
<a href="http://learn.javascript.ru/forms-methods" title="forms-methods">Foms: mehod and event "submit"</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>81</wp:post_id>
		<wp:post_date>2014-03-30 21:47:59</wp:post_date>
		<wp:post_date_gmt>2014-03-30 19:47:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>81</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="css"><![CDATA[CSS]]></category>
		<category domain="category" nicename="javascript-2"><![CDATA[Javascript]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[4016632825]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>102</wp:comment_id>
			<wp:comment_author><![CDATA[online learning]]></wp:comment_author>
			<wp:comment_author_email>Englin189671@aol.com</wp:comment_author_email>
			<wp:comment_author_url>http://beonelearning.com</wp:comment_author_url>
			<wp:comment_author_IP>184.95.52.218</wp:comment_author_IP>
			<wp:comment_date>2014-08-21 17:55:13</wp:comment_date>
			<wp:comment_date_gmt>2014-08-21 15:55:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Wow, you are close to target with this.  I can connect with most, if not absolutely all, of the content.  Great site!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408892761.1566240787506103515625;s:7:"message";s:46:"qetr1ck changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"qetr1ck";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[true]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408636513.7007400989532470703125;s:7:"message";s:35:"Akismet caught this comment as spam";s:5:"event";s:10:"check-spam";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_pro_tip</wp:meta_key>
				<wp:meta_value><![CDATA[discard]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408892640.3875539302825927734375;s:7:"message";s:41:"qetr1ck reported this comment as not spam";s:5:"event";s:10:"report-ham";s:4:"user";s:7:"qetr1ck";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user</wp:meta_key>
				<wp:meta_value><![CDATA[qetr1ck]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Fluid two-column layout with float / flexbox</title>
		<link>http://savemyday.in/fluid-two-column-layout/</link>
		<pubDate>Mon, 31 Mar 2014 18:49:09 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in?p=100</guid>
		<description></description>
		<content:encoded><![CDATA[Two-column layout allows effective use browser space. Layout doesn't require hard work and it can used with combining colomn in pixels or percentage. For example two-column layout are in <a href="http://habrahabr.com" title="Two column layout on habrahabr.com">habrahabr.ru</a>:

<div class="wp-center">
[caption id="" align="aligncenter" width="200"]<img alt="" src="http://savemyday.in/source/images/two-column-layout.png" width="500" />Liquid Two-column layout[/caption]
</div>
<!--more-->

There are several approach for formation such layout, but the quickest and easiest is compine <code>margin</code> and <code>float</code>.


<div class="title-block">
  <i class="attention"></i><code>For left</code> side bar with static width:
</div>

<table style="width: 450px; margin: 0 auto">
  <tbody>
  <tr>
    <th colspan="2">For left layer with width 20%</th>
  </tr>
  <tr>
    <td style="width: 50%">Left column</td>
    <td>Right column</td>
  </tr>
  <tr>
    <td>float: left
        width: 20%</td>
    <td>margin-left: 21%</td>
  </tr>
  <tr>
    <th colspan="2">For left layer with width 200px</th>
  </tr>
  <tr>
    <td>float: left
        width: 200px</td>
    <td>margin-left: 210px</td>
  </tr>
</tbody>
</table>

<br>

<div class="title-block">
  <i class="attention"></i><code>For right</code> side bar:
</div>

<table style="width: 450px; margin: 0 auto">
  <tbody>
  <tr>
    <th colspan="2">For right layer with width 20%</th>
  </tr>
  <tr>
    <td style="width: 50%">Left column</td>
    <td>Right column</td>
  </tr>
  <tr>
    <td>margin-right: 21%</td>
    <td>float: right
        width: 20%</td>
  </tr>
  <tr>
    <th colspan="2" >For right layer with width 200px</th>
  </tr>
  <tr>
    <td>float: right
        width: 200px</td>
    <td>margin-right: 210px</td>
  </tr>
</tbody>
</table>

<br>

<p data-height="400" data-theme-id="0" data-slug-hash="oAtih" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/oAtih/'>oAtih</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

<div class="title-block">
  <i class="attention"></i>With <code>display: flex</code>
</div>

<p data-height="508" data-theme-id="10606" data-slug-hash="MwdvEV" data-default-tab="result" data-user="qetr1ck-op" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/MwdvEV/'>Two-column layout with Flexbox</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

Make my day:
<a href="http://htmlbook.ru/samlayout/tipovye-makety/rezinovyi-dvukhkolonochnyi-maket" title="fluid 2 column layout on htmlbook.ru">fluid 2 column layout</a>
<a href="http://www.inserthtml.com/demos/css/radio-buttons/" title="awesome checkboxes on www.inserthtml.com">awesome checkboxes</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>100</wp:post_id>
		<wp:post_date>2014-03-31 20:49:09</wp:post_date>
		<wp:post_date_gmt>2014-03-31 18:49:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fluid-two-column-layout</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="css"><![CDATA[CSS]]></category>
		<category domain="post_tag" nicename="css-2"><![CDATA[css]]></category>
		<category domain="post_tag" nicename="layout"><![CDATA[layout]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_post_restored_from</wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:20:"restored_revision_id";i:111;s:16:"restored_by_user";i:1;s:13:"restored_time";i:1396549761;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3474676534]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fluid three column layout with positioning, floats, tables or flexbox</title>
		<link>http://savemyday.in/fluid-three-column-layout/</link>
		<pubDate>Fri, 18 Apr 2014 09:09:46 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in?p=148</guid>
		<description></description>
		<content:encoded><![CDATA[In Web world, fluid layout with 3 column is the most flexible and customizable layout. Mixing percentages and pixels for specify width of column allows create differents layouts, for different task.

<div class="wp-center">
[caption width="469" align="aligncenter"]
<img src="http://savemyday.in/source/images/Fluid three column layout with positioning, floats, tables or flexbox/image.png" width="469" height="338" alt="fluid three column layout" class />Fluid three column layout
[/caption]
</div>

There are a severeal ways to achive such structure:

<ul style="list-style: none;">
    <li><a class="link-icon" href="http://savemyday.in/fluid-three-column-layout/#positioning"></a>positioning</li>
    <li><a class="link-icon" href="http://savemyday.in/fluid-three-column-layout/#floating elements"></a>floating elements</li>
    <li><a class="link-icon" href="http://savemyday.in/fluid-three-column-layout/#table columns"></a>table columns</li>
    <li><a class="link-icon" href="http://savemyday.in/fluid-three-column-layout/#flexbox"></a>flexbox</li>
</ul>

<!--more-->

<ul>
	<li>Here sumbol <code>%</code> define, that column width is given in persantage of layout width;</li>
	<li><code>px</code>- column width in static pixels;</li>
	<li><code>∞</code> - column occupies all remain width space.</li>
</ul>

<a href name="positioning"></a>
<div class="title-block">
    Using positioning
</div>

To control position layout relative to the parent element layers, necessary establish for parent property - <code>position: relative</code>. And for child element set <code>position: absolute</code>, conrols fluid element with <code>right/left</code>, width in some cases used <code>margin-right/left</code>.

<p data-height="1082" data-theme-id="0" data-slug-hash="jtyhi" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/jtyhi/'>Three column fluid layout with positionig</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

<a href name="floating elements"></a>
<div class="title-block">
    Floats
</div>

For this approach I used <code>float</code> in combinatition with properties <code>margin</code> and <code>width</code>. In some case used nested or additional <code>div.wrap</code>, because we can't use in the same time for onу HTML element margin in px and %.

<p data-height="1082" data-theme-id="0" data-slug-hash="asfKq" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/asfKq/'>Fluid three column layout using floats</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

<a href name="table columns"></a>
<div class="title-block">
    Table columns
</div>

Actually, it's convinient to use table when you want to create column with same height. Width of column calculated automatcaly based on their content so I just need to specify the require width. Remain columns would streach to avaible width of table.

<p data-height="1082" data-theme-id="0" data-slug-hash="olGHE" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/olGHE/'>Fluid three column layout using table</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

<a href name="flexbox"></a>
<div class="title-block">
    Flex box
</div>

Most layout or if you want grid system use one of next methods: <code>positioning</code>, <code>tables</code>, and most popular - <code>inline-blocks</code> or <code>float</code>. All this methods have pretty significaте problems and limetations.

For for achive bunch of three column layout Flex boxes are super ease. In generaly I used for parents : <code>display: flex</code> and for children <code>flex: 1</code> it's shorthand for <code>flex-grow, flex-shrink and flex-basis</code>

In furture post I should discover this literally one of the most promosing feature of web disign.

<p data-height="1082" data-theme-id="0" data-slug-hash="uAfrh" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/uAfrh/'>Fluid three column layout with flexbox</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

<hr>

This resources Save My Day:
<ul>
	<li><a href="http://htmlbook.ru/samlayout/tipovye-makety/rezinovyi-trekhkolonochnyi-maket">htmlbook.ru</a></li>
	<li><a href="http://css-tricks.com/snippets/css/a-guide-to-flexbox/">css-tricks.com</a></li>
	<li><a href="http://philipwalton.github.io/solved-by-flexbox/demos/grids/">Solved by Flexbox</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>148</wp:post_id>
		<wp:post_date>2014-04-18 11:09:46</wp:post_date>
		<wp:post_date_gmt>2014-04-18 09:09:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fluid-three-column-layout</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="css"><![CDATA[CSS]]></category>
		<category domain="post_tag" nicename="css-2"><![CDATA[css]]></category>
		<category domain="post_tag" nicename="fluid"><![CDATA[fluid]]></category>
		<category domain="post_tag" nicename="html"><![CDATA[HTML]]></category>
		<category domain="post_tag" nicename="layout"><![CDATA[layout]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<category domain="post_tag" nicename="three-column"><![CDATA[three column]]></category>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3608079335]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>103</wp:comment_id>
			<wp:comment_author><![CDATA[online education]]></wp:comment_author>
			<wp:comment_author_email>Virgile13894@aol.com</wp:comment_author_email>
			<wp:comment_author_url>http://beonelearning.com/</wp:comment_author_url>
			<wp:comment_author_IP>184.95.52.218</wp:comment_author_IP>
			<wp:comment_date>2014-08-21 19:29:21</wp:comment_date>
			<wp:comment_date_gmt>2014-08-21 17:29:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This can be a perfectly done website. I will tell lots of work went into it.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408892761.154901027679443359375;s:7:"message";s:46:"qetr1ck changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"qetr1ck";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[true]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408642161.4996759891510009765625;s:7:"message";s:35:"Akismet caught this comment as spam";s:5:"event";s:10:"check-spam";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_pro_tip</wp:meta_key>
				<wp:meta_value><![CDATA[discard]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408892644.488912105560302734375;s:7:"message";s:41:"qetr1ck reported this comment as not spam";s:5:"event";s:10:"report-ham";s:4:"user";s:7:"qetr1ck";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user</wp:meta_key>
				<wp:meta_value><![CDATA[qetr1ck]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Original effects with CSS3 transition</title>
		<link>http://savemyday.in/183/</link>
		<pubDate>Tue, 01 Apr 2014 12:48:05 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=183</guid>
		<description></description>
		<content:encoded><![CDATA[The power of CSS3 is enormous and in this post I create appearing effect of "Sign In Form" using differn style in each example.

<div class="wp-center">
[caption width="400" align="aligncenter"]
<img src="../source/images/transition.png" width="450" alt="CSS3 transition effect" />
CSS3 transition parameters
[/caption]
</div>

<!--more-->  

Actually, now transition property of CSS supporting almost in all browsers, just in some case you need to use prefix <b><code>-webkit, -moz, -ms, -o</b></code>. You may check it on <a href="http://caniuse.com/#search=transition" title="Can I use...">Can I use...</a>

Awesome and simple <a href="http://css3generator.com/" title="css3generator.com">CSS3 Transition generator</a> (and not only).

More about <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function" title="transition-timing-function">transition-timing-funtion with example</a>.

If you look closely you may see that in all example firstly I hide "Sign In Form" with <b><code>transform: scale, rotate, translateX/Y</b></code> and add <b><code>transition</b></code>. Than I use different value of <b><code>transform, transition-delay, opacity</b></code> for show original transition CSS effects.

<blockquote>Example 1</blockquote>
<hr>

<p data-height="270" data-theme-id="0" data-slug-hash="gwJsh" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/gwJsh/'>CSS3 transition effects example 1</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

In first example I used <b><code>transition</b></code> for base elements with differents timestamps and time function. Also I used <b><code>transform: translateY</b></code> property that push "Sign In Form" and child elements from curent position.

When you click on main section, you can see delay property that emulate animation. In this example I added a <b><code>transition-delay: ...s</b></code> which make transition effect start a bit later.

<blockquote>Example 2</blockquote>
<hr>


<p data-height="270" data-theme-id="0" data-slug-hash="wlxGq" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/wlxGq/'>CSS3 transition effects example 2</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

In second example I used new <code><b>div.content</code></b>, you can see it in HTML mark-up. For "Sign In Form" I applied <code><b>transform: translate(...px, ...px) rotate(...deg)</code></b> for children used only <code><b>translate</code></b>. Ofcourse added <code><b>transtion</code></b> for elements.

Translate transformation in order move elements in place. The "Sign In Form" will also be rotated. The each elements of the description will come with a little delay.

<blockquote>Example 3</blockquote>
<hr>

<p data-height="270" data-theme-id="0" data-slug-hash="tLaic" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/tLaic/'>tLaic</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

In third example I used the <b><code>translate</code></b> and  <code><b>transforms: rotate</b></code> to bring up content.

Than I just need to reset <code><b>transform: translateX(0px) rotate(0deg)</b></code> and add <code><b>transition-delay: ...s</b></code>.

<blockquote>Example 4</blockquote>
<hr>

Here in four example I performed zoom out for main block and zoom in for "Sign In Form" with rotation effect. All thanks to <code><b>transform: scale and rotate</b></code>.

<p data-height="270" data-theme-id="0" data-slug-hash="aGqou" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/aGqou/'>aGqou</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

<blockquote>Example 5</blockquote>
<hr>

In this example I used <code><b>transform: translateX()</b></code> and transition timing function <code><b>ease-in-out</b></code>. Transition effect make the "Sign In Form" slide from right, with pushing effect for main container.

<p data-height="270" data-theme-id="0" data-slug-hash="Jbzvm" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/Jbzvm/'>Jbzvm</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

<blockquote>Example 6</blockquote>
<hr>

In sixth example I performed that "Sign In Form" comes from the front, zooming out until its original size: <code><b>trasform: scale(from 10 to 1)</b></code>. And inputs will slide from bottom, used <code><b>transfom: translateY</b></code>.

<p data-height="270" data-theme-id="0" data-slug-hash="Deijo" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/Deijo/'>CSS3 transition effects example 6</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

<blockquote>Example 7</blockquote>
<hr>

In this seven example the idea is to rotate the image to center and scale it down: <code><b>transform: rotate(0deg)->(720deg) scale(1)->(0)</b></code>. Then the "Sign In Form" comes from up with description content following. <code><b>transform: translateY())</b></code>.

Also Added delay for the "Sign In Form" elements <code><b>transition-delay: ..s</b></code>. This will show us the rotating main block first and then the description will come into. In the reverse transition, everything will disappear immediately and image will rotate back.

<p data-height="270" data-theme-id="0" data-slug-hash="pIrwa" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/pIrwa/'>pIrwa</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

<blockquote>Example 8</blockquote>
<hr>

In eighth example I used an animaton which recreate a bounce effect. The "Sign In Form" will bounce in from top. <code><b>animation: bounceY 0.9 linear</b></code>.

[css]
animation: bounceY 0.9 linear
[/css]

<p data-height="270" data-theme-id="0" data-slug-hash="veLhG" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/veLhG/'>CSS3 transition effects example 8</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

<blockquote>Example 9</blockquote>
<hr>

In this example I used two extra elemetns to slide them from bottom right and from top left.

The two extra elemetns will have a different translation and a transfrom origin. Also, I’ll set one to be aligned at the top and the other at the bottom. 

Transform-origin property is tricky one, but in a two words, it <b>letting you change the point of origin of a transform</b>. More information about <code>transform-origin</code> on <a href="http://css-tricks.com/almanac/properties/t/transform-origin/">css-tricks</a>

The content will be styled in a way that it looks like as if it’s coming out as a tiny slice through the touching edges of the two extra elements.

[html]
<!--Extra Elements-->
<div class="extra-1"></div>
<div class="extra-2"></div>
<div class="signInForm">
    <!--...-->
</div>
[/html]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>183</wp:post_id>
		<wp:post_date>2014-04-01 14:48:05</wp:post_date>
		<wp:post_date_gmt>2014-04-01 12:48:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>183</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_post_restored_from</wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:20:"restored_revision_id";i:185;s:16:"restored_by_user";i:1;s:13:"restored_time";i:1400186113;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3368197869]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CLI in Windows, useful commands</title>
		<link>http://savemyday.in/cli-in-windows-useful-commands/</link>
		<pubDate>Sat, 14 Jun 2014 08:22:15 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=203</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="wp-center">
<img src="http://savemyday.in/source/images/cli.jpg" alt="" width="400"/>
</div>

<!--more-->

[bash]
#change to drive
c:\>f:

#change to folder
f:\>cd folder

#change to root drive
f:\>cd \

#open explover window
start .
[/bash]

<hr>

[bash]
#create file
copy con myfile.txt
[/bash]

<hr>

[bash]
#How To Launch Git Bash from DOS Command Line?
#x64
start "" "%SYSTEMDRIVE%\Program Files (x86)\Git\bin\sh.exe" --login
#x86
start "" "%ProgramFiles%\Git\bin\sh.exe" --login

#alias
doskey subl="C:\Program Files\Sublime Text 2\sublime_text.exe" $*
[/bash]



]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>203</wp:post_id>
		<wp:post_date>2014-06-14 10:22:15</wp:post_date>
		<wp:post_date_gmt>2014-06-14 08:22:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cli-in-windows-useful-commands</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cli"><![CDATA[CLI]]></category>
		<category domain="post_tag" nicename="cli"><![CDATA[CLI]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3344125329]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>105</wp:comment_id>
			<wp:comment_author><![CDATA[education website]]></wp:comment_author>
			<wp:comment_author_email>Farmwald181@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://beonelearning.com</wp:comment_author_url>
			<wp:comment_author_IP>184.95.52.218</wp:comment_author_IP>
			<wp:comment_date>2014-08-21 23:14:23</wp:comment_date>
			<wp:comment_date_gmt>2014-08-21 21:14:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I agree with many of everything you are saying but need certainly to question where you obtain your information.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[true]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408655663.7879641056060791015625;s:7:"message";s:35:"Akismet caught this comment as spam";s:5:"event";s:10:"check-spam";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_pro_tip</wp:meta_key>
				<wp:meta_value><![CDATA[discard]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408892434.9870460033416748046875;s:7:"message";s:41:"qetr1ck reported this comment as not spam";s:5:"event";s:10:"report-ham";s:4:"user";s:7:"qetr1ck";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user</wp:meta_key>
				<wp:meta_value><![CDATA[qetr1ck]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408892629.2026538848876953125;s:7:"message";s:46:"qetr1ck changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"qetr1ck";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Set up Git</title>
		<link>http://savemyday.in/?p=212</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=212</guid>
		<description></description>
		<content:encoded><![CDATA[Download and install the latest version of Git.
set using window cmd.exe annd init PATH varrible

[shell]
git config --global user.name "Your Name Here"
#Sets the default name for Git to use when you commit
[/shell]

[shell]
git config --global user.email "your_email@example.com"
# Sets the default email for git to use when you commit
[/shell]

Step 1: Create the smt aka README file

[shell]
mkdir ~/Hello-World
# Creates a directory for your project called "Hello-World" in your user directory
[/shell]

[shell]
cd ~/Hello-World
# Changes the current working directory to your newly created directory
[/shell]

[shell]
git init
# Sets up the necessary Git files
# Initialized empty Git repository in /Users/you/Hello-World/.git/
[/shell]

[shell]
touch README
# Creates a file called "README" in your Hello-World directory
[/shell]

Step 2: Commit your README

[shell]
git add README
# Stages your README file, adding it to the list of files to be committed
[/shell]

[shell]
git commit -m 'first commit'
# Commits your files, adding the message "first commit"
[/shell]

Step 3: Create A Repo on GitHub

Every time you make a commit with Git, it is stored in a repository (a.k.a. "repo"). To put your project up on GitHub, you'll need to have a GitHub repository for it to live in.

#TODO 
need add image here

Step 4: Push your commit

[cmd]
git remote add origin https://github.com/username/Hello-World.git
# Creates a remote named "origin" pointing at your GitHub repository
[/cmd]

[shell]
git push origin master
# Sends your commits in the "master" branch to GitHub
[/shell]



]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>212</wp:post_id>
		<wp:post_date>2014-05-17 16:22:08</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>A guide to set up environment for PhoneGap 3 development for Android on Windows</title>
		<link>http://savemyday.in/a-guide-to-set-up-environmrnt-for-phonegap-3-development-for-android-on-windows/</link>
		<pubDate>Sat, 17 May 2014 15:30:52 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=217</guid>
		<description></description>
		<content:encoded><![CDATA[This is a guide to start developing with PhoneGap 3 for Android on a Windows machine. It has everything included, but only the basics. See the supplied URLs for more information. If you have any questions, enhancements, comments or complaints, please feel free to let me know.


Overview, what platforms / software packages you need:
<ul>
	<li>Java JDK 6 or 7</li>
	<li>Android SDK tools</li>
	<li>Eclipse and Eclipse Plugin</li>
	<li>Apache Ant</li>
	<li>GitHub</li>
	<li>Node.js</li>
	<li>Cordova PhoneGap</li>
</ul>

<h4>Java JDK</h4>

Download: http://www.oracle.com/technetwork/java/javase/downloads/index.html

<b><u>System variables</u></b>:

<ul>
	<li>JAVA_HOME: C:\Program Files\Java\jdk1.7.0_25</li>
	<li>Path: %JAVA_HOME%\bin</li>
</ul>

<div class="wp-center">
<img src="http://savemyday.in/source/images/ecvironment_varrible.png" alt="" width="300"/>
</div>

<h4>Android SDK tools</h4>

Download and information: http://developer.android.com/sdk/index.html

Download the SDK (adt-bundle) from the link above and extract it to a folder you like. In this case: "D:\AndroidDev\android-sdk\". Make sure that you make you have the following set in your advanced system properties, environment variables.

<b><u>System variables</u></b>:
Path: D:\AndroidDev\android-sdk\platform-tools;D:\AndroidDev\android-sdk\tools

<h4>Apache Ant</h4>

Download: http://ant.apache.org/bindownload.cgi

<b><u>System variables</u></b>:
<ul>
	<li>ANT_HOME: D:\AndroidDev\apache-ant</li>
	<li>Path: %ANT_HOME%\bin</li>
</ul>

<h4>Node.js</h4>

<b><u>User variables</u></b>:
<ul>
	<li>Path: C:\Users\Joram\AppData\Roaming\npm</li>
        <li>Path: C:\Program Files\nodejs\</li>
</ul>

<h4>Cordova or PhoneGap</h4>

Difference between Cordova CLI and PhoneGap CLI, according to the FAQ
The PhoneGap CLI is built on top of the Cordova CLI. It has all of the functionality that the Cordova CLI has. The main difference is that the PhoneGap CLI has PhoneGap Build integration. So if you don’t have the native SDK installed, you can delegate compilation to the PhoneGap Build cloud service and get app-store ready mobile apps. Both tools are completely interoperable.

[shell]
cordova create HelloWorld com.example.hello "Hello World"
cordova platform add android
cordova plugin add org.apache.cordova.device
[/shell]

And, yes it's a small victory.

Save My Day:
<a href="http://teusink.blogspot.com/2013/07/guide-phonegap-3-android-windows.html">teusink.blogspot.com</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>217</wp:post_id>
		<wp:post_date>2014-05-17 17:30:52</wp:post_date>
		<wp:post_date_gmt>2014-05-17 15:30:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>a-guide-to-set-up-environmrnt-for-phonegap-3-development-for-android-on-windows</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Function Invocation Patterns, Scope of this, and Function Object Literal in JavaScript</title>
		<link>http://savemyday.in/function-invocation-patterns-in-javascript/</link>
		<pubDate>Thu, 29 May 2014 03:47:57 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=234</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="wp-center">
[caption id="" align="aligncenter" width="1040"]<img src="http://savemyday.in/source/images/function_invocation.png" alt="" width="500" />Function Invocation Patterns[/caption]
</div>

<!--more-->

Table of content:
<ol>
	<li><a href="http://savemyday.in/function-invocation-patterns-in-javascript/#Four parts of Function Literal">Four parts of Function Literal</a></li>
	<li><a href="http://savemyday.in/function-invocation-patterns-in-javascript/#Invocation patterns">Invocation patterns</a></li>
<ol>
	<li><a href="http://savemyday.in/function-invocation-patterns-in-javascript/#Method invocation pattern">Method invocation pattern</a></li>
	<li><a href="http://savemyday.in/function-invocation-patterns-in-javascript/#Function invocation pattern">Function invocation pattern</a></li>
	<li><a href="http://savemyday.in/function-invocation-patterns-in-javascript/#Constructor invocation pattern">Constructor invocation pattern</a></li>
	<li><a href="http://savemyday.in/function-invocation-patterns-in-javascript/#The Apply/Call Invocation Pattern">The Apply/Call Invocation Pattern</a></li>
</ol>
</ol>




<a name="Four parts of Function Literal" href=""></a>
Function object are created with function literals:

[javascript]
// Create function declaration
// in it that adds two numbers

function add(a, b) {
    return a + b;
};
[/javascript]

Function literal has four parts.
<ul>
<li>The first part is the <b><u>reserved word function</u></b>.</li>

<li>The optional second part is the <b><u>function’s name</u></b>. The function can use its name to call itself recursively. The name can also be used by debuggers and development tools to identify the function. If a function is not given a name it is said to be anonymous.</li>

<li>The third part is the set of <b><u>parameters</u></b> of the function, wrapped in parentheses. Within the parentheses is a set of zero or more parameter names, separated by commas. These names will be defined as variables in the function. Unlike ordinary variables, instead of being initialized to undefined, they will be initialized to the arguments supplied when the function is invoked.</li>

<li>The fourth part is a set of <b><u>statements</u></b> wrapped in curly braces. These statements are the body of the function. They are executed when the function is invoked.</li>
</ul>

In addition to the declared parameters, every
function receives two additional parameters: <b><u>this</u></b> and <b><u>arguments</u></b>. The this parameter is very important in object oriented programming, and its value is determined by
the invocation pattern.

<a name="Invocation patterns" href=""></a>
There are <b><u>four patterns of invocation</u></b> in JavaScript:
<ul>
	<li>method invocation pattern</li>
	<li>function invocation pattern</li>
	<li>constructor invocation pattern</li>
	<li>apply, binding invocation pattern</li>
</ul>

The patterns differ how <b><u>this</u></b> will initialize.

<a name="Method invocation pattern" href=""></a>
<blockquote>Method invocation pattern</blockquote>

When a function is stored as a property of an object, we call it a <b><u>method</u></b>. When a
method is invoked, <b><u>this is bound to that object</u></b>. If an invocation expression contains a refinement (that is, a . dot expression or[subscript] expression), it is
invoked as a method:

[javascript]
var myObject = {
    value: 0,
    increment: function (inc) {
        this.value += typeof inc === 'number' ? inc : 1;
    }
};
myObject.increment( );
console.log(myObject.value); // 1
myObject.increment(2);
console.log(myObject.value); // 3
[/javascript]

The binding of this to the object happens at invocation
time. This very late binding makes functions that use this highly reusable. Methods
that get their object context from this are called <b><u>public methods</u></b>.

<a name="Function invocation pattern" href=""></a>
<blockquote>Function invocation pattern</blockquote>

When a function is invoked with this pattern, <b><u>this is bound to the global object</u></b>.
This was a mistake in the design of the language. Had the language been designed
correctly, when the inner function is invoked, this would still be bound to the this variable of the outer function. 

[javascript]
function outer() {
    console.log('outer context ' + this);
    function inner() {
        console.log('inner context ' + this);
    }
    inner();
}

outer();
//outer context[object Window]
//inner context[object Window]
[/javascript]

[javascript]
function func() { 
  "use strict";
  console.log(this); 
}

func();// undefined (expect IE<10)
[/javascript]

A consequence of this error is that a method cannot use an inner function to help it do its work because the inner function does not share the method’s access to the object as its this is bound to the wrong value. Fortunately, there is an easy workaround. If the method defines a variable and assigns it the value of this, the inner function will have access to this through that variable. By convention, the name of that variable is <b><u>that</u></b>

<a name="Constructor invocation pattern" href=""></a>
<blockquote>Constructor invocation pattern</blockquote>

JavaScript is a prototypal inheritance language. That means that objects can inherit properties directly from other objects.

Constructor can be any function, which is called with directive <b><u>new</u></b>

[javascript]
function Animal(name) {
  this.name = name;
  this.canWalk = true;
  //public method
  this.sayHi = function() {
    console.log(this.name + ', says Hi!');
  }
}

var animal = new Animal('bamby');
[/javascript]

How it works:
<ol>
  <li>Automaticaly is creating new, empty object</li>
  <li>Special keyword <b><u>this</u></b> gets a reference to ^- object</li>
  <li>Function is invoking. Usually, it modifies this, adds methods and properties</li>
  <li>Return this, if return object, than will be return object rather than this</li>
</ol>

<a name="The Apply/Call Invocation Pattern" href=""></a>
<blockquote>The Apply/Call Invocation Pattern</blockquote>

Because JavaScript is a functional object-oriented language, functions can have methods.

The apply method lets us choose the value of <b><u>this</u></b>. The apply method takes two parameters. The first is the value that should be bound to this. The second is an array of
parameters.

Call <code>func.apply(context, [a, b ...])</code> or <code>func.call(context, (a, b ...))</code> - the same as a normal call <code>func(a, b ...)</code>, but with an another <b><u>context</u></b>.

[javascript]
var user = { 
  firstName: "Bobby",
  surname: "Singler"
};

function getName(a, b) { 
  console.log( this[a] + ' ' + this[b] );
}

getName.apply(user, ['firstName', 'surname'])  // "Bobby Singler", this - our context

getName('firstName', 'surname')  // undefined undefined, this, will be window
[/javascript]

Invoke apply/call with <b><u>null</u></b> or <b><u>undefined</u></b>:

[javascript]
function f() {
  console.log(this);
}

//if call with null or undefined, this = window 
f.call(null); // window

function f() {
  "use strict"
  console.log(this);
}

//in strict mode, this = null 
f.call(null); // null

[/javascript]

Save My Day:
<a href="http://learn.javascript.ru/this" title="learn.javascript.ru">learn.javascript.ru</a>
<a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742">Crockfords JavaScript: The Good Parts</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>234</wp:post_id>
		<wp:post_date>2014-05-29 05:47:57</wp:post_date>
		<wp:post_date_gmt>2014-05-29 03:47:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>function-invocation-patterns-in-javascript</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3372590656]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>&quot;http-server&quot; module as a simple node.js server</title>
		<link>http://savemyday.in/node-js-as-a-simple-web-server-and-why-i-need-a-web-server/</link>
		<pubDate>Sat, 31 May 2014 08:52:43 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=251</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="wp-center">
<img src="http://savemyday.in/source/images/web_server.jpg" alt="" width="400"/>
</div>

<!--more-->

Why do you need web server?

First of all, in a simple term, to answer any your queries/requests made by user through the web. Hence, the name Web Server.

A <code>Web Server</code> is an application which is made available to listen to any request. A Server has the information. A Client is anyone who is in need of an information. When want, you make a request through the WWW ( World Wide Web (abbreviated as WWW or W3, commonly known as the <code>web</code>) which is predominantly through <a href="http://savemyday.in/https-and-http-difference/" title="HTTPS and HTTP difference">HTTP or HTTPS</a>. HTTP Stands for Hyper Text Transfer Protocol which defines the set of rules to be followed during the transcation over web.

In an Web or Enterprise Application perspective, you need a webserver as a first entry point since all the requests have to be originated from a single place.

Say, your login page to the application. But processing the login operation may not be the job of a Web Server and it would be done by a Web Application. As such, a Web Server is preferred to serve any static files, which is not changing in nature for any type of requests. Whereas, you need a Web application to produce a dynamic response according to the type of inputs you provide along with your request. In this scenario, to regulate all your traffic of requests, you need a single point of control, which is your webserver.

Some time ago for my projects I used pure Apache, and configure appache config it's not a big deal. Than I moved to XAMP/WAMP servises. Thats guys are more friendly with their GUI. But they was heavy for me, for 90% of case I didn't used to DB or PHP.

Than I have heard about simple web server on Python. I instaled it and it was syper easy by CLI. But than I found a Node.js <code>http-server</code> - is a simple, zero-configuration command-line http server. It is powerful enough for production usage, but it's simple and hackable enough to be used for testing, local development, and learning.

Simplest nodejs server is just:

[shell]
npm install http-server -g
[/shell]

Now you can run a server via:

[shell]
http-server
#OR
http-server -o --cors
#which opens your web browser and enables CORS requests.
[/shell]

For more options run:

[shell]
http-server --help
[/shell]

Article which saves my day:
<a href="https://github.com/nodeapps/http-server" title="http-server">github.com/nodeapps/http-server</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>251</wp:post_id>
		<wp:post_date>2014-05-31 10:52:43</wp:post_date>
		<wp:post_date_gmt>2014-05-31 08:52:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>node-js-as-a-simple-web-server-and-why-i-need-a-web-server</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript-2"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="nodejs"><![CDATA[NodeJs]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3330064062]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>110</wp:comment_id>
			<wp:comment_author><![CDATA[online education]]></wp:comment_author>
			<wp:comment_author_email>Encinias371944@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.beonelearning.com</wp:comment_author_url>
			<wp:comment_author_IP>184.95.52.218</wp:comment_author_IP>
			<wp:comment_date>2014-08-22 14:27:23</wp:comment_date>
			<wp:comment_date_gmt>2014-08-22 12:27:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I have now been checking out this page a lot since it I keep finding interesting information here.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[true]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408710443.565968036651611328125;s:7:"message";s:35:"Akismet caught this comment as spam";s:5:"event";s:10:"check-spam";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_pro_tip</wp:meta_key>
				<wp:meta_value><![CDATA[discard]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408892420.8914968967437744140625;s:7:"message";s:41:"qetr1ck reported this comment as not spam";s:5:"event";s:10:"report-ham";s:4:"user";s:7:"qetr1ck";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user</wp:meta_key>
				<wp:meta_value><![CDATA[qetr1ck]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408892620.101027011871337890625;s:7:"message";s:46:"qetr1ck changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"qetr1ck";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>126</wp:comment_id>
			<wp:comment_author><![CDATA[qetr1ck]]></wp:comment_author>
			<wp:comment_author_email>orestprustayko@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>178.137.93.185</wp:comment_author_IP>
			<wp:comment_date>2014-09-01 21:47:33</wp:comment_date>
			<wp:comment_date_gmt>2014-09-01 19:47:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks a lot!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>110</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1409600853.1127951145172119140625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"qetr1ck";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Difference of HTTP and HTTPS</title>
		<link>http://savemyday.in/https-and-http-difference/</link>
		<pubDate>Sat, 31 May 2014 04:00:36 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=252</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="wp-center">
    <a href="TODO">
        <div class="wp-center">
          <img src="http://savemyday.in/source/images/Difference of HTTP and HTTPS/http_vc_https.jpg" alt="" width="400" />
        </div>
    </a>
</div>

Hyper Text Transfer Protocol Secure (HTTPS) is a <code>secure version</code> of the Hyper Text Transfer Protocol (HTTP). HTTPS allows secure e-commerce transactions, such as on-line banking.

When a user connects to a website via HTTPS, the website encrypts the session with a Digital Certificate called as a <code>Secure Sockets Layer</code> (SSL), sometimes called Transport Layer Security (TLS) to send the information back.

Secure Sockets Layer uses a cryptographic system that encrypts data with two keys.

Web browsers show a padlock icon to indicate that the website is secure, as it also displays <code>https://</code> in the address bar. When a SSL Digital Certificate is installed on a web site, users can see a padlock icon at the bottom area of the navigator. When an Extended Validation Certificates is installed on a web site, users with the latest versions of browser will see the green address bar at the URL area of the navigator.

<div class="wp-center">
[caption id="" align="aligncenter" width="1040"]<img src="http://savemyday.in/source/images/Difference of HTTP and HTTPS/ssl.png" alt="" width="500" />SSL accepted in Chrome[/caption]
</div>

<a href name="TODO"></a>
<div class="title-block">
    Why Is A SSL Certificate Required?
</div>

With booming Internet trends and fraud, most will not submit their private details on the web unless they know that the information they provide is securely transmitted and not accessible for anyone to view.

Save my day:
<a href="http://www.instantssl.com/ssl-certificate-products/https.html" title="HTTP and HTTPS">HTTP and HTTPS</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>252</wp:post_id>
		<wp:post_date>2014-05-31 06:00:36</wp:post_date>
		<wp:post_date_gmt>2014-05-31 04:00:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>https-and-http-difference</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3331484970]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Shaping up with Angular.js</title>
		<link>http://savemyday.in/shaping-up-with-angular-js/</link>
		<pubDate>Sun, 01 Jun 2014 09:39:27 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=271</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="wp-center">
[caption id="" align="aligncenter" width="800"]<img src="http://savemyday.in/source/images/angular/angular_1-1.png" alt="" width="800"/>Why Angular[/caption]
</div>

<!--more-->

I'm a big fan of <a href="https://www.codeschool.com/" title="codeschool">codeschool</a> guys. Recently I have passed through Angular course. So I'm ready to adding behavior to HTML and speeding up my application's responsiveness. I want to publish quick reference here. 

<blockquote>Level 1: Getting started</blockquote>
<ul>
	<li><a href="/shaping-up-with-angular-js/#Traditional vc Ressponsive page-refresh">Traditional vc Ressponsive page-refresh</a></li>
	<li><a href="/shaping-up-with-angular-js/#Directives">Directives</a></li>
	<li><a href="/shaping-up-with-angular-js/#Modules">Modules</a></li>
	<li><a href="/shaping-up-with-angular-js/#Including our Module">Including our Module</a></li>
	<li><a href="/shaping-up-with-angular-js/#Expressions and Module in work">Expressions and Module in work</a></li>
	<li><a href="/shaping-up-with-angular-js/#Controller, attaching the controller">Controller, attaching the controller</a></li>
	<li><a href="/shaping-up-with-angular-js/#Scope of controler">Scope of controler</a></li>
	<li><a href="/shaping-up-with-angular-js/#NgShow and NgHide Directives">NgShow and NgHide Directives</a></li>
	<li><a href="/shaping-up-with-angular-js/#NgRepeat, working with array">NgRepeat, working with array</a></li>
</ul>
<hr>

<blockquote>Level 2: Filters, Directives, and Cleaner Code</blockquote>
<ul>
	<li><a href="/shaping-up-with-angular-js/#Derectives we have already known">Derectives we have already known</a></li>
	<li><a href="/shaping-up-with-angular-js/#First Filter. Formating with Filters">First Filter. Formating with Filters</a></li>
	<li><a href="/shaping-up-with-angular-js/#ng-src for images">ng-src for images</a></li>
	<li><a href="/shaping-up-with-angular-js/#ng-click">ng-click</a></li>
	<li><a href="/shaping-up-with-angular-js/#ng-init">ng-init</a></li>
	<li><a href="/shaping-up-with-angular-js/#ng-class">ng-class</a></li>
	<li><a href="/shaping-up-with-angular-js/#Cleaning HTML. Move logic into controller">Cleaning HTML. Move logic into controller</a></li>
</ul>
<hr>

<blockquote>Level 3: Forms, Models, and Validations</blockquote>
<ul>
	<li><a href="/shaping-up-with-angular-js/#Remember loop with ng-repeat">Remember loop with ng-repeat</a></li>
	<li><a href="/shaping-up-with-angular-js/#Writing Review Form">Writing Review Form</a></li>
	<li><a href="/shaping-up-with-angular-js/#Live preview">Live form preview</a></li>
	<li><a href="/shaping-up-with-angular-js/#ng-model. Bind data example">ng-model. Bind data example</a></li>
	<li><a href="/shaping-up-with-angular-js/#Using the reviewCtrl">Using the reviewCtrl</a></li>
	<li><a href="/shaping-up-with-angular-js/#ng-submit">ng-submit</a></li>
	<li><a href="/shaping-up-with-angular-js/#Form validation">Form validation. Prevent submit</a></li>
        <li><a href="/shaping-up-with-angular-js/#The input clases">The input clases</a></li>
</ul>
<hr>

<blockquote>Level 4: Creating a Directive with an Associated Controller</blockquote>
<ul>
	<li><a href="/shaping-up-with-angular-js/#ng-include">ng-include. Templating in work</a></li>
	<li><a href="/shaping-up-with-angular-js/#Creating First Custom Directive">Custom Directive</a></li>
	<li><a href="/shaping-up-with-angular-js/#Attribute Directive. Attribute vc Element Directive">Attribute Directive. Attribute vc Element Directive</a></li>
	<li><a href="/shaping-up-with-angular-js/#Review our directory">Review our directory</a></li>
</ul>
<hr>

<blockquote>Level 5: Dependencies and Services</blockquote>
<ul>
	<li><a href="/shaping-up-with-angular-js/#Clean up. Creating new module. Module dependency">Clean up. Creating new module. Module dependency</a></li>
	<li><a href="/shaping-up-with-angular-js/#We need a Service!">We need a Service!</a></li>
	<li><a href="/shaping-up-with-angular-js/#Dependency Injection">Dependency Injection</a></li>
	<li><a href="/shaping-up-with-angular-js/#$http.success()">$http.success()</a></li>
</ul>
<hr>

<div class="wp-center wp-img-shadow" >
<a name="Traditional vc Ressponsive page-refresh" href=""></a>
<img src="http://savemyday.in/source/images/angular/angular_1-2.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_1-3.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_1-4.png" alt="" width="800" />
<br>
<a name="Directives" href=""></a>
<img src="http://savemyday.in/source/images/angular/angular_1-5.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_1-6.png" alt="" width="800" />
<br>
<a name="Modules" href=""></a>
<img src="http://savemyday.in/source/images/angular/angular_1-7.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_1-8.png" alt="" width="800" />
<br>
<a name="Including our Module" href=""></a>
<img src="http://savemyday.in/source/images/angular/angular_1-9.png" alt="" width="800" />
<br>
<a name="Expressions and Module in work" href></a>
<img src="http://savemyday.in/source/images/angular/angular_1-10.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_1-11.png" alt="" width="800" />
<br>Controller, attaching the controller
<a name="Controller, attaching the Controller" href></a>
<img src="http://savemyday.in/source/images/angular/angular_1-12.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_1-13.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_1-14.png" alt="" width="800" />
<br>
<a name="Scope of controler" href></a>
<img src="http://savemyday.in/source/images/angular/angular_1-15.png" alt="" width="800" />
<br>
<a name="NgShow and NgHide Directives" href></a>
<img src="http://savemyday.in/source/images/angular/angular_1-16.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_1-17.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_1-18.png" alt="" width="800" />
<br>
<a name="NgRepeat, working with array" href></a>
<img src="http://savemyday.in/source/images/angular/angular_1-19.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_1-20.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_1-21.png" alt="" width="800" />
</div>

<br>
<hr>

<div class="wp-center wp-img-shadow" >
<blockquote>Level 2</blockquote>

<a name="Derectives we have already known" href></a>
<img src="http://savemyday.in/source/images/angular/angular_2-1.png" alt="" width="800" />
<br>
<a name="First Filter. Formating with Filters" href></a>
<img src="http://savemyday.in/source/images/angular/angular_2-2.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_2-3.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_2-4.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_2-5.png" alt="" width="800" />
<br>
<a name="ng-src for images" href></a>
<img src="http://savemyday.in/source/images/angular/angular_2-6.png" alt="" width="800" />
<br>
<a name="ng-click" href></a>
<img src="http://savemyday.in/source/images/angular/angular_2-7.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_2-8.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_2-9.png" alt="" width="800" />
<br>
<a name="ng-init" href></a>
<img src="http://savemyday.in/source/images/angular/angular_2-10.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_2-11.png" alt="" width="800" />
<br>
<a name="ng-class" href></a>
<img src="http://savemyday.in/source/images/angular/angular_2-12.png" alt="" width="800" />
<br>
<a name="Cleaning HTML. Move logic into controller" href></a>
<img src="http://savemyday.in/source/images/angular/angular_2-13.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_2-14.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_2-15.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_1-16.png" alt="" width="800" />
</div>

<br>
<hr>
<div class="wp-center wp-img-shadow" >
<blockquote>Level 3</blockquote>

<a name="Remember loop with ng-repeat" href></a>
<img src="http://savemyday.in/source/images/angular/angular_3-1.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_3-2.png" alt="" width="800" />
<br>
<a name="Writing Review Form" href></a>
<img src="http://savemyday.in/source/images/angular/angular_3-3.png" alt="" width="800" />
<br>
<a name="Live preview" href></a>
<img src="http://savemyday.in/source/images/angular/angular_3-4.png" alt="" width="800" />
<br>
<a name="ng-model. Bind data example" href></a>
<img src="http://savemyday.in/source/images/angular/angular_3-5.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_3-6.png" alt="" width="800" />
<br>
<a name="Using the reviewCtrl" href></a>
<img src="http://savemyday.in/source/images/angular/angular_3-7.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_3-8.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_3-9.png" alt="" width="800" />
<br>
<a name="ng-submit" href></a>
<img src="http://savemyday.in/source/images/angular/angular_3-10.png" alt="" width="800" />
<br>
<a name="Form validation" href></a>
<img src="http://savemyday.in/source/images/angular/angular_3-11.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_3-12.png" alt="" width="800" />
<br>
<a name="The input clases" href></a>
<img src="http://savemyday.in/source/images/angular/angular_3-13.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_3-14.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_3-15.png" alt="" width="800" />
</div>

<br>
<hr>
<div class="wp-center wp-img-shadow" >
<blockquote>Level 4</blockquote>

<a name="ng-include" href></a>
<img src="http://savemyday.in/source/images/angular/angular_4-1.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_4-2.png" alt="" width="800" />
<br>
<a name="Creating First Custom Directive" href></a>
<img src="http://savemyday.in/source/images/angular/angular_4-3.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_4-4.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_4-5.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_4-6.png" alt="" width="800" />
<br>
<a name="Attribute Directive. Attribute vc Element Directive" href></a>
<img src="http://savemyday.in/source/images/angular/angular_4-7.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_4-8.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_4-9.png" alt="" width="800" />
<br>
<a name="Review our directory" href></a>
<img src="http://savemyday.in/source/images/angular/angular_4-10.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_4-11.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_4-12.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_4-13.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_4-14.png" alt="" width="800" />
<br>
</div>

<br>
<hr>
<div class="wp-center wp-img-shadow" >
<blockquote>Level 5</blockquote>

<a name="Clean up. Creating new module. Module dependency" href></a>
<img src="http://savemyday.in/source/images/angular/angular_5-1.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_5-2.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_5-3.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_5-4.png" alt="" width="800" />
<br>
<a name="We need a Service!" href></a>
<img src="http://savemyday.in/source/images/angular/angular_5-5.png" alt="" width="800" />
<br>
<a name="Dependency Injection" href></a>
<img src="http://savemyday.in/source/images/angular/angular_5-6.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_5-7.png" alt="" width="800" />
<br>
<img src="http://savemyday.in/source/images/angular/angular_5-8.png" alt="" width="800" />
<br>
<a name="$http.success()" href></a>
<img src="http://savemyday.in/source/images/angular/angular_5-9.png" alt="" width="800" />
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>271</wp:post_id>
		<wp:post_date>2014-06-01 11:39:27</wp:post_date>
		<wp:post_date_gmt>2014-06-01 09:39:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>shaping-up-with-angular-js</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="angular"><![CDATA[Angular]]></category>
		<category domain="post_tag" nicename="angular"><![CDATA[Angular]]></category>
		<category domain="category" nicename="javascript-2"><![CDATA[Javascript]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3463834292]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Prevent CSS Caching</title>
		<link>http://savemyday.in/prevent-css-caching/</link>
		<pubDate>Mon, 02 Jun 2014 17:50:42 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=326</guid>
		<description></description>
		<content:encoded><![CDATA[If you update your WordPress theme’s style.css, you may have noticed that you have to “force-reload” your site in your browser to see the changes. This is because your browser keeps a copy of the CSS cached on your hard drive. Depending on how your server is set up, it may not check for a new version of the stylesheet for a couple hours, or longer! And even if you force-reload to see the changes, visitors who have previously accessed your site may still get the old CSS. 

<!--more-->

One way to solve this is to “version” your CSS file, by adding:

[html]
<link rel="stylesheet" 
href="<?php bloginfo('stylesheet_url'); echo '?' . filemtime( get_stylesheet_directory() . '/style.css'); ?>" type="text/css" media="screen, projection" />
[/html]

Time stamp with JavaScript:

[javascript]
//get links array
//fetch required element
//add time stamp

document.head.querySelectorAll('link')[1].href += '?v=' + Date.now() //or +new Date;
[/javascript]

Save my day: 
<a href="http://markjaquith.wordpress.com/2009/05/04/force-css-changes-to-go-live-immediately/" title="Mark post"></a>
<a href="http://css-tricks.com/can-we-prevent-css-caching/" title="Css-tricks"></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>326</wp:post_id>
		<wp:post_date>2014-06-02 19:50:42</wp:post_date>
		<wp:post_date_gmt>2014-06-02 17:50:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>prevent-css-caching</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="css"><![CDATA[CSS]]></category>
		<category domain="category" nicename="javascript-2"><![CDATA[Javascript]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3699390380]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>109</wp:comment_id>
			<wp:comment_author><![CDATA[Click Here]]></wp:comment_author>
			<wp:comment_author_email>Musson197261@mail.com</wp:comment_author_email>
			<wp:comment_author_url>http://BeOneLearning.com/</wp:comment_author_url>
			<wp:comment_author_IP>184.95.52.218</wp:comment_author_IP>
			<wp:comment_date>2014-08-22 12:59:19</wp:comment_date>
			<wp:comment_date_gmt>2014-08-22 10:59:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Your articles are very relateable. I enjoyed reading them.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[true]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408705159.3660929203033447265625;s:7:"message";s:35:"Akismet caught this comment as spam";s:5:"event";s:10:"check-spam";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408892423.1872310638427734375;s:7:"message";s:41:"qetr1ck reported this comment as not spam";s:5:"event";s:10:"report-ham";s:4:"user";s:7:"qetr1ck";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user</wp:meta_key>
				<wp:meta_value><![CDATA[qetr1ck]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408892623.1249039173126220703125;s:7:"message";s:46:"qetr1ck changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"qetr1ck";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Bootstrap links</title>
		<link>http://savemyday.in/354/</link>
		<pubDate>Mon, 09 Jun 2014 09:56:07 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=354</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="wp-center">
<img src="http://savemyday.in/source/images/bootstrap.jpeg" alt="" width="400"/>
</div>


<!--more-->

<a href="http://getbootstrap.com/css/#grid" title="Grid system on getbootstrap">Grid system on getbootstrap</a>

<a href="http://getbootstrap.com/components/" title="Components on getbootstrap">Components on getbootstrap</a>

<a href="http://getbootstrap.com/getting-started/#examples" title="Examples on getbootstrap">Exemples on getbootstrap</a>

In this article, I would like to create short reference for how add/remove/toogle/... class in pure Javascript and with freemework.

<!--more-->

<ol>
	<li>Overview</li>
<ul style="list-style: none;">
	<li><a class="link-icon" href="/class-manipulation-in-javascript-jquery-and-angularjs/#className"></a>Mobile First</li>
	<li><a class="link-icon" href="/class-manipulation-in-javascript-jquery-and-angularjs/#classList"></a>Typography and links</li>
	<li><a class="link-icon" href="/class-manipulation-in-javascript-jquery-and-angularjs/#classList"></a>Normalize.css</li>
</ul>
	<li>Grid System</li>
<ul style="list-style: none;">
	<li><a class="link-icon" href="/class-manipulation-in-javascript-jquery-and-angularjs/#hasClass"></a>hasClass</li>
	<li><a class="link-icon" href="/class-manipulation-in-javascript-jquery-and-angularjs/#addClass"></a>addClass</li>
	<li><a class="link-icon" href="/class-manipulation-in-javascript-jquery-and-angularjs/#removeClass"></a>removeClass</li>
	<li><a class="link-icon" href="/class-manipulation-in-javascript-jquery-and-angularjs/#toogleClass"></a>toogleClass</li>
</ul>
	<li>AngularJS</li>
<ul style="list-style: none;">
	<li><a class="link-icon" href="/class-manipulation-in-javascript-jquery-and-angularjs/#ng-class"></a>ng-class</li>
	<li><a class="link-icon" href="/class-manipulation-in-javascript-jquery-and-angularjs/#ng-style"></a>ng-style</li>
</ul>



</ol>
<hr>

<blockquote>Overview</blockquote>

<a href name="className"></a>
<i class="attention"></i>Mobile First

To ensure proper rendering and touch zooming, add the viewport <code>meta</code> tag: 

[html]
<meta name="viewport" content="width=device-width, initial-scale=1">
[/html]

You can disable zooming capabilities on mobile devices by adding user-scalable=no to the viewport <code>meta</code> tag:

[html]
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
[/html]

<a href name="className"></a>
<i class="attention"></i>Typography and links

Bootstrap sets basic global display, typography, and link styles. Specifically, we:

<ul>
	<li>Set <code>background-color: #fff;</code> on the body</li>
	<li>Use the <code>@font-family-base</code>, <code>@font-size-base</code>, and <code>@line-height</code>-base attributes as our typographic base</li>
	<li>Set the global link color via <code>@link-color</code> and apply link underlines only on <code>:hover</code></li>
</ul>

These styles can be found within <code>scaffolding.less	</code>.

<a href name="className"></a>
<i class="attention"></i>Normalize.css

For improved cross-browser rendering, Bootstrap uses <a href="http://necolas.github.io/normalize.css/">Normalize.css</a>, a project by Nicolas Gallagher and Jonathan Neal.
<hr>

<blockquote>Grid System</blockquote>

<a href name="className"></a>
<i class="attention"></i>Normalize.css

[css]
/* Extra small devices (phones, less than 768px) */
/* No media query since this is the default in Bootstrap */
@media (min-width: @screen-xs-min) { ... }

/* Small devices (tablets, 768px and up) */
@media (min-width: @screen-sm-min) { ... }

/* Medium devices (desktops, 992px and up) */
@media (min-width: @screen-md-min) { ... }

/* Large devices (large desktops, 1200px and up) */
@media (min-width: @screen-lg-min) { ... }
[/css]

Using a single set of <code>.col-md-*</code> grid classes, you can create a basic grid system that starts out stacked on mobile devices and tablet devices (the extra small to small range) before becoming horizontal on desktop (medium) devices. Place grid columns in any <code>.row</code>.

<p data-height="284" data-theme-id="0" data-slug-hash="qLfBk" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/qLfBk/'>Grid System</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>354</wp:post_id>
		<wp:post_date>2014-06-09 11:56:07</wp:post_date>
		<wp:post_date_gmt>2014-06-09 09:56:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>354</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bootstrap"><![CDATA[Bootstrap]]></category>
		<category domain="category" nicename="css"><![CDATA[CSS]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[bootstrap-fast-usefull-links]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3503954361]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>104</wp:comment_id>
			<wp:comment_author><![CDATA[online schools]]></wp:comment_author>
			<wp:comment_author_email>Beiley310068@mail.com</wp:comment_author_email>
			<wp:comment_author_url>http://beonelearning.com</wp:comment_author_url>
			<wp:comment_author_IP>184.95.52.218</wp:comment_author_IP>
			<wp:comment_date>2014-08-21 21:13:42</wp:comment_date>
			<wp:comment_date_gmt>2014-08-21 19:13:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, I'm very interested in your website.  I think it seems great and has very interesting content.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408892761.15283298492431640625;s:7:"message";s:46:"qetr1ck changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"qetr1ck";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[true]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408648422.2846848964691162109375;s:7:"message";s:35:"Akismet caught this comment as spam";s:5:"event";s:10:"check-spam";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_pro_tip</wp:meta_key>
				<wp:meta_value><![CDATA[discard]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408892649.18274402618408203125;s:7:"message";s:41:"qetr1ck reported this comment as not spam";s:5:"event";s:10:"report-ham";s:4:"user";s:7:"qetr1ck";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user</wp:meta_key>
				<wp:meta_value><![CDATA[qetr1ck]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Recipe with AngularJS</title>
		<link>http://savemyday.in/recipe-with-angular-js/</link>
		<pubDate>Tue, 17 Jun 2014 10:52:53 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=377</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="wp-center">
<img src="http://savemyday.in/source/images/feelings_about_angularjs_over_time.png" alt="" width="400"/>
</div>

<!--more-->

Table of content:
<ol>
	<li>Controllers</li>
	<ul style="list-decoration: none">
            <li><a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>Changing a Model value with a Controller used <code>ng-init</code></li>
            <li><a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>Encapsulating a Model value with a Controller</li>
            <li><a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>Sharing models between nested Controllers. Object vc Primitives. <code>.notation</code></li>
            <li><a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>Sharing сode between Controllers using <code>services</code> and <code>factory</code></li>
            <li><a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>Use the <code>$watch</code> function in your controller</li>
            <li><a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a><code>$watch</code> list, how the <code>$apply</code> runs <code>$diggest</code> loop and <code>dirty check</code></li>
            <li><a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>Show clock, $scope.$apply</li>
        </ul>
        <li>Directives</li>
        <ul style="list-decoration: none">
            <li> <a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>Build-In directives:</li>
            	<ul tyle="list-decoration: none">
            		<li> <a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>Basic ng Attribute directves:</li>
            			<ul tyle="list-decoration: none">
		            		<li> <a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>ng-href</li>
		            		<li> <a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>ng-src</li>
		            		<li> <a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>ng-disabled</li>
		            		<li> <a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>ng-readonly</li>
		            		<li> <a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>ng-selected</li>
							<li> <a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>ng-class</li>
							<li> <a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>ng-style</li>
		            	</ul>
            		<li> <a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>Directives with Child Scope:</li>
            			<ul tyle="list-decoration: none">
            				<li> <a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>ng-app</li>
            				<li> <a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>ng-controller</li>
            				<li> <a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>ng-switch</li>
		            		<li> <a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>ng-if</li>
		            		<li> <a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>ng-include</li>
		            		<li> <a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>ng-repeat</li>
		            		<li> <a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>ng-inint</li>
		            		<li> <a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>ng-bind</li>
		            		<li> <a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>ng-cloak</li>
		            		<li> <a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>ng-bind-template</li>
		            		<li> <a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>ng-model</li>
		            		<li> <a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>ng-hide/show</li>
		            		<li> <a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>ng-change</li>
            			</ul>
            		<li> <a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>AngularJS Form Handling,<code>ng-form</code></li>
            			<ul tyle="list-decoration: none">
            				<li><a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>binding checkboxes</li>
            				<li><a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>binding radio buttons</li>
            				<li><a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>binding select box</li>
            				<li><a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>form validation</li>
            				<li><a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>ng-minlength + ng-maxlength</li>
            				<li><a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>ng-pattern</li>
            				<li><a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>ng-required</li>
            				<li><a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>Checking Field Validation State($pristine, $dirty, $valid, $invalid)</li>
            				<li><a class="link-icon" href="/recipe-with-angular-js/#ng-init"></a>submitting Forms(ng-click vc ng-submit)</li>
            			</ul>
            	</ul>
            	
            <li>Changing the DOM in response to user actions. Create reusable element</li>
            <li>Directive-to-Directive Communication</li>
            <li>Passing Configuration Params Using HTML Attributes</li>
            
        </ol>
</ol>
<hr>

<blockquote>Controllers</blockquote>
Controllers in Angular provide the business logic to handle view behavior, for example responding to a user clicking a button or entering some text in a form. Additionally, controllers prepare the model for the view template.

As a general rule, a controller should not reference or manipulate the DOM directly. This has the benefit of simplifying unit testing controllers.

<a href="" name="ng-init"></a>
<h5>Changing a Model Value with a Controller Function, <code>ng-init</code></h5>

Implement an increment function that changes the scope.

[javascript]
function MyCtrl($scope) {
  $scope.value = 1;

  $scope.incrementValue = function(increment) {
    $scope.value += increment;
  };
}
[/javascript]

This function can be directly called in an expression, in our example we use <code>ng-init</code>:

[html]
<div ng-controller="MyCtrl">
  <p ng-init="incrementValue(1)">{{value}}</p>
</div>
[/html]
<hr>

<a href="" name=""></a>
<h5>Encapsulating a Model Value with a Controller Function</h5>

<p class="title"><i class="attention"></i>Define a getter function that returns the model value.</p>

[javascript]
function MyCtrl($scope) {
  $scope.value = 1;

  $scope.getIncrementedValue = function() {
    return $scope.value + 1;
  };
}
[/javascript]

Then in the template we use an expression to call it:

[html]
<div ng-controller="MyCtrl">
  <p>{{getIncrementedValue()}}</p>
</div>
[/html]
<hr>

<a href name=""></a>
<h4>Sharing Code Between Controllers using <code>Services</code> and <code>Factory</code></h4>

<p class="title"><i class="attention"></i>You wish to share business logic between controllers.</p>

[javascript]
var myApp = angular.module('myApp', []);
 
//service style, probably the simplest one
myApp.service('helloWorldFromService', function() {
    this.sayHello = function() {
        return "Hello, World!"
    };
});
 
//factory style, more involved but more sophisticated
myApp.factory('helloWorldFromFactory', function() {
    return {
        sayHello: function() {
            return "Hello, World!"
        }
    };
});
    
app.controller("MyCtrl", function($scope, helloWorldFromFactory) {
  $scope.helloFromFactory = helloWorldFromFactory.sayHello()
});

app.controller("AnotherCtrl", function($scope, helloWorldFromService) {
  $scope.helloFromService = helloWorldFromService.sayHello();
});
[/javascript]

The template shows access to model value from two controllers:

[html]
<div class="rootCtrl" ng-controller="MyCtrl">
 <p>helloFromFactory </p>
  <div class="nested" ng-controller="AnotherCtrl">
    <p>helloFromService</p>
  </div>
</div>
[/html]

The <code>factory/service</code> method creates a singleton helloWorldFromFactory and helloWorldFromServise, that returns functions.

<p class="title"><i class="attention"></i>Solve problem with minification:</p>

[javascript]
app.controller("AnotherCtrl", ["$scope", "helloWorldFromService",
  function($scope, helloWorldFromService) {
    $scope.firstUser = helloWorldFromService.sayHello();
  }
]);
[/javascript]
<hr>

<a href name=""></a>
<h4>Sharing Models Between Nested Controllers. <code>.notation</code></h4>

Use objects instead of primitives or direct $parent scope references.
<p class="title"><i class="attention"></i>Use objects instead of primitives or direct <code>$scope.$parent</code> scope references.</p>

[html]
<body ng-app="MyApp">
  <div ng-controller="MyCtrl">
    <label>Primitive</label>
    <input type="text" ng-model="name">

    <label>Object</label>
    <input type="text" ng-model="user.name">

    <div class="nested" ng-controller="MyNestedCtrl">
      <label>Primitive</label>
      <input type="text" ng-model="name">

      <label>Primitive with explicit $parent reference</label>
      <input type="text" ng-model="$parent.name">

      <label>Object</label>
      <input type="text" ng-model="user.name">
    </div>
  </div>
</body>
[/html]

Controller has definition and initializes the scope with some defaults:

[javascript]
var app = angular.module("MyApp", []);

app.controller("MyCtrl", function($scope) {
  $scope.name = "Peter";
  $scope.user = {
    name: "Parker"
  };
});

app.controller("MyNestedCtrl", function($scope) {
});
[/javascript]

In Angular, a scope prototypically inherits properties from a parent scope.

They all share the same scope variable as long as they only read from the variable. If you change the nested value, a <code>copy</code> in the scope of the MyNestedCtrl will be created. From now on, changing the first input field will only <code>change</code> the nested input which explicitly references the parent scope via <code>$parent.name</code> expression.

The <code>object-based</code> value behaves differently in this regard. Whether you change the nested or the MyCtrl scopes input fields, the changes will stay in <code>sync</code>. Objects are therefore references and kept in sync. Whereas primitives types are only in sync as long they are not changed in the child scope.

Generally I tend to not use <code>$parent.name ($scope.$parent)</code> and instead always use objects to share model properties. If you use $parent.name the MyNestedCtrl not only requires certain model attributes but also a correct scope hierarchy to work with.

Tip: The Chrome plugin Batarang simplifies debugging the scope hierarchy by showing you a tree of the nested scopes. It is awesome!
<hr>

<a href="" name=""></a>
<h4>Use the <code>$watch</code> function in your controller</h4>

[javascript]
function MyCtrl($scope) {
  $scope.name = "";

  $scope.$watch("name", function(newValue, oldValue) {
    if ($scope.name.length > 0) {
      $scope.greeting = "Greetings " + $scope.name;
    }
  });
}
[/javascript]

In our example we use the text input value to print a friendly greeting.

[html]
<div ng-controller="MyCtrl">
  <input type="text" ng-model="name" placeholder="Enter your name">
  <p>{{greeting}}</p>
</div>
[/html]


Example 2:

[javascript]
app.controller('MainCtrl', function($scope) {
  $scope.name = "Angular";

  $scope.updated = 0;

  $scope.$watch('name', function(newValue, oldValue) {
    if (newValue === oldValue) { return; } // AKA first run
    $scope.updated++;
  });
});
[/javascript]

Example 3:

[javascript]
app.controller('MainCtrl', function($scope) {
  $scope.user = {
    name:"Angular"
  };

  $scope.updated = 0;

  $scope.$watch('name', function(newValue, oldValue) {
    if (newValue === oldValue) { return; } // AKA first run
    $scope.updated++;
  }, true);
});
[/javascript]

We added a <code>third parameter</code> to the <code>$watch</code> which is a bool to indicate that we want to compare the value of the objects instead of the reference. And since the value of <code>$scope.user</code> is changing when we update the <code>$scope.user.name</code> the $watch will fire appropriately.
<hr>

<h4>Realization of clock</h4>

[javascript]
var myAppModule = angular.module('myApp', []);

  myAppModule.controller('MyCtrl', function($scope, $timeout) {
    /*$scope.clock = function() {
      return new Date();
    }*/
    $scope.clock = new Date();

    function updateClock() {
      $scope.clock = new Date();
    }

    setInterval(function() {
      $scope.$apply(updateClock)
    }, 1000);
    
    //updateClock()

  });
[/javascript]
<hr>

<a href name=""></a>
<h5>$watch list, how the $apply runs $diggest loop</h5>

Angular users want to know how data-binding works. There is a lot of vocabulary around this: <code>$watch</code>, <code>$apply</code>, <code>$digest</code>, <code>dirty-checking</code>… What are they and how do they work?

<i class="attention"></i>The browser events-loop and the AngularJS extension.

Our browser is waiting for events, for example the user interactions. If you click on a button or write into an input, the event’s callback will run inside Javascript and there you can do any DOM manipulation, so when the callback is done, the browser will make the appropiate changes in the DOM.

Angular extends this events-loop creating something called <code>angular context</code> (remember this, it is an important concept).

<i class="attention"></i>The <code>$watch</code> list.

Every time you bind something in UI you insert a <code>$watch</code> in <code>$watch list</code>. Imagine that <code>$watch</code> as something tha is able to detect changes in the model it is watching: 

[html]
User: <input type="text" ng-model="user" />
Password: <input type="password" ng-model="pass" />
[/html]

Here we have <code>$scope.user</code>, which is bound to the first input, and we have <code>$scope.pass</code>, which is bound to the second one. Doing this we add two <code>$watch</code> to the <code>$watch list</code>.

[javascript]
app.controller('MainCtrl', function($scope) {
  $scope.foo = "Foo";
  $scope.world = "World";
})
[/javascript]

[html]
<div>Hello, {{world}}</div>
[/html]

Here, even though we have two things attached to the <code>$scope</code>, only one is bound. So in this case we only created one <code>$watch</code>.

[javascript]
app.controller('MainCtrl', function($scope) {
  $scope.people = [...];
});
[/javascript]

[html]
<ul>
  <li ng-repeat="person in people">
      {{person.name}} - {{person.age}}
  </li>
</ul>
[/html]

How many $watch are created here? <code>3!</code> Two for each person (for name and age) in people plus one for the ng-repeat. If we have 10 people in the list it will be (2 * 10) + 1, AKA <code>21 $watch</code>.

So, everything that is bound in our UI using directives creates a $watch. Right, but when are those <code>$watch</code> created?

When our template is loaded, in the <code>linking phase</code>, the compiler will look for every directive and creates all the $watch that are needed. This sounds good, but… now what?

<i class="attention"></i>$digest loop and dirty cheking.

When the browser <code>receives an event</code> that can be managed by the <code>angular context</code> the <code>$digest loop</code> will be fired. This loop is made from two smaller loops. One processes the $evalAsync queue and the other one processes the $watch list.

What is that process about? The <code>$digest</code> will loop through the list of <code>$watch</code> that we have, asking this:

<ul>
	<li>Hey <code>$watch</code>, what is your value?</li>
        <ul>
	    <li>It is <code>9</code></li>
        </ul>
        <li>Alright, has it changed?</li>
        <ul>
	    <li>No, Monsieur</li>
        </ul>
        <li>(nothing happens with this one, so it moves to the next <code>$watch</code>)</li>
        <li>You, what is your value?</li>
        <ul>
	    <li>It is <code>Foo</code></li>
        </ul>
        <li>Has it changed?</li>
        <ul>
	    <li>Yes, it was <code>Bar</code></li>
        </ul>
        <li>(good, we have a DOM to be updated)</li>
        <li>This continues until every <code>$watch</code> has been checked.</li>
</ul>

This is a <code>dirty-checking</code>. Now that all the <code>$watch</code> have been checked there is something else to ask: Is there any <code>$watch</code> that has been updated? If there is at least one of them that has changed, the loop will fire again until all of the <code>$watch</code> report no changes. This is to ensure that every model is clean. Have in mind that if the loop runs more than 10 times, it will throw an exception to prevent infinite loops.

[javascript]
app.controller('MainCtrl', function() {
  $scope.name = "Foo";

  $scope.changeFoo = function() {
      $scope.name = "Bar";
  }
});
[/javascript]

[html]
{{name}}
<button ng-click="changeFoo()">Change name value</button>
[/html]

Here we have only one <code>$watch</code> because ng-click doesn’t create any watches (the function is not going to change).

<ol>
	<li>We press the button.</li>
	<li>The browser receives an <code>event</code> which will enter the <code>angular context</code></li>
	<li>The <code>$digest loop</code> will run and will ask every <code>$watch</code> for changes.</li>
	<li>If $watch which was watching for changes in <code>$scope.name</code> <code>reports a change</code>, than will force another <code>$digest loop</code>.</li>
	<li>The new loop reports nothing.</li>
	<li>The browser gets the control back and it will update the DOM reflecting the new value of <code>$scope.name</code></li>
</ol>

The important thing here is that <code>EVERY event</code> that enters the <code>angular context</code> will run a <code>$digest loop</code>. That means that every time we write a letter in an input, the loop will run checking every <code>$watch</code> in this page.

<i class="attention"></i>Entering the angular context with $apply.

What says which events enter the angular context and which ones do not? <code>$apply</code>

So if you click on an element with <code>ng-click</code>, the event will be wrapped inside an <code>$apply</code> call. If you have an input with <code>ng-model="foo"</code> and you write an f, the event will be called like this: <code>$apply("foo = 'f';")</code>, in other words, wrapped in an <code>$apply</code> call.


<i class="attention"></i>When angular doesn’t use $apply for us.

This become a paint-point for newscomer to Angular world. Why is my <code>jQuery</code> not updating my bindings? Because jQuery doesn't call <code>$apply</code> and then events never enter to <code>angular context</code> and <code>$digest</code> loop is never fired.

Imagine we have following directive and controller:

<p data-height="268" data-theme-id="0" data-slug-hash="tEeih" data-default-tab="js" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/tEeih/'>Custom directive without $apply</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

What happaning is that <code>$scope</code> is indeed changed but since that is not forcing a <code>$diges</code>t loop, the <code>$watch</code> for foo and for bar are not runnig, thats why they did not change. This mean that we neet to invoke <code>$apply</code>, then all $watch will see that they have changed and then updated the DOM as needed.

Fix that is easy, we just need to call $apply like this:

<p data-height="268" data-theme-id="0" data-slug-hash="DACgy" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/DACgy/'>Custom directive with $apply</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

<code>$apply</code> is function of out <code>$scope</code> (or scope inside directive's link function) so calling will forse <code>$digest</code> loop.

Why do we have two difference way of calling <code>$apply</code>? The difference is that in the first version, we are updating the values outside the angular context so if that throws an error, Angular will never know. Obviously in this tiny toy example it won’t make much difference, but imagine that we have an alert box to show errors to our users and we have a 3rd party library that does a network call and it fails. If we don’t wrap it inside an <code>$apply</code>, Angular will never know about the failure and the alert box won’t be there.
<hr>


<blockquote>Directives</blockquote>

Directives are one of the most powerful concepts in Angular since they let you invent new HTML elements specific to your application. This allows you to create reusable components which encapsulate complex DOM structures, stylesheets and even behavior.

<a href name=""></a>
<h5>Build-in directives</h5>

<i class="attention"></i>ng-checked, ng-disabled

[html]
<body ng-app>
  <label><input type="checkbox" ng-model="checked"/>Toggle Button</label>
  <button ng-disabled="email">Press me</button>
</body>
[/html]

<i class="attention"></i>ng-readonly

[html]
<input type="text" ng-model="someProperty"><br/>
<input type="text"
	ng-readonly="someProperty"
	value="Some text here"/>
[/html]

<i class="attention"></i>ng-href

When dynamically creating a URL from a property on the current scope, always use ng-href instead of <code>href</code>.

The issue here is that the user is able to click a link built with </code>href</code> before interpolation takes place, which would bring them to the wrong page (often a 404).

[html]
<!-- Always use ng-href when href includes an {{ expression }} -->
<a ng-href="{{myHref}}">I'm feeling lucky, when I load</a>
<!-- href may not load before user clicks -->
<a href="{{myHref}}">I'm feeling 404</a>
[/html]

<i class="attention"></i>ng-src

Angular will tell the browser to NOT fetch the image via the given URL until all expressions provided to <code>ng-src</code> have been interpolated:

[html]
<h1>Wrong Way</h1>
<img src="{{imgSrc}}" />
<h1>Right way</h1>
<img ng-src="{{imgSrc}}" />
[/html]

[javascript]
angular.module('myApp', [])
	.run(function($rootScope, $timeout) {
		$timeout(function() {
		$rootScope.imgSrc = 'https://www.google.com/images/srpr/logo11w.png';
	}, 2000);
});
[/javascript]
<hr>

<h5>Directives with Child Scope</h5>

The following directives create a child scope that prototypically inherits from its parent.

<i class="attention"></i>ng-app

In your JavaScript code you can access the <code>$rootScope</code> via the <code>run</code> method:

[html]
<html ng-app="myApp">
	<body>
		{{ someProperty }}
	<button ng-click="someAction()"></button>
	</body>
</html>
[/html]

[javascript]
angular.module('myApp', [])
.run(function($rootScope) {
	$rootScope.someProperty = 'hello computer';
	$rootScope.someAction = function() {
		$rootScope.someProperty = 'hello human';
	};
});
[/javascript]

We can only use <code>ng-app</code> once per document.

<i class="attention"></i>ng-controller

Main rules:
<ul>
	<li>An action refers to a traditional JavaScript method on the <code>$scope</code> object</li>
	<li>A model refers to a traditional JavaScript object {} where transient state should be stored.
	Persistent state should be bound to a <code>service</code>, which is then responsible for dealing with
	persisting that model</li>
	<li>Data in the
	DOM should always use a <code>. (dot)</code>. Following this rule will keep you out of unexpected
	trouble</li>
	<li>Controllers should be as simple as possible. Although we can use the controller to prototype
	our functionality, it’s a good idea to refactor the logic out using services and directives.</li>
</ul>

<i class="attention"></i>ng-switch

The <code>ng-switch</code> directive is used if you want to add or remove HTML elements from the DOM based on data in the model:

[html]
<div ng-controller="MyController" >
    <div ng-switch on="myData.switch">
        <div ng-switch-when="1">Shown when switch is 1</div>
        <div ng-switch-when="2">Shown when switch is 2</div>
        <div ng-switch-default>Shown when switch is anything else than 1 and 2</div>
    </div>
</div>
[/html]

[javascript]
angular.module("myapp", [])
    .controller("MyController", function($scope) {
      $scope.myData = {};
      $scope.myData.switch = 3;
    });
[/javascript]

In the example above the controller function sets myData.switch to 3. That means that the nested div with the <code>ng-switch-default</code> attribute will be shown. The two other nested div elements will be removed from the DOM completely.

<i class="attention"></i>ng-if

The <code>ng-if</code> directive can include/remove HTML elements from the DOM, just like the ng-switch directive, but it has a simpler syntax. Here is an example:

[html]
<div ng-if="2 + 2 === 5">
	Won't see this DOM node, not even in the source code
</div>
<div ng-if="2 + 2 === 4">
	Hi, I do exist
</div>
[/html]

The main difference between <code>ng-if</code> and <code>ng-show/ng-hide</code> is that <code>ng-if</code> removes the HTML element completely from the DOM, whereas the ng-show + ng-hide just applies the CSS property display: none; to the elements.

<i class="attention"></i>ng-include

The <code>ng-include</code> directive can be used to include HTML fragments from other files into the view's HTML template:

[html]
<div ng-controller="MyController" >
    <div ng-include="myData.showIt &&
                        'fragment-1.html' ||
                        'fragment-2.html'"></div>
</div>
[/html]

[javascript]
 angular.module("myapp", [])
    .controller("MyController", function($scope) {
        $scope.myData = {};
        $scope.myData.showIt = true;
    });
[/javascript]

<i class="attention"></i>ng-repeat

The <code>ng-repeat</code> directive is used to iterate over a collection of items and generate HTML from it:

[html]
<!-- loop through []-->
<ol>
   <li ng-repeat="theItem in myData.items">{{theItem.text}}</li>
</ol>

<!-- loop through function wich returns []-->
<ol>
   <li ng-repeat="theItem in myData.getItems()">{{theItem.text}}</li>
</ol>

<!-- loop through {}-->
<ol>
   <li ng-repeat="theItem in myData.getItems()">{{name}} = {{value}}</li>
</ol>
[/html]

[javascript]
angular.module("myapp", [])
    .controller("MyController", function($scope) {
        $scope.myData = {};
        $scope.myData.items = [ {text : "one"}, {text : "two"}, {text : "three"} ];

        $scope.myData.getItems = function() { return this.items; };

        $scope.myData.myObject = { var1 : "val1", var2 : "val3", var3 : "val3"};
    });
[/javascript]

The ng-repeat directive defines a set of <code>special variables</code> which you can use when iterating the collection. These variables are:
<ul>
  <li><code>$index</code></li>
  <li><code>$first</code></li>
  <li><code>$middle</code></li>
  <li><code>$last</code></li>
  <li><code>$even</code></li>
  <li><code>$odd</code></li>
</ul>

<i class="attention"></i>ng-bind and {{}}

The <code>ng-bind</code> directive is an alternative to the interpolation directive. You use it by inserting an ng-bind attribute into the HTML element you want AngularJS to insert data into. Here is an example:

[html]
<div>
  Hello, {{user.name}}
</div>

<div>
  Hello, <span ng-bind="user.name"></span>
</div>
[/html]

Performance:
The {{}} is much slower.
This ng-bind is a directive and will place a watcher on the passed variable. So the ng-bind will only apply, when the passed value does actually change.
The brackets on the other hand will be dirty checked and refreshed in every $digest, even if it's not necessary.

<i class="attention"></i>ng-cloak

An alternative to using to using <code>ng-bind</code> to prevent a flash of unrendered content is to use <code>ng-cloak</code> on the element containing <code>{{ }}</code>:

[html]
<div ng-init="greeting = 'Hello World'">
<p ng-cloak>{{ greeting }}</p>
</div>
[/html]

<i class="attention"></i>ng-bind-template

Similar to the <code>ng-bind</code> directive, we can use the <code>ng-bind-template</code> directive if we want to bind multiple expressions to the view:

[html]
<div
	ng-bind-template="{{ message }} {{ name }}">
</div>
[/html]

<i class="attention"></i>ng-mode

The <code>ng-model</code> directive binds an <code>input, select, textarea</code>, or custom form control to a property on the surrounding scope. It handles and provides validation, sets related CSS classes on the element (<code>ng-valid, ng-invalid</code>, etc.), and registers the control with its parent form

[html]
<input type="text"
	ng-model="modelName.someProperty" />
[/html]

<i class="attention"></i>ng-show/ng-hide

The <code>.ng-hide</code> CSS class is predefined in AngularJS and sets the display style to none (using an <code>!important</code> flag):

[html]
<div ng-show="2 + 2 == 5">
	2 + 2 isn't 5, don't show
</div>
<div ng-show="2 + 2 == 4">
	2 + 2 is 4, do show
</div>
<div ng-hide="2 + 2 == 5">
	2 + 2 isn't 5, don't hide
</div>
<div ng-hide="2 + 2 == 4">
	2 + 2 isn't 5, do hide
</div>
[/html]

<i class="attention"></i>ng-show/ng-hide

This directive evaluates the given expression when the input changes. As we’re dealing with input, we must use this directive in conjunction with ngModel:

[html]
<div ng-controller="EquationController">
	<input type="text"
		ng-model="equation.x"
		ng-change="change()" />
	<code>{{ equation.output }}</code>
</div>
[/html]

[javascript]
angular.module('myApp', [])
.controller('EquationController', function($scope) {
	$scope.equation = {};
	$scope.change = function() {
		$scope.equation.output
			= Number($scope.equation.x) + 2;
	};
});
[/javascript]
<hr>

<h5>AngularJS Form Handling</h5>

<i class="attention"></i>Binding checkboxes

If you bind a checkbox <code>input type="checkbox"</code> to a model property, the model property will be set to true if the checkbox is checked, and false if not.

If you need other values instead of true and false inserted into your model, you can use the <code>ng-true-value</code> and <code>ng-false-value</code> directives.

<p data-height="268" data-theme-id="0" data-slug-hash="eahwv" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/eahwv/'>AngularJS, binding checkboks</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

<i class="attention"></i>Binding radio buttons

<p data-height="200" data-theme-id="0" data-slug-hash="LdnBi" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/LdnBi/'>AngularJS, binding radio butons</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

<i class="attention"></i>Binding select box

<p data-height="408" data-theme-id="0" data-slug-hash="wodhv" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/wodhv/'>AngularJS, binding select boxes</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

<i class="attention"></i>Form validation

AngularJS validates form fields <code>before</code> copying their value into the <code>$scope</code> properties to which the form fields are bound. If a form field is invalid, its value is <code>not copied</code> into the <code>$scope</code> property it is bound to.

<i class="attention"></i>ng-minlength + ng-maxlength

The <code>ng-minlength</code> and <code>ng-maxlength</code> form validation directives can be used to validate the length of data entered in a form field.

<i class="attention"></i>ng-pattern

The <code>ng-pattern</code> directive can be used to validate the value of an input field against a regular expression.

<i class="attention"></i>ng-required

The ng-required directive checks if the value of the form field is empty or not. Actually, you just use the required attribute of HTML5, and AngularJS detects it automatically.

<p data-height="251" data-theme-id="0" data-slug-hash="xjhBz" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/xjhBz/'>AngularJS, form-directivies</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

<i class="attention"></i>Checking Field Validation State

All forms has properties:
<ul>
	<li><code>$pristine</code> - True if the form has not been changed (no form fields has changed), false if some fields have been changed.</li>
	<li><code>$dirty</code> - The reverse of $pristine - false if the form has not been changed - true if it has.</li>
	<li><code>$valid</code> - True if the form field. False if not.</li>
	<li><code>$invalid</code> - The reverse of the $valid.</li>
</ul>

<p data-height="268" data-theme-id="0" data-slug-hash="Aximv" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/Aximv/'>Aximv</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

<i class="attention"></i>Submitting Forms

You can submit a form in two ways:

<ul>
	<li>Using a button element with an <code>ng-click</code> attribute.</li>
	<li>Using an <code>ng-submit</code> attribute (directive) on the form element.</li>
</ul>

Example ng-click:
[javascript]
<form>
    <input type="text" id="name" ng-model="myForm.name" ng-minlength="5" ng-maxlength="12"> Name <br/>

    <select ng-model="myForm.car">
      <option value="nissan">Nissan</option>
      <option value="toyota">Toyota</option>
      <option value="fiat">Fiat</option>
    </select>

    //using ng-click
    <button ng-click="myForm.submitTheForm()">Submit Form</button>
  </form>
[/javascript]

Example ng-submit:
[javascript]
  <form ng-submit="myForm.submitTheForm()">
    <input type="text" id="name" ng-model="myForm.name" ng-minlength="5" ng-maxlength="12"> Name <br/>

    <select ng-model="myForm.car">
      <option value="nissan">Nissan</option>
      <option value="toyota">Toyota</option>
      <option value="fiat">Fiat</option>
    </select>

    <input type="submit" value="Submit Form">

  </form>
[/javascript]

As you can see, the two mechanisms are very similar. They both call a submit function on the <code>$scope</code> object.
<hr>


<h4>2.2 Changing the DOM in response to user actions. Create reusable element</h4>

<h5>Problem</h5>
You wish to change the CSS of an HTML element on a mouse click and encapsulate this behavior in a reusable component.

<h5>Solution</h5>
Implement a directive my-widget that contains an example paragraph of text we want to style.

[html]
<body ng-app="MyApp">
  <my-widget>
    <p>Hello World</p>
  </my-widget>
</body>
[/html]

We use a link function in our directive implementation to change the CSS of the paragraph.

[javascript]
var app = angular.module("MyApp", []);

app.directive("myWidget", function() {
  var linkFunction = function(scope, element, attributes) {
    var paragraph = element.children()[0];
    $(paragraph).on("click", function() {
      $(this).css({ "background-color": "red" });
    });
  };

  return {
    restrict: "E",
    link: linkFunction
  };
});
[/javascript]

<h5>Discussion</h5>

In the HTML document we use the new directive as an HTML element my-widget, which can be found in the Javascript code as myWidget again. The directive function returns a restriction and a link function.

The restriction means that this directive can only be used as an HTML element and not for example an HTML attribute. If you want to use it as an HTML attribute, change the restrict to return A instead. The usage would then have to be adapted to:

[html]
<div my-widget>
  <p>Hello World</p>
</div>
[/html]

Whether you use the attribute or element mechanism will depend on your use case. The attribute mechanism would be used whenever you want to “configure” some element or enhance it with more behavior. Other available options are using the directive as a class attribute or a comment.

Directives can be <b><u>element, attribute, class or special comment</u></b>:

[javascript]
<span my-Widget="exp"></span>
<span class="my-Widget: exp;"></span>
<my-Widget></my-Widget>
<!-- directive: my-Widget exp -->
[/javascript]
<hr>

<h4>2.3 Directive-to-Directive Communication</h4>

<h5>Problem</h5>
You wish a directive to communicate with another directive and <b><u>augment each other’s</u></b> behavior using a well-defined interface (API).

<h5>Solution</h5>
We implement a directive basket with a controller function and two other directive orange and apple which “require” this controller. Our example starts with an apple and orange directive used as attributes.

[html]
<body ng-app="MyApp">
  <basket apple orange>Roll over me and check the console!</basket>
</body>
[/html]

The basket directive manages an array to which can add apples and oranges!

[javascript]
var app = angular.module("MyApp", []);

app.directive("basket", function() {
  return {
    restrict: "E",
    controller: function($scope, $element, $attrs) {
      $scope.content = [];

      this.addApple = function() {
        $scope.content.push("apple");
      };

      this.addOrange = function() {
        $scope.content.push("orange");
      };
    },
    link: function(scope, element) {
      element.bind("mouseenter", function() {
        console.log(scope.content);
      });
    }
  };
});
[/javascript]

And finally the apple and orange directives, which add themselves to the basket using the basket’s controller.

[javascript]
app.directive("apple", function() {
  return {
    require: "basket",
    link: function(scope, element, attrs, basketCtrl) {
      basketCtrl.addApple();
    }
  };
});

app.directive("orange", function() {
  return {
    require: "basket",
    link: function(scope, element, attrs, basketCtrl) {
      basketCtrl.addOrange();
    }
  };
});
[/javascript]

<h5>Discussion</h5>
Basket is the example directive that demonstrates an API using the controller function, whereas the apple and orange directives augment the basket directive. They both define a dependency to the basket controller with the <b><u>require attribute</u></b>. The link function then gets basketCtrl injected.

Note how the basket directive is defined as an HTML element and the apple and orange directives are defined as HTML attributes (the <b><u>default for directives</u></b>). This demonstrates the typical use case of a reusable component augmented by other directives.
<hr>

<h4>2.4 Passing Configuration Params Using HTML Attributes</h4>

<h5>Problem</h5>
You wish to pass a configuration param to change the rendered output.

<h5>Solution</h5>
Use the attribute-based directive and pass an attribute value for the configuration. The attribute is passed as a parameter to the link function.

[html]
<body ng-app="MyApp">
  <div my-widget="Hello World"></div>
</body>
[/html]

Configurating directive:

[javascript]
var app = angular.module("MyApp", []);

app.directive("myWidget", function() {
  var linkFunction = function(scope, element, attributes) {
    scope.text = attributes["myWidget"];
  };

  return {
    restrict: "A",
    template: "<p></p>",
    link: linkFunction
  };
});
[/javascript]

This renders a paragraph with the <b><u>text passed as the param</u></b>.

<h5>Discussion</h5>
The link function has access to the element and its attributes.

The scope context is important though. The text model we changed might already be defined in the parent scope and used in another part of your app. In order <b><u>to isolate the context</u></b> and thereby use it only locally inside your directive, we have to return an additional scope attribute:

[javascript]
return {
  restrict: "A",
  template: "<p></p>",
  link: linkFunction,
  scope: {}
};
[/javascript]

In Angular this is <b><u>called an isolate scope</u></b>. It does not prototypically inherit from the parent scope and is especially useful when creating reusable components.

Let’s look into another way of passing <b><u>params</u></b> to the directive. This time we will define an HTML element my-widget2:

[javascript]
<my-widget2 text="Hello World"></my-widget2>

app.directive("myWidget2", function() {
  return {
    restrict: "E",
    template: "<p></p>",
    scope: {
      text: "@text"
    }
  };
});
[/javascript]

The scope definition using <b><u>@text</u></b> is binding the text model to the directive’s attribute. Note that <b><u>any changes to the parent scope text will change the local scope text</u></b>, but not the other way around.

If you want instead to have a <b><u>bi-directional binding between the parent scope and the local scope</u></b>, you should use the = equality character:

[javascript]
scope: {
  text: "=text"
}
[/javascript]

Another option would be to pass an expression as a function to the directive using the <b><u>&fn</u></b> character:

[html]
<my-widget-expr fn="count = count + 1"></my-widget-expr>
[/html]

We pass the attribute fn to the directive and since the local scope defines fn accordingly we can call the function in the linkFunction and pass in the expression arguments as a hash.

[javascript]
app.directive("myWidgetExpr", function() {
  var linkFunction = function(scope, element, attributes) {
    scope.text = scope.fn({ count: 5 });
  };

  return {
    restrict: "E",
    template: "<p></p>",
    link: linkFunction,
    scope: {
      fn: "&fn"
    }
  };
});
[/javascript]
<hr>

<h4>2.5 Repeatedly Rendering Directive's DOM Node Children</h4>

<h5>Problem</h5>
You wish to render an HTML snippet repeatedly using the directive’s child nodes as the “stamp” content.

<h5>Solution</h5>
Implement a compile function in your directive.

[html]
<repeat-ntimes repeat="10">
  <h1>Header 1</h1>
  <p>This is the paragraph.</p>
</repeat-n-times>
[/html]

Configure directive, this will render the header and paragraph 10 times:

[javascript]
var app = angular.module("MyApp", []);

app.directive("repeatNtimes", function() {
  return {
    restrict: "E",
    compile: function(tElement, attrs) {
      var content = tElement.children();
      for (var i=1; i<attrs.repeat; i++) {
        tElement.append(content.clone());
      }
    }
  };
});
[/javascript]

<h5>Discussion</h5>

The directive repeats the child nodes as often as configured in the repeat attribute. It works similarly to the <a href="https://docs.angularjs.org/api/ng/directive/ngRepeat">ng-repeat directive</a>. The implementation uses Angular’s element methods to append the child nodes in a for loop.

Note that the compile method only has access to the templates element tElement and template attributes. It <b><u>has no access to the scope</u></b> and you therefore can’t use $watch to add behavior either. This is in comparison to the link function that has access to the DOM “instance” (after the compile phase) and has access to the scope to add behavior.

Use the <b><u>compile function</u></b> for template DOM manipulation only. Use the <b><u>link function</u></b> whenever you want to add behavior.

Note that you can use both compile and link function combined. In this case the compile function must return the link function. As an example you want to react to a click on the header:

[javascript]
compile: function(tElement, attrs) {
  var content = tElement.children();
  for (var i=1; i<attrs.repeat; i++) {
    tElement.append(content.clone());
  }

  return function (scope, element, attrs) {
    element.on("click", "h1", function() {
      $(this).css({ "background-color": "red" });
    });
  };
}
[/javascript]

Clicking the header will change the background color to red.
<hr>

<blockquote>Filters</blockquote>

Angular Filters are typically used to format expressions in bindings in your template. They transform the input data to a new formatted data type.

<h4>3.1 Formatting a String with currency Filter</h4>

<h5>Problem</h5>
You wish to format the amount of currency with a localized currency label.

<h5>Solution</h5>
Use the built-in <b><u>currency filter</u></b> and make sure you load the corresponding locale file for the user’s language.

[html]
<html>
  <head>
    <meta charset='utf-8'>
    <script src="js/angular.js"></script>
    <script src="js/angular-locale_de.js"></script>
  </head>
  <body ng-app>
    <input type="text" ng-model="amount" placeholder="Enter amount"/>
    <p>Default Currency: {{ amount | currency }}</p>
    <p>Custom Currency: {{ amount | currency: "Euro" }}</p>
  </body>
</html>
[/html]

Enter an amount and it will be displayed using Angular’s default locale.
You can find the complete example on <a href="https://github.com/fdietz/recipes-with-angular-js-examples/tree/master/chapter4/recipe1">github</a>.

<h5>Discussion</h5>
In our example we explicitly load the German locale settings and therefore the default formatting will be in German. The English locale is shipped by default, so there’s no need to include the angular-locale_en.js file. If you remove the script tag, you will see the formatting change to English instead. This means in order for a localized application to work correctly you need to load the corresponding locale file. All available locale files can be seen on <a href="https://github.com/fdietz/recipes-with-angular-js-examples/tree/master/chapter4/recipe1">github</a>.
<hr>

<h4>3.2 Chaining Filters together</h4>

<h5>Problem</h5>
You wish to combine several filters to form a single result.

<h5>Solution</h5>
Filters can be chained using the UNIX-like pipe syntax.

[html]
<body ng-app="MyApp">
  <ul ng-init="names = ['Peter', 'Anton', 'John']">
    <li ng-repeat="name in names | exclude:'Peter' | sortAscending ">
      <span>{{name}}</span>
    </li>
  </ul>
</body>
[/html]

Configuration filters:

[javascript]
var myApp = angular.module('MyApp', []);

myApp.filter('exclude', function() {
    return function(input, option) {
      var out = [];
      for (var i=0; i<input.length; i++) {
        if (input[i] !== option) {
          out.push(input[i]);
        }
      }
      
      return out;
    };
  });
  
  myApp.filter('reverse', function() {
    return function(input) {
      return input.reverse();
    };
  });
[/javascript]

Discussion
Angular’s filter function expects a filter name and a function as params. The function <b><u>must return filter function</u></b> where you implement the business logic.
<hr>

<h4>3.3 Passing Configuration Params to Filters</h4>

<h5>Problem</h5>
You wish to make your filter customizable by introducing config params.

<h5>Solution</h5>
Angular filters can be passed a hash of params which can be directly accessed in the filter function.

[html]
<body ng-app="MyApp">
  <input type="text" ng-model="text" placeholder="Enter text"/>
  <p>Input: {{ text }}</p>
  <p>Filtered input: {{ text | reverse: { suffix: "!"} }}</p>
</body
[/html]

Create custom filter:

[javascript]
var app = angular.module("MyApp", []);

app.filter("reverse", function() {
  return function(input, options) {
    input = input || "";
    var result = "";
    var suffix = options["suffix"] || "";

    for (var i=0; i<input.length; i++) {
      result = input.charAt(i) + result;
    }

    if (input.length > 0) result += suffix;

    return result;
  };
});
[/javascript]

<h5>Discussion</h5>
The suffix <b><u>! is passed as an option</u></b> to the filter function and is appended to the output. Note that we check if an actual input exists since we don’t want to render the suffix without any input.
<hr>

<blockquote>Consuming Externals Services</blockquote>

Angular has built-in support for communication with remote HTTP servers. The <a href="https://docs.angularjs.org/api/ng/service/$http">$http</a> service handles low-level AJAX requests via the browser’s <b><u>XMLHttpRequest</u></b> object or via <b><u>JSONP</u></b>. 
The <a href="https://docs.angularjs.org/api/ng/service/$http">$resource</a> service lets you interact with <b><u>RESTful</u></b> data sources and provides high-level behaviors which naturally map to RESTful resources.

<h5>4.1 Requesting JSON data with AJAX</h5>

<h4>Problem</h4>
You wish to fetch JSON data via AJAX request and render it.

<h4>Solution</h4>
Implement a controller using the $http service to fetch the data and store it in the scope.

[html]
<body ng-app="MyApp">
  <div ng-controller="PostsCtrl">
    <ul ng-repeat="post in posts">
      <li>{{post.title}}</li>
    </ul>
  </div>
</body>
[/html]

Dependendency injection $http in controller:

[javascript]
var app = angular.module("MyApp", []);

app.controller("PostsCtrl", function($scope, $http) {
  $http.get('data/posts.json').
    success(function(data, status, headers, config) {
      $scope.posts = data;
    }).
    error(function(data, status, headers, config) {
      // log error
    });
});
[/javascript]

<h4>Discussion</h4>

The controller defines a dependency to the $scope and the $http module. An HTTP GET request to the data/posts.json endpoint is carried out with the get method. It returns a <b><u>$promise</u></b> object with a success and an error method. Once successful, the JSON data is assigned to $scope.posts to make it available in the template.

The $http service supports the HTTP verbs get, head, post, put, delete and jsonp.

The $http service automatically adds certain HTTP headers like for example X-Requested-With: XMLHttpRequest. But you can also <b><u>set custom HTTP headers</u></b> by yourself using the $http.defaults function:

[javascript]
$http.defaults.headers.common["X-Custom-Header"] = "Angular.js"
[/javascript]
<hr>

<h4>4.2 Consuming JSONP APIs</h4>

<h5>Problem</h5>
You wish to call a JSONP API.

<h5>Solution</h5>
Use the $http.json . As an example we will take the wordpress API here.

[html]
<body ng-app="MyApp">
  <div ng-controller="MyCtrl">
    <ul>
      <li ng-repeat="post in posts">
        {{post.ID}}<br>
        <!--{{post. .... ....}}-->
      </li>
    </ul>
  </div>
</body>
[/html]

Configuration $http.json:

[javascript]
var app = angular.module("MyApp", []);

function MyCtrl($scope) {
  ar url = "http://public-api.wordpress.com/rest/v1/sites/wtmpeachtest.wordpress.com/posts?callback=JSON_CALLBACK";

    $http.jsonp(url)
      .success(function(data) {
        $scope.posts = data.posts;
      });
}
[/javascript]

.... more about JSON and ANGULARjs ....

<h4>4.3 Deferred and Promise</h4>

<h5>Problem</h5>
You wish to synchronize multiple asynchronous functions and <b><u>avoid Javascript callback hell</u></b>.

<h5>Solution</h5>
As an example, we want to call three services in sequence and combine the result of them. Let us start with a <b><u>nested approach</u></b>:

[javascript]
tmp = [];

$http.get("/app/data/first.json").success(function(data) {
  tmp.push(data);
  $http.get("/app/data/second.json").success(function(data) {
    tmp.push(data);
    $http.get("/app/data/third.json").success(function(data) {
      tmp.push(data);
      $scope.combinedNestedResult = tmp.join(", ");
    });
  });
});
[/javascript]

We call the get function three times to retrieve three JSON documents each with an array of strings. We haven’t even started adding error handling but already using nested callbacks the code becomes messy and can be simplified using the <b><u>$q service</u></b>:

[javascript]
var first  = $http.get("/app/data/first.json"),
    second = $http.get("/app/data/second.json"),
    third  = $http.get("/app/data/third.json");

$q.all([first, second, third]).then(function(result) {
  var tmp = [];
  angular.forEach(result, function(response) {
    tmp.push(response.data);
  });
  return tmp;
}).then(function(tmpResult) {
  $scope.combinedResult = tmpResult.join(", ");
});
[/javascript]

<h5>Discussion</h5>
The <b><u>all</u></b> function combines multiple promises into a single promise and solves our problem quite elegantly.

Let’s have a closer look at the <b><u>then</u></b> method. It is rather contrived but should give you an idea of how to use then to sequentially call functions and pass data along. Since the <b><u>all function</u></b> returns a promise again we can call then on it. By returning the tmp variable it will be passed along to the then function as tmpResult argument.

Before finishing this recipe let us quickly discuss an example where we have to create our own deferred object:

[javascript]
function deferredTimer(success) {
  var deferred = $q.defer();

  $timeout(function() {
    if (success) {
      deferred.resolve({ message: "This is great!" });
    } else {
      deferred.reject({ message: "Really bad" });
    }
  }, 1000);

  return deferred.promise;
}
[/javascript]

Using the <b><u>defer method</u></b> we create a deferred instance. As an example of an asynchronous operation we will use the <b><u>$timeout</u></b> service which will either resolve or reject our operation depending on the boolean success parameter. The function will immediately return the <b><u>promise</u></b> and therefore not render any result in our HTML template. After one second, the timer will execute and return our success or failure response.

This deferredTimer can be triggered in our HTML template by wrapping it into a function defined on the scope:

This deferredTimer can be triggered in our HTML template by wrapping it into a function defined on the scope:

[javascript]
$scope.startDeferredTimer = function(success) {
  deferredTimer(success).then(
    function(data) {
      $scope.deferredTimerResult = "Successfully finished: " +
        data.message;
    },
    function(data) {
      $scope.deferredTimerResult = "Failed: " + data.message;
    }
  );
};
[/javascript]

Our <b><u>startDeferredTimer</u></b> function will get a success parameter which it passes along to the <b><u>deferredTimer</u></b>. The then function expects a success and an error callback as arguments which we use to set a scope variable <b><u>deferredTimerResult</u></b> to show our result.
<hr>

<blockquote>URLs, Routing and Partials</blockquote>

The <a href="https://docs.angularjs.org/api/ng/service/$location">$location</a> service in Angular.js parses the current browser URL and makes it available to your application. Changes in either the browser address bar or the $location service will be kept in sync.

<h5>Using UI-Router</h5>

<a class="link-icon" href="http://plnkr.co/edit/IzimSVsstarlFviAm7S7?p=preview"></a>Full example here

<i class="attention"></i>What is AngularUI Router?

<code>UI-Router</code> provides a different approach than <code>ngRoute</code> in that it changes your application views based on <code>state</code> of the application and not just the route URL.

<i class="attention"></i>Setup

Notice that we also load up ui-router in addition to loading Angular. UI Router is separate from the Angular core, just like ngRoute is separate.

When creating a link with UI-Router, you will use <code>ui-sref</code>. The href will be generated from this and you want this to point to a certain state of your application. These are created in your app.js.

We also use <code>ui-view></code> instead of ngRoute’s <code>ng-view></code>.

[javascript]
//app.js
var routerApp = angular.module('routerApp', ['ui.router']);

routerApp.config(function($stateProvider, $urlRouterProvider) {
    
    $urlRouterProvider.otherwise('/home');
    
    $stateProvider
        
        // HOME STATES AND NESTED VIEWS ========================================
        .state('home', {
            url: '/home',
            templateUrl: 'partial-home.html'
        })
        
        // ABOUT PAGE AND MULTIPLE NAMED VIEWS =================================
        .state('about', {
            // we'll get to this in a bit       
        });
        
});
[/javascript]
<hr>

<i class="attention"></i>Nested View

When linking to a nested view, we are going to use dot denotation: <code>ui-sref=".list"</code> and <code>ui-sref=".paragraph"</code>. These will be defined in our Angular file and once we set it up there, we will inject into our new <code>ui-view></code>.

[html]
<div class="jumbotron text-center">
    <h1>The Homey Page</h1>
    <p>This page demonstrates <span class="text-danger">nested</span> views.</p>  

    <a ui-sref=".list" class="btn btn-primary">List</a>
    <a ui-sref=".paragraph" class="btn btn-danger">Paragraph</a>
</div>

<div ui-view></div>
[/html]

In our app.js file, let’s create those nested states:

[javascript]
// app.js
...

$stateProvider

	// HOME STATES AND NESTED VIEWS ========================================
    .state('home', {
        url: '/home',
        templateUrl: 'partial-home.html'
    })

	// nested list with custom controller
	.state('home.list', {
        url: '/list',
        templateUrl: 'partial-home-list.html',
        controller: function($scope) {
            $scope.dogs = ['Bernese', 'Husky', 'Goldendoodle'];
        }
    })

	// nested list with just some random string data
    .state('home.paragraph', {
        url: '/paragraph',
        template: 'I could sure use a drink right now.'
    })

...
[/javascript]
<hr>

<i class="attention"></i>Multiple Views 

For our About page, let’s make two columns and have each have its own data. We will handle the view first and then look at how we can do this using <code>UI-Router</code>.

[html]
<!-- partial-about.html -->

<div class="jumbotron text-center">
    <h1>The About Page</h1>
    <p>This page demonstrates <span class="text-danger">multiple</span> and <span class="text-danger">named</span> views.</p>
</div>

<div class="row">

    <!-- COLUMN ONE NAMED VIEW -->
    <div class="col-sm-6">
        <div ui-view="columnOne"></div>
    </div>
    
    <!-- COLUMN TWO NAMED VIEW -->
    <div class="col-sm-6">
        <div ui-view="columnTwo"></div>
    </div>

</div>
[/html]

Now that our view is all created, let’s look at how we can apply template files and controllers to each view. We’ll go back to our app.js.

[javascript]
// app.js

...

    .state('about', {
        url: '/about',
        views: {

            // the main template will be placed here (relatively named)
            '': { templateUrl: 'partial-about.html' },

            // the child views will be defined here (absolutely named)
            'columnOne@about': { template: 'Look I am a column!' },

            // for column two, we'll define a separate controller 
            'columnTwo@about': { 
                templateUrl: 'table-data.html',
                controller: 'scotchController'
            }
        }
        
    });

}); // closes $routerApp.config()
[/javascript]

<hr>

<i class="attention"></i>Relative vs Absolute Naming

<code>UI-Router</code> assigns every view to an absolute name. The structure for this is <code>viewName@stateName</code>. Since our main ui-view inside our about state, we gave it a blank name. The other two views because <code>columnOne@about</code> and <code>columnTwo@about</code>.

<a class="link-icon" href="http://plnkr.co/edit/IzimSVsstarlFviAm7S7?p=preview"></a>Full example here

<h5>How to animate ng-view</h5>

<a class="link-icon" href="http://plnkr.co/edit/NYv42U?p=preview"></a>Full example here

We will use:
<ul>
	<li>ngRoute - for page routing</li>
	<li>ngAnimate - to create page animations</li>
	<li>CSS Animation - will applied to the pages</li>
</ul>

<i class="attention"></i> How does it work?

Let’s take a look at how ngAnimate works. <code>ngAnimate</code> will add and remove CSS classes to different Angular directives based on if they re entering or leaving the view. For example, when we load up a site, whatever is populated in ng-view gets a <code>.ng-enter</code> class.

All we have to do is apply a CSS animation to that <code>.ng-enter</code> class and that will be applied upon entry.

<code>ngAnimate</code> Works On: ngRepeat, ngInclude, ngIf, ngSwitch, ngShow, ngHide, ngView, and ngClass.

<i class="attention"></i>Setup Application

Let’s start up an index.html file. We’ll load up AngularJS, <code>ngRoute</code>, and <code>ngAnimate</code>. Oh and don’t forget Bootstrap for stylings:

[html]
<!-- index.html -->
<!DOCTYPE html>
<html>
<head>

	<!-- CSS -->
	<!-- load bootstrap (bootswatch version) -->
	<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootswatch/3.1.1/readable/bootstrap.min.css">
	<link rel="stylesheet" href="style.css">

	<!-- JS -->
	<!-- load angular, ngRoute, ngAnimate -->
	<script src="http://code.angularjs.org/1.2.13/angular.js"></script>
	<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.2.13/angular-route.js"></script>
	<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.2.13/angular-animate.js"></script>
	<script src="app.js"></script>

</head>

<!-- apply our angular app -->
<body ng-app="animateApp">

	<!-- inject our views using ng-view -->
	<!-- each angular controller applies a different class here -->
	<div class="page {{ pageClass }}" ng-view></div>

</body>
</html>
[/html]

Now we will create our Angular application with routing so that we can change pages without a page refresh:

[javascript]
// app.js

// define our application and pull in ngRoute and ngAnimate
var animateApp = angular.module('animateApp', ['ngRoute', 'ngAnimate']);

// ROUTING ===============================================
// set our routing for this application
// each route will pull in a different controller
animateApp.config(function($routeProvider) {

    $routeProvider

    	// home page
    	.when('/', {
    		templateUrl: 'page-home.html',
            controller: 'mainController'
    	})

    	// about page
    	.when('/about', {
    		templateUrl: 'page-about.html',
            controller: 'aboutController'
    	})

    	// contact page
    	.when('/contact', {
    		templateUrl: 'page-contact.html',
            controller: 'contactController'
    	});

});


// CONTROLLERS ============================================
// home page controller
animateApp.controller('mainController', function($scope) {
    $scope.pageClass = 'page-home';
});

// about page controller
animateApp.controller('aboutController', function($scope) {
    $scope.pageClass = 'page-about';
});

// contact page controller
animateApp.controller('contactController', function($scope) {
    $scope.pageClass = 'page-contact';
});
[/javascript]

<i class="attention"></i>Animating App

All of the animations we will create will be with CSS. This is great because all we had to do was add <code>ngAnimate</code> and now, without any changes to our Angular code, we can apply CSS animations.

Two classes that ngAnimate adds to our ng-view are <code>.ng-enter</code> and <code>.ng-leave</code>.

<i class="attention"></i>Base Style

[css]
/* style.css */
/* make our pages be full width and full height */
/* positioned absolutely so that the pages can overlap each other as they enter and leave */
.page        {
	bottom:0;
	padding-top:200px;
	position:absolute;
	text-align:center;
	top:0;
	width:100%;
}

.page h1 	{ font-size:60px; }
.page a     { margin-top:50px; }

/* PAGES (specific colors for each page)
============================================================================= */
.page-home 		{ background:#00D0BC; color:#00907c; }
.page-about 	{ background:#E59400; color:#a55400; }
.page-contact 	{ background:#ffa6bb; color:#9e0000; }
[/css]

With that, we have base styles for all three pages. As we click through our app, we can see those applied with the colors and spacing.

<i class="attention"></i>CSS Animations

Let’s make 6 different animations. Each page will have their very own <code>ng-enter</code> and <code>ng-leave</code> animation.

[css]
/* style.css */
...

/* ANIMATIONS
============================================================================= */

/* leaving animations ----------------------------------------- */
/* rotate and fall */
@keyframes rotateFall {
	0% 		{ transform: rotateZ(0deg); }
	20% 	{ transform: rotateZ(10deg); animation-timing-function: ease-out; }
	40% 	{ transform: rotateZ(17deg); }
	60% 	{ transform: rotateZ(16deg); }
	100% 	{ transform: translateY(100%) rotateZ(17deg); }
}

/* slide in from the bottom */
@keyframes slideOutLeft {
	to 		{ transform: translateX(-100%); }
}

/* rotate out newspaper */
@keyframes rotateOutNewspaper {
	to 		{ transform: translateZ(-3000px) rotateZ(360deg); opacity: 0; }
}

/* entering animations --------------------------------------- */
/* scale up */
@keyframes scaleUp {
	from 	{ opacity: 0.3; -webkit-transform: scale(0.8); }
}

/* slide in from the right */
@keyframes slideInRight {
	from 	{ transform:translateX(100%); }
	to 		{ transform: translateX(0); }
}

/* slide in from the bottom */
@keyframes slideInUp {
	from 	{ transform:translateY(100%); }
	to 		{ transform: translateY(0); }
}
[/css]
<hr>

<i class="attention"></i>Page Specific Animations

We created separate Angular controllers for each of the pages. Inside of these controllers we added a <code>pageClass</code> and applied that to our <code>ng-view></code>. We’ll use these classes to call out a page specifically:

[css]
/* style.css */
...

	.ng-enter 		{ z-index: 8888; }
	.ng-leave 		{ z-index: 9999; }

	/* page specific animations ------------------------ */

	/* home -------------------------- */
	.page-home.ng-enter 		{ animation: scaleUp 0.5s both ease-in; }
	.page-home.ng-leave         { transform-origin: 0% 0%; animation: rotateFall 1s both ease-in; }

	/* about ------------------------ */
	.page-about.ng-enter 		{ animation:slideInRight 0.5s both ease-in; }
	.page-about.ng-leave        { animation:slideOutLeft 0.5s both ease-in; }

	/* contact ---------------------- */
	.page-contact.ng-leave      { transform-origin: 50% 50%; animation: rotateOutNewspaper .5s both ease-in; }
	.page-contact.ng-enter 		{ animation:slideInUp 0.5s both ease-in; }

...
[/css]

<a class="link-icon" href="http://plnkr.co/edit/NYv42U?p=preview"></a>Full example here
































Save my day:
<a href="http://fdietz.github.io/recipes-with-angular-js" title="recipes-with-angular-js">recipes with angular.js</a>
<a href="http://tutorials.jenkov.com/angularjs/views-and-directives.html" title="angular js tutorial">angular js tutorial</a>
<a href="http://scotch.io/tutorials/javascript/">scotch.io</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>377</wp:post_id>
		<wp:post_date>2014-06-17 12:52:53</wp:post_date>
		<wp:post_date_gmt>2014-06-17 10:52:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>recipe-with-angular-js</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="angular"><![CDATA[Angular]]></category>
		<category domain="category" nicename="javascript-2"><![CDATA[Javascript]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3328645234]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>115</wp:comment_id>
			<wp:comment_author><![CDATA[http://beonelearning.com]]></wp:comment_author>
			<wp:comment_author_email>Geddie279963@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.beonelearning.com</wp:comment_author_url>
			<wp:comment_author_IP>184.95.52.218</wp:comment_author_IP>
			<wp:comment_date>2014-08-24 04:31:07</wp:comment_date>
			<wp:comment_date_gmt>2014-08-24 02:31:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I wish I'd more time and energy to read each of this. Sounds really interesting.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[true]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408847467.28808689117431640625;s:7:"message";s:35:"Akismet caught this comment as spam";s:5:"event";s:10:"check-spam";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408892412.0458290576934814453125;s:7:"message";s:41:"qetr1ck reported this comment as not spam";s:5:"event";s:10:"report-ham";s:4:"user";s:7:"qetr1ck";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user</wp:meta_key>
				<wp:meta_value><![CDATA[qetr1ck]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408892447.259809017181396484375;s:7:"message";s:46:"qetr1ck changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"qetr1ck";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Class manipulation in Javascript, jQuery and AngularJS</title>
		<link>http://savemyday.in/class-manipulation-in-javascript-jquery-and-angularjs/</link>
		<pubDate>Wed, 02 Jul 2014 21:24:37 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=457</guid>
		<description></description>
		<content:encoded><![CDATA[In this article, I would like to create short reference for how add/remove/toogle/... class in pure Javascript and with freemework.

<ol>
	<li>Javascript</li>
<ul style="list-style: none;">
	<li><a class="link-icon" href="/class-manipulation-in-javascript-jquery-and-angularjs/#className"></a>className</li>
	<li><a class="link-icon" href="/class-manipulation-in-javascript-jquery-and-angularjs/#classList"></a>classList</li>
</ul>
	<li>jQuery</li>
<ul style="list-style: none;">
	<li><a class="link-icon" href="/class-manipulation-in-javascript-jquery-and-angularjs/#hasClass"></a>hasClass</li>
	<li><a class="link-icon" href="/class-manipulation-in-javascript-jquery-and-angularjs/#addClass"></a>addClass</li>
	<li><a class="link-icon" href="/class-manipulation-in-javascript-jquery-and-angularjs/#removeClass"></a>removeClass</li>
	<li><a class="link-icon" href="/class-manipulation-in-javascript-jquery-and-angularjs/#toogleClass"></a>toogleClass</li>
</ul>
	<li>AngularJS</li>
<ul style="list-style: none;">
	<li><a class="link-icon" href="/class-manipulation-in-javascript-jquery-and-angularjs/#ng-class"></a>ng-class</li>
	<li><a class="link-icon" href="/class-manipulation-in-javascript-jquery-and-angularjs/#ng-style"></a>ng-style</li>
</ul>
</ol>

<!--more-->
<hr>

<blockquote>Javascript</blockquote>

<a href name="className"></a>
<i class="attention"></i>className

Property <code>className</code> has value of HTML-atribute <code>class</code>:

[html]
<body class="class1 class2"></body>
[/html]

[javascript]
console.log(document.body.className);
//class1 class2

document.body.className += ' class3';

console.log(document.body.className);
//class1 class2 class3
</script>
[/javascript]

<a href name="classList"></a>
<i class="attention"></i>classList

Property <code>classList</code> gives convenient interface for work with certain classes.

<ul>
	<li><code>elem.classList.contains(cls)</code> - return <code>true/false</code> if element has class <code>cls</code></li>
	<li><code>elem.classList.add/remove(cls)</code> - adding/removing class <code>cls</code></li>
	<li><code>elem.classList.toogle(cls)</code> - if element has class <code>cls</code>, remove it, else add class <code>cls</code></li>
</ul>
<hr>

<a href="" name="hasClass"></a>
<a href="" name="addClass"></a>
<a href="" name="removeClass"></a>
<a href="" name="toogleClass"></a>
<a href name="jQuery"></a>
<blockquote>jQuery</blockquote>

These methods inspect and manpulate classes assigned to elements:

<ul>
    <li><code>$(elem).hasClass(cls)</code> - return <code>true/false</code> if element has class <code>cls</code></li>
	<li><code>$(elem).addClass/removeClass(cls)</code> - adding/removing class <code>cls</code></li>
	<li><code>$(elem).toogleClass(cls)</code> - if element has class(es) <code>cls</code>, remove it, else add class(es) <code>cls</code></li>
</ul>
<hr>

<blockquote>AngularJS</blockquote>

<a href name="ng-class"></a>
<i class="attention"></i>ng-class

<code>ng-class</code> accepts an "expression" that must evaluate to one of the following:
<ul>
	<li>a <code>string</code> of space-delimited class names</li>
	<li>an <code>array</code> of class names</li>
	<li>a <code>map/object</code> of class names to boolean values</li>
</ul>

<p data-height="375" data-theme-id="0" data-slug-hash="yjiAp" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/yjiAp/'>AngularJS, ng-class example</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

<a href name="ng-style"></a>
<i class="attention"></i>ng-style

<code>ng-style</code> accepts an "expression" that must evaluate to:
<ul>
	<li>an <code>map/objec</code>t of CSS style names to CSS values</li>
</ul>

<p data-height="121" data-theme-id="0" data-slug-hash="KyBjs" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/KyBjs/'>AngularJS, ng-style example</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>457</wp:post_id>
		<wp:post_date>2014-07-02 23:24:37</wp:post_date>
		<wp:post_date_gmt>2014-07-02 21:24:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>class-manipulation-in-javascript-jquery-and-angularjs</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="angular"><![CDATA[Angular]]></category>
		<category domain="category" nicename="javascript-2"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="jquery"><![CDATA[jQuery]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3336809297]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>113</wp:comment_id>
			<wp:comment_author><![CDATA[distance learning]]></wp:comment_author>
			<wp:comment_author_email>Concho23815@aol.com</wp:comment_author_email>
			<wp:comment_author_url>http://BeOneLearning.com</wp:comment_author_url>
			<wp:comment_author_IP>184.95.52.218</wp:comment_author_IP>
			<wp:comment_date>2014-08-24 01:28:49</wp:comment_date>
			<wp:comment_date_gmt>2014-08-23 23:28:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I can inform you did research on these topics because you really understand what your talking about.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[true]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408836529.6448190212249755859375;s:7:"message";s:35:"Akismet caught this comment as spam";s:5:"event";s:10:"check-spam";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408892417.68045902252197265625;s:7:"message";s:41:"qetr1ck reported this comment as not spam";s:5:"event";s:10:"report-ham";s:4:"user";s:7:"qetr1ck";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user</wp:meta_key>
				<wp:meta_value><![CDATA[qetr1ck]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408892457.765984058380126953125;s:7:"message";s:46:"qetr1ck changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"qetr1ck";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Centering element Vertically and Horizontally </title>
		<link>http://savemyday.in/horizontally-and-vertically-centering-element/</link>
		<pubDate>Sat, 12 Jul 2014 07:55:18 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=493</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="wp-center">
<img src="http://savemyday.in/source/images/centering.gif" alt="" width="400"/>
</div>

<ol>
	<li>Horizontal</li>
	<ul style="list-decoration: none">
        <li><a class="link-icon" href="/horizontally-and-vertically-centering-element/#text-align"></a><code>text-align</code></li>
        <li><a class="link-icon" href="/horizontally-and-vertically-centering-element/#margin: auto"></a><code>margin: auto</code></li>
    </ul>
    <li>Verticall</li>
    <ul>
        <li><a class="link-icon" href="/horizontally-and-vertically-centering-element/#position: absolute + margin"></a><code>position: absolute + margin</code></li>
        <li><a class="link-icon" href="/horizontally-and-vertically-centering-element/#line-height"></a><code>line-height</code></li>
        <li><a class="link-icon" href="/horizontally-and-vertically-centering-element/#vertical-align"></a><code>vertical-align</code></li>
        <li><a class="link-icon" href="/horizontally-and-vertically-centering-element/#vertical-align in table"></a><code>vertical-align</code> in table</li>
        <li><a class="link-icon" href="/horizontally-and-vertically-centering-element/#vertical-align in line"></a><code>vertical-align</code> in line</li>
        <li><a class="link-icon" href="/horizontally-and-vertically-centering-element/#vertical-align with before"></a><code>vertical-align</code> with <code>:before</code></li>
    </ul>
</ol>

<!--more-->

<p data-height="567" data-theme-id="0" data-slug-hash="pAybw" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/pAybw/'>Horizontally and Vertically centering element</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

<a href name=""></a>
<blockquote>
	Horizontall
</blockquote>

<a href="" name="text-align"></a>
<i class="attention"></i>text-align

For centering <code>inline</code> elements:

[html]
<div class="outer">
	Text
</div>

<style>
	.outer {
		text-align: center;
		outline: 1px solid blue;
	}
	
</style>
[/html]
<hr>

<a href="" name="margin: auto"></a>
<i class="attention"></i>margin: auto
For centering <code>block</code> elements with <code>width</code>:

[html]
<div class="outer">
  <div class="inner">Text</div>
</div>

<style>
  .outer {
    border: 1px solid blue;
  }
  .inner {
    width: 100px;
    border: 1px solid red;
    margin: 0 auto; 
  }
</style>
[/html]

<blockquote>
	Verticall
</blockquote>

<a href="" name="position: absolute + margin"></a>
<i class="attention"></i>position: absolute + margin

The <code>parent</code> can have any height. The height of the <code>child</code> must be known. If we know that this is exactly one line, then its height is the line-height:

[html]
<div class="outer">
  <div class="inner">Text</div>
</div>

<style>
  .outer {
    position: relative;
    height: 5em;
    border: 1px solid blue;
  }

  .inner {
    position: absolute;
    top: 50%;
    margin-top: -.625em; /*1.25em/2*/

    border: 1px solid red;
  }
</style>
[/html]
<hr>

<a href="" name="line-height"></a>
<i class="attention"></i>line-height

Centered vertically one row in a known <code>height</code> by specifying this height in the property <code>line-height</code>:

[html]
<div class="outer">
  <span style="border:1px solid red">Text</span>
</div>


<style>
  .outer {
    height: 5em;
    line-height: 5em;
    border: 1px solid blue;
  }
</style>
[/html]

Working only with <code>one</code> row.
<hr>

<a href="" name="vertical-align in table"></a>
<i class="attention"></i>vertical-align with table

Tables <code>vertical-align</code> property specifies the location of the <code>cell</code> contents.

	<ul>
		<li><code>baseline</code> - default value</li>
		<li><code>middle</code>,<code>top</code>,<code>bottom</code></li>
	</ul>

[html]
<style>
  table {  border-collapse: collapse; }
  td {    
    border: 1px solid blue;
    height: 100px;
  }
</style>

<table>
<tr>

  <td style="vertical-align: top">top</td>
  <td style="vertical-align: middle">middle</td>
  <td style="vertical-align: bottom">bottom</td>

</tr>
</table>
[/html]

With <code>display: table-cell:</code>

[html]
<div style="display: table-cell; vertical-align: middle; height: 100px; border: 1px solid red">
  <button>Button<br>with any height<br>and width</button>
</div>
[/html]

[html]
<div style="display: table; width: 100%">
	<div style="display: table-cell; vertical-align: middle; height: 100px; border: 1px solid blue">
   <button>Button<br>with any height<br>and width</button>
</div>
[/html]

<a href="" name="vertical-align in line"></a>
<i class="attention"></i>vertical-align in line

For <code>inline</code> elements (<code>display: inline / inline-block</code>), including pictures, vertical-align property aligns itself inline element in the surrounding text.

It can be used for centering, if the height of the <code>parent</code> is known and <code>child</code> - no:

[html]
<div class="outer" style="height: 120px;border: 1px solid blue">
  <span class="inner">Verticall<br>centered</span>
</div>
<style>
  .outer {
  	height: 120px;
    line-height: 120px;
  }
  .inner {
    display: inline-block; /* centering..*/
    vertical-align: middle;  /* ..vertically */
    line-height: 1.25; 
    border: 1px solid red;
  }
</style>
[/html]
<hr>

<a href="" name="vertical-align with before"></a>
<i class="attention"></i>vertical-align with :before

In all modern browsers and IE8, you can add an extra element through <code>:before</code>:

[html]
<style>
.outer:before {
  content: '';
  display: inline-block;
  height: 100%;
  vertical-align: middle;
}

.inner {
  display: inline-block;
  vertical-align: middle;
}

/* horizontal */
.outer {
  text-align: center;
}
</style>

<div class="outer" style="height:100px; width: 100%; border:1px solid black">
  <span class="inner" style="border:1px solid red">
    Centered<br>Element
  </span>
</div>

[/html]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>493</wp:post_id>
		<wp:post_date>2014-07-12 09:55:18</wp:post_date>
		<wp:post_date_gmt>2014-07-12 07:55:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>horizontally-and-vertically-centering-element</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="centering"><![CDATA[centering]]></category>
		<category domain="category" nicename="css"><![CDATA[CSS]]></category>
		<category domain="post_tag" nicename="horizontall-align"><![CDATA[horizontall align]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<category domain="post_tag" nicename="vertically-align"><![CDATA[vertically align]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3444875188]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>64</wp:comment_id>
			<wp:comment_author><![CDATA[chanel factory outlet]]></wp:comment_author>
			<wp:comment_author_email>fayebonnor@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.zoomlionghana.com/html/images/map.php</wp:comment_author_url>
			<wp:comment_author_IP>98.126.84.130</wp:comment_author_IP>
			<wp:comment_date>2014-08-11 16:09:33</wp:comment_date>
			<wp:comment_date_gmt>2014-08-11 14:09:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I am sure this piece of writing has touched all the internet users, its really really fastidious article on building up new 
website.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408892741.772468090057373046875;s:7:"message";s:41:"qetr1ck reported this comment as not spam";s:5:"event";s:10:"report-ham";s:4:"user";s:7:"qetr1ck";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user</wp:meta_key>
				<wp:meta_value><![CDATA[qetr1ck]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408892761.1599938869476318359375;s:7:"message";s:46:"qetr1ck changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"qetr1ck";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[true]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1407766173.5975658893585205078125;s:7:"message";s:35:"Akismet caught this comment as spam";s:5:"event";s:10:"check-spam";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_pro_tip</wp:meta_key>
				<wp:meta_value><![CDATA[discard]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>65</wp:comment_id>
			<wp:comment_author><![CDATA[tory burch ballet flats]]></wp:comment_author>
			<wp:comment_author_email>peggy_ewald@bigstring.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.zoomlionghana.com/photos/images/log.php</wp:comment_author_url>
			<wp:comment_author_IP>67.198.132.2</wp:comment_author_IP>
			<wp:comment_date>2014-08-13 20:59:52</wp:comment_date>
			<wp:comment_date_gmt>2014-08-13 18:59:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I've been browsing online more than 3 hours lately, but I by no means discovered any fascinating article like yours.
It's lovely worth sufficient for me. In my view, if all site 
owners and bloggers made excellent content material as you did, the web might be a lot more helpful than ever 
before.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408892761.1583011150360107421875;s:7:"message";s:46:"qetr1ck changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"qetr1ck";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_pro_tip</wp:meta_key>
				<wp:meta_value><![CDATA[discard]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[true]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1407956392.10468196868896484375;s:7:"message";s:35:"Akismet caught this comment as spam";s:5:"event";s:10:"check-spam";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user</wp:meta_key>
				<wp:meta_value><![CDATA[qetr1ck]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408892711.3859310150146484375;s:7:"message";s:41:"qetr1ck reported this comment as not spam";s:5:"event";s:10:"report-ham";s:4:"user";s:7:"qetr1ck";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>JavaScript Promises</title>
		<link>http://savemyday.in/javascript-promises/</link>
		<pubDate>Sun, 13 Jul 2014 11:43:08 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=506</guid>
		<description></description>
		<content:encoded><![CDATA[Short content:
<ul tyle="list-decoration: none">
	<li> <a class="link-icon" href="/javascript-promises/#Promises arrive in JavaScript!"></a>Promises arrive in JavaScript!</li>
	<li> <a class="link-icon" href="/javascript-promises/#Promisifying XMLHttpRequest"></a>Promisifying XMLHttpRequest</li>
	<li> <a class="link-icon" href="/javascript-promises/#Chaining"></a>Chaining</li>
	<li> <a class="link-icon" href="/javascript-promises/#Error handling"></a>Error handling</li>
	<li> <a class="link-icon" href="/javascript-promises/#Parallelism and sequencing"></a>Parallelism and sequencing - Getting the best of both</li>
</ul>
<!--more-->

<a href="" name="Promises arrive in JavaScript!"></a>
<i class="attention"></i>Promises arrive in JavaScript!

Here's how you create a promise:

[javascript]
var promise = new Promise(function(resolve, reject) {
  // do a thing, possibly async, then…

  if (/* everything turned out fine */) {
    resolve("Stuff worked!");
  }
  else {
    reject(Error("It broke"));
  }
});
[/javascript]

The <code>promise constructor</code> takes one argument, a <code>callback</code> with two parameters, <code>resolve</code> and <code>reject</code>. Do something within the callback, perhaps async, then call resolve if everything worked, otherwise call reject.

Here's how you use that promise:

[javascript]
promise.then(function(res) {
	console.log(res) //Stuff worked!
}, function(err) {
	console.log(err) //Error!
});
[/javascript]

<code>then</code> takes two arguments, a callback for a <code>success</code> case, and another for the <code>failure</code> case. Both are optional, so you can add a callback for the success or failure case only.

<a href="" name="Promisifying XMLHttpRequest"></a>
<i class="attention"></i>Promisifying XMLHttpRequest

Old APIs will be updated to use promises, if it's possible in a backwards compatible way. XMLHttpRequest is a prime candidate, but in the mean time let's write a simple function to make a GET request:

[javascript]
function get(url) {
  // Return a new promise.
  return new Promise(function(resolve, reject) {
    // Do the usual XHR stuff
    var req = new XMLHttpRequest();
    req.open('GET', url);

    req.onload = function() {
      // This is called even on 404 etc
      // so check the status
      if (req.status == 200) {
        // Resolve the promise with the response text
        resolve(req.response);
      }
      else {
        // Otherwise reject with the status text
        // which will hopefully be a meaningful error
        reject(Error(req.statusText));
      }
    };

    // Handle network errors
    req.onerror = function() {
      reject(Error("Network Error"));
    };

    // Make the request
    req.send();
  });
}
[/javascript]

Now let's use it:
[javascript]
get('story.json').then(function(response) {
  console.log("Success!", response);
}, function(error) {
  console.error("Failed!", error);
});
[/javascript]

<a href="" name="Chaining"></a>
<i class="attention"></i>Chaining

<code>then</code> isn't the end of the story, you can chain <code>then"s</code> together to transform values or run additional async actions one after another:

[javascript]
var promise = new Promise(function(resolve, reject) {
  resolve(1);
});

promise.then(function(val) {
  console.log(val); // 1
  return val + 2;
}).then(function(val) {
  console.log(val); // 3
});
[/javascript]

As a practical example, let's go back to:

[javascript]
get('story.json').then(function(response) {
  return JSON.parse(response);
}).then(function(response) {
  console.log("Yey JSON!", response);
});
[/javascript]

<code>getJSON</code> still returns a promise, one that fetches a url then parses the response as JSON.

[javascript]
function getJSON(url) {
  return get(url).then(JSON.parse);
}
[/javascript]

<a href="" name="Error handling"></a>
<i class="attention"></i>Error handling

As we saw earlier, <code>then</code> takes two arguments, one for <code>success</code>, one for <code>failure</code> (or fulfill and reject, in promises-speak):

[javascript]
get('story.json').then(function(response) {
  console.log("Success!", response);
}, function(error) {
  console.log("Failed!", error);
});
[/javascript]

You can also use <code>catch</code>:

[javascript]
get('story.json').then(function(response) {
  console.log("Success!", response);
}).catch(function(error) {
  console.log("Failed!", error);
});
[/javascript]

With our story and chapters, we can use catch to display an error to the user:

[javascript]
getJSON('story.json').then(function(story) {
  return getJSON(story.chapterUrls[0]);
}).then(function(chapter1) {
  addHtmlToPage(chapter1.html);
}).catch(function() {
  addTextToPage("Failed to show chapter");
}).then(function() {
  document.querySelector('.spinner').style.display = 'none';
});
[/javascript]

<a href="" name="Parallelism and sequencing"></a>
<i class="attention"></i>Creating a sequence

But how can we loop through the <code>story.chapter</code> urls and fetch them in order?

[javascript]
getJSON('story.json').then(function(story) {
  addHtmlToPage(story.heading);

  // TODO: for each url in story.chapterUrls, fetch & display
}).then(function() {
  // And we're all done!
  addTextToPage("All done");
}).catch(function(err) {
  // Catch any error that happened along the way
  addTextToPage("Argh, broken: " + err.message);
}).then(function() {
  // Always hide the spinner
  document.querySelector('.spinner').style.display = 'none';
});
[/javascript]

This doesn't work:

[javascript]
story.chapterUrls.forEach(function(chapterUrl) {
  // Fetch chapter
  getJSON(chapterUrl).then(function(chapter) {
    // and add it to the page
    addHtmlToPage(chapter.html);
  });
});
[/javascript]

We want to turn our chapterUrls array into a <code>sequence of promises</code>. We can do that using <code>then</code>:

[javascript]
// Start off with a promise that always resolves
var sequence = Promise.resolve();

// Loop through our chapter urls
story.chapterUrls.forEach(function(chapterUrl) {
  // Add these actions to the end of the sequence
  sequence = sequence.then(function() {
    return getJSON(chapterUrl);
  }).then(function(chapter) {
    addHtmlToPage(chapter.html);
  });
});
[/javascript]

We can tidy up the above code using <code>array.reduce</code>:

[javascript]
// Loop through our chapter urls
story.chapterUrls.reduce(function(sequence, chapterUrl) {
  // Add these actions to the end of the sequence
  return sequence.then(function() {
    return getJSON(chapterUrl);
  }).then(function(chapter) {
    addHtmlToPage(chapter.html);
  });
}, Promise.resolve());
[/javascript]

Let's put it all together…

[javascript]
getJSON('story.json').then(function(story) {
  addHtmlToPage(story.heading);

  return story.chapterUrls.reduce(function(sequence, chapterUrl) {
    // Once the last chapter's promise is done…
    return sequence.then(function() {
      // …fetch the next chapter
      return getJSON(chapterUrl);
    }).then(function(chapter) {
      // and add it to the page
      addHtmlToPage(chapter.html);
    });
  }, Promise.resolve());
}).then(function() {
  // And we're all done!
  addTextToPage("All done");
}).catch(function(err) {
  // Catch any error that happened along the way
  addTextToPage("Argh, broken: " + err.message);
}).then(function() {
  // Always hide the spinner
  document.querySelector('.spinner').style.display = 'none';
});
[/javascript]

But we can do better. At the moment our page is downloading like this:

<div class="wp-center">
<img src="http://www.html5rocks.com/en/tutorials/es6/promises/promise1.gif" alt="" max-width="100%"/>
</div>

Browsers aren't pretty good at downloading <code>multiple</code> things at once, so we're losing performance by downloading chapters one after the other. What we want to do is download them all at the same time, then process them when they've all arrived. Thankfully there's an API for this:

[javascript]
Promise.all(arrayOfPromises).then(function(arrayOfResults) {
  //...
});
[/javascript]

<code>Promise.all</code> takes an array of promises and creates a promise that fulfills when all of them successfully complete. You get an array of results (whatever the promises fulfilled to) in the same order as the promises you passed in.

[javascript]
getJSON('story.json').then(function(story) {
  addHtmlToPage(story.heading);

  // Take an array of promises and wait on them all
  return Promise.all(
    // Map our array of chapter urls to
    // an array of chapter json promises
    story.chapterUrls.map(getJSON)
  );
}).then(function(chapters) {
  // Now we have the chapters jsons in order! Loop through…
  chapters.forEach(function(chapter) {
    // …and add to the page
    addHtmlToPage(chapter.html);
  });
  addTextToPage("All done");
}).catch(function(err) {
  // catch any error that happened so far
  addTextToPage("Argh, broken: " + err.message);
}).then(function() {
  document.querySelector('.spinner').style.display = 'none';
});
[/javascript]

Depending on connection, this can be seconds faster than loading one-by-one:

<div class="wp-center">
<img src="http://www.html5rocks.com/en/tutorials/es6/promises/promise2.gif" alt="" max-width="100%"/>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>506</wp:post_id>
		<wp:post_date>2014-07-13 13:43:08</wp:post_date>
		<wp:post_date_gmt>2014-07-13 11:43:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>javascript-promises</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript-2"><![CDATA[Javascript]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<category domain="post_tag" nicename="promises"><![CDATA[Promises]]></category>
		<category domain="post_tag" nicename="xhr"><![CDATA[XHR]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[4026309503]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Deferred and promise in jQuery</title>
		<link>http://savemyday.in/deferred-and-promise-in-jquery/</link>
		<pubDate>Mon, 14 Jul 2014 19:17:26 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=510</guid>
		<description></description>
		<content:encoded><![CDATA[<ul tyle="list-decoration: none">
	<li> <a class="link-icon" href="/deferred-and-promise-in-jquery/#So in which cases are Promises useful?"></a>So in which cases are Promises useful?</li>
	<li> <a class="link-icon" href="/deferred-and-promise-in-jquery/#Why we need Deferred and Promises?"></a>Why we need Deferred and Promises?</li>
	<li> <a class="link-icon" href="/deferred-and-promise-in-jquery/#Promise"></a>Promise</li>
	<li> <a class="link-icon" href="/deferred-and-promise-in-jquery/#So what is a deferred and what is the difference with a promise?"></a>So what is a deferred and what is the difference with a promise?</li>
</ul>

<!--more-->

<i class="attention"></i>So in which cases are Promises useful?

AJAX request handler spaghetti?

[javascript]
$.ajax({
  type: 'GET',
  url: 'http://www.html5rocks.com/en/tutorials/file/xhr2/',
  success: function(response) {
    var insertDiv1 = $('<div></div>');
    insertDiv1.html($(response).find('section').html());
    $.ajax({
      type: 'GET',
      url: 'http://www.html5rocks.com/en/tutorials/audio/scheduling/',
      success: function(response) {
        var insertDiv2 = $('<div></div>');
        insertDiv2.html($(response).find('section').html());
        $('body').append(insertDiv1, '<hr/>', insertDiv2);
      }
    });
  }
});
[/javascript]

<a href="" name="So in which cases are Promises useful?"></a>
<a href="" name="Why we need Deferred and Promises?"></a>
<i class="attention"></i>Why we need Deferred and Promises?

Let’s do a step back in time. A time without iPod or Xbox or Facebook. If you wanted to catch a <code>mouseclick</code>, you did it with <code>element.onclick = someFunction;</code> This became a problem when another part of the code also wanted to listen to this click. This was not possible, because you could only assign one function. This was solved at the time with the <code>addEventListener</code> function. With this, you can add as many listener functions as you want. 

Now we have a similar problem with <code>Ajax</code> calls. This time it’s not the events, but the fact that <code>Ajax</code> supports only one callback function. Not only the jQuery <code>$.ajax()</code> call, but also the underlying <code>XMLHttpRequest</code> object.

<code>Deferred</code> and <code>promise</code> are part of jQuery since version 1.5 and they help in handling asynchronous functions like Ajax.

A typical <code>$.ajax()</code> call looked like this:

[javascript]
$.ajax({
  url: "/myServerScript",
  success: mySuccessFunction,
  error: myErrorFunction
});
[/javascript]

Since version 1.5, the returned object implements the <a href="http://wiki.commonjs.org/wiki/Promises/A">CommonJS Promises/A interface</a>. That’s a mouth full. CommonJS is a initiative to define common and independent interfaces <code>API’s</code>. <code>Promises/A</code> is one such interface. The advantage is that these are not jQuery specific. For example, if you work with Node.js, there is a good chance you’ll program with this same interface.

The way of assigning callbacks with Promises: 

[javascript]
var promise = $.ajax({
  url: "/myServerScript"
});
 
promise.done(mySuccessFunction);
promise.fail(myErrorFunction);
[/javascript]

You can combine the done() and fail() functions in one then() function:

[javascript]
var promise = $.ajax({
  url: "/myServerScript"
});
 
promise.then(mySuccessFunction, myErrorFunction);
[/javascript]

<a href="" name="Promise"></a>
<i class="attention"></i>The advantages of promises are:

1) You can call the <code>done()</code> and <code>fail()</code> functions more times, with different callbacks. Maybe you have a callback function that stops an animation, one that does a new Ajax call and another function that shows the received data to the visitor:

[javascript]
var promise = $.ajax({
  url: "/myServerScript"
});
 
promise.done(myStopAnimationFunction);
promise.done(myOtherAjaxFunction);
promise.done(myShowInfoFunction);
promise.fail(myErrorFunction);
[/javascript]

2) You can combine promises. Sometimes you need to do two simultaneous Ajax calls and you want to execute a function when both are successfully finished. To do this, you use the new <code>$.when()</code> function:

[javascript]
var promise1 = $.ajax("/myServerScript1");
var promise2 = $.ajax("/myServerScript2");
 
$.when(promise1, promise2).done(function(xhrObject1, xhrObject2) {
  // Handle both XHR objects
});
[/javascript]

3) Since jQuery 1.8, you can chain the <code>then()</code> function sequentially. In the code below, first promise1 is run and when resolved successfully, getStuff is run, returning a promise and when this is resolved successfully, the anonymous function is executed:

[javascript]
var promise1 = $.ajax("/myServerScript1");
 
function getStuff() {
    return $.ajax("/myServerScript2");
}
 
promise1.then(getStuff).then(function(myServerScript2Data){
  // Both promises are resolved
});
[/javascript]

Every callback function receives the <code>result</code> of the previous asynchronous function, in the case of Ajax, that would be the returned data.

<a href="" name="So what is a deferred and what is the difference with a promise?"></a>
<i class="attention"></i>So what is a deferred and what is the difference with a promise?

As you have seen above, a <code>promise</code> is an object that is returned from an asynchronous function. You need a <code>deferred</code> when you write such a function yourself.

A <code>deferred object</code> has a <code>resolve()</code> functions for a successful result and to execute the functions assigned with <code>done()</code>. The <code>reject()</code> function is for a failed result and executes the functions assigned with <code>fail()</code>.

You can give <code>parameters</code> to both the <code>resolve()</code> and <code>reject()</code> functions and they will be passed on to the functions registered with <code>done()</code> and <code>fail()</code>.

The <code>promise object</code> does not have resolve() or reject() functions. This is because you give the promise away to other scripts and you don’t want them to resolve or reject the promise.

Below is a simple script that illustrates how it works:

[javascript]
$('#result').html('waiting...');
 
var promise = wait();
promise.done(result);
 
function result() {
  $('#result').html('done');
}
 
function wait() {
  var deferred = $.Deferred();
 
  setTimeout(function() {
    deferred.resolve();
  }, 2000);
 
  return deferred.promise();
}
[/javascript]

The <code>wait()</code> function is the function returning a promise. This will be resolved with a setTimeout of two seconds. Instead of setTimeout, everything can be used that is asynchronous, like animations, Web workers etcetera. It should be clear that inside the <code>wait()</code> function, we use the deferred object, but we return the limited promise object.

Save My Day:
<a href="http://www.bitstorm.org/weblog/2012-1/Deferred_and_promise_in_jQuery.html">Deferred and promise in jQuery</a>
<a href="http://www.danieldemmel.me/blog/2013/03/22/an-introduction-to-jquery-deferred-slash-promise/">An introduction to jQuery Deferred / Promise and the design pattern in general</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>510</wp:post_id>
		<wp:post_date>2014-07-14 21:17:26</wp:post_date>
		<wp:post_date_gmt>2014-07-14 19:17:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>deferred-and-promise-in-jquery</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="defered"><![CDATA[Defered]]></category>
		<category domain="category" nicename="jquery"><![CDATA[jQuery]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<category domain="post_tag" nicename="promises"><![CDATA[Promises]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3398985808]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Got 15 minutes and want to learn Git?</title>
		<link>http://savemyday.in/got-15-minutes-and-want-to-learn-git/</link>
		<pubDate>Sat, 19 Jul 2014 07:56:12 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=198</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="wp-center">
<img src="http://savemyday.in/source/images/git15m.png" alt="" width="600"/>
</div>

<ul style="list-decoration: none">
    <li><a class="link-icon" href="/got-15-minutes-and-want-to-learn-git/#Initialize a Git"></a>Initialize a Git <code>git init</code></li>
    <li><a class="link-icon" href="/got-15-minutes-and-want-to-learn-git/#Checking the Status"></a>Checking the Status <code>git status</code></li>
    <li><a class="link-icon" href="/got-15-minutes-and-want-to-learn-git/#Adding Changes"></a>Adding Changes <code>git add</code></li>
    <li><a class="link-icon" href="/got-15-minutes-and-want-to-learn-git/#Checking for Changes"></a>Checking for Changes <code>git status</code></li>
    <li><a class="link-icon" href="/got-15-minutes-and-want-to-learn-git/#History"></a>History <code>git log</code></li>
    <li><a class="link-icon" href="/got-15-minutes-and-want-to-learn-git/#Pushing Remotely"></a>Pushing Remotely <code>git push</code></li>
    <li><a class="link-icon" href="/got-15-minutes-and-want-to-learn-git/#Pulling Remotely"></a>Pulling Remotely <code>git pull</code></li>
    <li><a class="link-icon" href="/got-15-minutes-and-want-to-learn-git/#Differences"></a>Differences <code>git diff HEAD</code></li>
    <li><a class="link-icon" href="/got-15-minutes-and-want-to-learn-git/#Staged Differences"></a>Staged Differences <code>git diff --staged</code></li>
    <li><a class="link-icon" href="/got-15-minutes-and-want-to-learn-git/#Resetting the Stage"></a>Resetting the Stage <code>git reset</code></li>
	<li><a class="link-icon" href="/got-15-minutes-and-want-to-learn-git/#Undo"></a>Undo <code>git checkout "version"</code></li>
	<li><a class="link-icon" href="/got-15-minutes-and-want-to-learn-git/#Undo"></a>Branching Out <code>git branch "branch name"</code></li>
    <li><a class="link-icon" href="/got-15-minutes-and-want-to-learn-git/#Switching Branches"></a>Switching Branches <code>git checkout "branch name"</code></li>
    <li><a class="link-icon" href="/got-15-minutes-and-want-to-learn-git/#Removing All The Things"></a>Removing All The Things <code>git rm</code></li>
    <li><a class="link-icon" href="/got-15-minutes-and-want-to-learn-git/#Switching Back to master"></a>Switching Back to master <code>git checkout master</code></li>
    <li><a class="link-icon" href="/got-15-minutes-and-want-to-learn-git/#Preparing to Merge"></a>Preparing to Merge <code>git marge "branch name"</code></li>
    <li><a class="link-icon" href="/got-15-minutes-and-want-to-learn-git/#Keeping Things Clean"></a>Keeping Things Clean <code>git branch -d "branch name"</code></li>
    <li><a class="link-icon" href="/got-15-minutes-and-want-to-learn-git/#The Final Push"></a>The Final Push <code>git push</code></li>
</ul>

<!--more-->

<a href name="Initialize a Git"></a>
<div class="title-block">
  <i class="attention"></i>Initialize a Git
</div>

Git allows groups of people to work on the same documents (often code) at the same time, and without stepping on each other's toes. It's a distributed version control system.

Our terminal prompt below is currently in directory we decided to name "octobox". To initialize a Git repository here, type the following command:

<pre><code>git init</code></pre>
<hr>

<a href name="Checking the Status"></a>
<div class="title-block">
  <i class="attention"></i>Checking the Status
</div>

Good job! As Git just told us, our "octobox" directory now has an empty repository in /.git/. The repository is a hidden directory where Git operates.
Next up, let's type the git status command to see what the current state of our project is:

<pre><code>git status</code></pre>

Tip:
It's healthy to run <code>git status</code> often. Sometimes things change and you don't notice it.
<hr>

<a href name="Adding Changes"></a>
<div class="title-block">
  <i class="attention"></i>Adding Changes
</div>

Good, it looks like our Git repository is working properly. Notice how Git says octocat.txt is "untracked"? That means Git sees that octocat.txt is a new file.

To tell Git to start tracking changes made to octocat.txt, we first need to add it to the staging area by using git add.

<pre>
	<code>git add octocat.txt</code>
	<code>git add *.txt</code>
	<code>git add --all</code>
	<code>git add docs/*.txt</code>
	<code>git add docs/</code>
	<code>git add .</code>
</pre>

<dl>
  <dt>staged:</dt>
  <dd>Files are ready to be committed.</dd>
  <dt>unstaged:</dt>
  <dd>Files with changes that have not been prepared to be commited.</dd>
  <dt>untracked:</dt>
  <dd>Files aren't tracked by Git yet. This usually indicates a newly created file.</dd>
  <dt>deleted:</dt>
  <dd>File has been deleted and is waiting to be removed from Git.</dd>
</dl>
<hr>

<a href name="Checking for Changes"></a>
<div class="title-block">
  <i class="attention"></i>Checking for Changes
</div>

Good job! Git is now tracking our octocat.txt file. Let's run git status again to see where we stand:

<pre><code>git status</code></pre>

You can use <code>git reset filename</code> to remove a file or files from the staging area.
<hr>

<a href name="Committing"></a>
<div class="title-block">
  <i class="attention"></i>Committing
</div>
Notice how Git says changes to be committed? The files listed here are in the Staging Area, and they are not in our repository yet. We could add or remove files from the stage before we store them in the repository.

To store our staged changes we run the <code>commit</code> command with a message describing what we've changed. Let's do that now by typing:

<pre><code>git commit -m "Add new file"</code></pre>

Staging Area:
A place where we can group files together before we <code>commit</code> them to Git.

Commit
A <code>commit</code> is a snapshot of our repository. This way if we ever need to look back at the changes we've made (or if someone else does), we will see a nice timeline of all changes.
<hr>

<a href name="History"></a>
<div class="title-block">
  <i class="attention"></i>History
</div>
So we've made a few commits. Now let's browse them to see what we changed.

Fortunately for us, there's <code>git log</code>. Think of Git's log as a journal that remembers all the changes we've committed so far, in the order we committed them. Try running it now:

<pre><code>git log</code></pre>

Use <code>git log --summary</code> to see more information for each commit.

Remote Repositories
To push our local repo to the GitHub server we'll need to add a remote repository.

This command takes a remote name and a repository URL, which in your case is https://github.com/try-git/try_git.git.

<pre><code>git remote add origin url</code></pre>

Git doesn't care what you name your remotes, but it's typical to name your main one <code>origin</code>.
<hr>

<a href name="Pushing Remotely"></a>
<div class="title-block">
  <i class="attention"></i>Pushing Remotely
</div>
The <code>push command</code> tells Git where to put our commits when we're ready, and boy we're ready. So let's push our local changes to our origin repo (on GitHub).

The name of our remote is origin and the default local branch name is <code>master</code>. The -u tells Git to remember the parameters, so that next time we can simply run git push and Git will know what to do. Go ahead and push it!

<pre><code>git push -u origin master</code></pre>
<hr>

<a href name="Pulling Remotely"></a>
<div class="title-block">
  <i class="attention"></i>Pulling Remotely
</div>
Let's pretend some time has passed. We've invited other people to our github project who have pulled your changes, made their own commits, and pushed them.

We can check for changes on our GitHub repository and pull down any new changes by running:

<pre><code>git pull origin master</code></pre>
<hr>

<a href name="Differences"></a>
<div class="title-block">
  <i class="attention"></i>Differences
</div>
Uh oh, looks like there has been some additions and changes to the octocat family. Let's take a look at what is different from our last commit by using the <code>git diff</code> command.

In this case we want the diff of our most recent commit, which we can refer to using the HEAD pointer.

<pre><code>git diff HEAD</code></pre>

The HEAD is a pointer that holds your position within all your different commits. By default HEAD points to your most recent commit.
<hr>

<a href name="Mobile First"></a>
<div class="title-block">
  <i class="attention"></i>Staged Differences
</div>
Another great use for diff is looking at changes within files that have already been staged. Remember, staged files are files we have told git that are ready to be committed.

Good, now go ahead and run git diff with the --staged option to see the changes you just staged. You should see that octodog.txt was created.

<pre><code>git diff --staged</code></pre>

Using 'git diff' gives you a good overview of changes you have made and lets you add files or directories one at a time and commit them separately.
<hr>

<a href name="Resetting the Stage"></a>
<div class="title-block">
  <i class="attention"></i>Resetting the Stage
</div>

So now that octodog is part of the family, octocat is all depressed. Since we love octocat more than octodog, we'll turn his frown around by removing octodog.txt.

You can unstage files by using the git reset command. Go ahead and remove octofamily/octodog.txt.

<pre><code>git reset octofamily/octodog.txt</code></pre>
<hr>

<a href name="Undo"></a>
<div class="title-block">
  <i class="attention"></i>Undo
</div>

Files can be changed back to how they were at the last commit by using the command: git checkout -- <target>. Go ahead and get rid of all the changes since the last commit for octocat.txt

<pre><code>git checkout -- octocat.txt</code></pre>

So you may be wondering, why do I have to use this '--' thing?  This way if you happen to have a branch named octocat.txt, it will still revert the file, instead of switching to the branch of the same name.
<hr>

<a href name="Branching Out"></a>
<div class="title-block">
  <i class="attention"></i>Branching Out
</div>

When developers are working on a feature or bug they'll often create a copy (aka. branch) of their code they can make separate commits to. Then when they're done they can merge this branch back into their main master branch.

We want to remove all these pesky octocats, so let's create a branch called clean_up, where we'll do all the work:

<pre><code>git branch clean_up</code></pre>
<hr>

<a href name="Switching Branches"></a>
<div class="title-block">
  <i class="attention"></i>Switching Branches
</div>
Great! Now if you type git branch you'll see two local branches: a main branch named master and your new branch named clean_up.

You can switch branches using the git checkout <branch> command. Try it now to switch to the clean_up branch:

<pre><code>git checkout clean_up</code></pre>

Branches are what naturally happens when you want to work on multiple features at the same time. You wouldn't want to end up with a master branch which has Feature A half done and Feature B half done.
<hr>

<a href name="Removing All The Things"></a>
<div class="title-block">
  <i class="attention"></i>Removing All The Things
</div>
Ok, so you're in the clean_up branch. You can finally remove all those pesky octocats by using the git rm command which will not only remove the actual files from disk, but will also stage the removal of the files for us:

<pre><code>git rm '*.txt'</code></pre>

This will recursively remove all folders and files from the given directory:

<pre><code>git rm -r folder_of_cats</code></pre>

<a href name="Commiting Branch Changes"></a>
<div class="title-block">
  <i class="attention"></i>Commiting Branch Changes
</div>
Now that you've removed all the cats you'll need to commit your changes.

Feel free to run git status to check the changes you're about to commit.

<pre><code>git commit -m 'Remove all cats'</code></pre>
<hr>

<a href name="Switching Back to master"></a>
<div class="title-block">
  <i class="attention"></i>Switching Back to master
</div>
Great, you're almost finished with the cat... er the bug fix, you just need to switch back to the master branch so you can copy (or merge) your changes from the clean_up branch back into the master branch.

Go ahead and checkout the master branch:

<pre><code>git checkout master</code></pre>
<hr>

<a href name="Preparing to Merge"></a>
<div class="title-block">
  <i class="attention"></i>Preparing to Merge
</div>
Alrighty, the moment has come when you have to merge your changes from the clean_up branch into the master branch. Take a deep breath, it's not that scary.

We're already on the master branch, so we just need to tell Git to merge the clean_up branch into it:

<pre><code>git merge clean_up</code></pre>

Merge Conflicts can occur when changes are made to a file at the same time. A lot of people get really scared when a conflict happens, but fear not! They aren't that scary, you just need to decide which code to keep <a href="http://git-scm.com/docs/git-merge#_how_conflicts_are_presented">how conflicts are presented</a>.
<hr>

<a href name="Keeping Things Clean"></a>
<div class="title-block">
  <i class="attention"></i>Keeping Things Clean
</div>
Congratulations! You just accomplished your first successful bugfix and merge. All that's left to do is clean up after yourself. Since you're done with the clean_up branch you don't need it anymore.

You can use <code>git branch -d branch name</code> to delete a branch. Go ahead and delete the clean_up branch now:

<pre><code>git branch -d clean_up</code></pre>

What if you have been working on a feature branch and you decide you really don't want this feature anymore? You might decide to delete the branch since you're scrapping the idea. You'll notice that <code>git branch -d bad_feature</code> doesn't work. This is because -d won't let you delete something that hasn't been merged.
You can either add the <code>--force (-f)</code>
<hr>

<a href name="The Final Push"></a>
<div class="title-block">
  <i class="attention"></i>The Final Push
</div>
Here we are, at the last step. I'm proud that you've made it this far, and it's been great learning Git with you. All that's left for you to do now is to push everything you've been working on to your remote repository, and you're done!

<pre><code>git push</code></pre>
<hr>

Save My Day:
<a href="https://www.codeschool.com">Try Git</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>198</wp:post_id>
		<wp:post_date>2014-07-19 09:56:12</wp:post_date>
		<wp:post_date_gmt>2014-07-19 07:56:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>got-15-minutes-and-want-to-learn-git</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="git"><![CDATA[Git]]></category>
		<category domain="category" nicename="git"><![CDATA[Git]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3460588768]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Bootstrap: CSS</title>
		<link>http://savemyday.in/bootstrap-css/</link>
		<pubDate>Thu, 17 Jul 2014 18:10:04 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=522</guid>
		<description></description>
		<content:encoded><![CDATA[<ol>
	<li>Overview</li>
	<ul style="list-style: none;">
		<li><a class="link-icon" href="/bootstrap-css/#Mobile First"></a>Mobile First</li>
		<li><a class="link-icon" href="/bootstrap-css/#Typography and links"></a>Typography and links</li>
		<li><a class="link-icon" href="/bootstrap-css/#Normalize.css"></a>Normalize.css</li>
	</ul>
	<li>Grid System</li>
	<ul style="list-style: none;">
		<li><a class="link-icon" href="/bootstrap-css/#Media query"></a>Media query</li>
		<li><a class="link-icon" href="/bootstrap-css/#Stacked-to-horizontal"></a>Stacked-to-horizontal</li>
		<li><a class="link-icon" href="/bootstrap-css/#Fluid container"></a>Fluid container</li>
		<li><a class="link-icon" href="/bootstrap-css/#Offseting columns"></a>Offseting columns</li>
		<li><a class="link-icon" href="/bootstrap-css/#Grid System Examples"></a>Grid System Examples</li>
	</ul>
	<li>Typography</li>
	<ul style="list-style: none;">
		<li><a class="link-icon" href="/bootstrap-css/#Headings"></a>Headings</li>
		<li><a class="link-icon" href="/bootstrap-css/#Body copy"></a>Body copy</li>
		<li><a class="link-icon" href="/bootstrap-css/#Inline text elements"></a>Inline text elements</li>
		<li><a class="link-icon" href="/bootstrap-css/#Transformation clases"></a>Transformation clases</li>
		<li><a class="link-icon" href="/bootstrap-css/#Alignment classes"></a>Alignment classes</li>
		<li><a class="link-icon" href="/bootstrap-css/#Blockquotes"></a>Blockquotes</li>
		<li><a class="link-icon" href="/bootstrap-css/#Blockquotes"></a>Lists</li>
		<li><a class="link-icon" href="/bootstrap-css/#Codes"></a>Codes</li>
		<li><a class="link-icon" href="/bootstrap-css/#User Input"></a>User input</li>
		<li><a class="link-icon" href="/bootstrap-css/#Basic block"></a>Basic block</li>
		<li><a class="link-icon" href="/bootstrap-css/#Varible"></a>Varible</li>
		<li><a class="link-icon" href="/bootstrap-css/#Sample output"></a>Sample output</li>
		<li><a class="link-icon" href="/bootstrap-css/#Typography Examples"></a>Typography Examples</li>
	</ul>
	<li>Table</li>
	<ul style="list-style: none;">
		<li><a class="link-icon" href="/bootstrap-css/#Basic example"></a>Basic example</li>
		<li><a class="link-icon" href="/bootstrap-css/#Bordered table"></a>Bordered table</li>
		<li><a class="link-icon" href="/bootstrap-css/#Hover rows"></a>Hover rows</li>
		<li><a class="link-icon" href="/bootstrap-css/#Condensed table"></a>Condensed table</li>
		<li><a class="link-icon" href="/bootstrap-css/#Contextual classes"></a>Contextual classes</li>
		<li><a class="link-icon" href="/bootstrap-css/#Responsive tables"></a>Responsive tables</li>
		<li><a class="link-icon" href="/bootstrap-css/#Table Examples"></a>Table Examples</li>
	</ul>
	<li>Forms</li>
	<ul style="list-style: none;">
		<li><a class="link-icon" href="/bootstrap-css/#Basic example forms"></a>Basic example</li>
		<li><a class="link-icon" href="/bootstrap-css/#Inline form"></a>Inline form</li>
		<li><a class="link-icon" href="/bootstrap-css/#Horizontal form"></a>Horizontal form</li>
		<li><a class="link-icon" href="/bootstrap-css/#Input focus"></a>Input focus</li>
		<li><a class="link-icon" href="/bootstrap-css/#Validates states and Icon"></a>Validates states and Icon</li>
		<li><a class="link-icon" href="/bootstrap-css/#Control sizing and Help text"></a>Control sizing and Help text</li>
		<li><a class="link-icon" href="/bootstrap-css/#Form Examples"></a>Form Examples</li>
	</ul>
	<li>Buttons</li>
	<ul style="list-style: none;">
		<li><a class="link-icon" href="/bootstrap-css/#Options"></a>Options</li>
		<li><a class="link-icon" href="/bootstrap-css/#"></a>Sizes</li>
		<li><a class="link-icon" href="/bootstrap-css/#Horizontal form"></a>Horizontal form</li>
		<li><a class="link-icon" href="/bootstrap-css/#Active state"></a>Active state</li>
		<li><a class="link-icon" href="/bootstrap-css/#Disabled state"></a>Disabled state</li>
		<li><a class="link-icon" href="/bootstrap-css/#Buttons Examples"></a>Buttons Examples</li>
	</ul>
	<li>Images</li>
	<ul style="list-style: none;">
		<li><a class="link-icon" href="/bootstrap-css/#Responsive image"></a>Responsive image</li>
		<li><a class="link-icon" href="/bootstrap-css/#Image shapes"></a>Image shapes</li>
	</ul>
	<li>Helper Classes</li>
	<ul style="list-style: none;">
		<li><a class="link-icon" href="/bootstrap-css/#Contextual color"></a>Contextual color</li>
		<li><a class="link-icon" href="/bootstrap-css/#Contextual backgroud"></a>Contextual backgroud</li>
		<li><a class="link-icon" href="/bootstrap-css/#Close icon"></a>Close icon</li>
		<li><a class="link-icon" href="/bootstrap-css/#Caret"></a>Caret</li>
		<li><a class="link-icon" href="/bootstrap-css/#Quick floats"></a>Quick floats</li>
		<li><a class="link-icon" href="/bootstrap-css/#Clear fix"></a>Clear fix</li>
		<li><a class="link-icon" href="/bootstrap-css/#Showing and hiding conten"></a>Showing and hiding conten</li>
		<li><a class="link-icon" href="/bootstrap-css/#Helper Classes Examples"></a>Helper Classes Examples</li>
	</ul>

</ol>
<hr>

<!--more-->

<blockquote>Overview</blockquote>

<a href name="Mobile First"></a>
<div class="title-block">
	<i class="attention"></i>Mobile First
</div>


To ensure proper rendering and touch zooming, add the viewport <code>meta</code> tag:

[html]
<meta name="viewport" content="width=device-width, initial-scale=1">
[/html]

You can disable zooming capabilities on mobile devices by adding user-scalable=no to the viewport <code>meta</code> tag:

[html]
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
[/html]

<a href name="Typography and links"></a>
<div class="title-block">
	<i class="attention"></i>Typography and links
</div>


Bootstrap sets basic global display, typography, and link styles. Specifically, we:

<ul>
	<li>Set <code>background-color: #fff;</code> on the body</li>
	<li>Use the <code>@font-family-base</code>, <code>@font-size-base</code>, and <code>@line-height</code>-base attributes as our typographic base</li>
	<li>Set the global link color via <code>@link-color</code> and apply link underlines only on <code>:hover</code></li>
</ul>

These styles can be found within <code>scaffolding.less	</code>.

<a href name="Normalize.css"></a>
<div class="title-block">
	<i class="attention"></i>Normalize.css
</div>

For improved cross-browser rendering, Bootstrap uses <a href="http://necolas.github.io/normalize.css/">Normalize.css</a>, a project by Nicolas Gallagher and Jonathan Neal.
<hr>

<blockquote>Grid System</blockquote>

<a href name="Media queries"></a>
<div class="title-block">
	<i class="attention"></i>Media queries
</div>

[css]
/* Extra small devices (phones, less than 768px) */
/* No media query since this is the default in Bootstrap */
@media (min-width: @screen-xs-min) { ... }

/* Small devices (tablets, 768px and up) */
@media (min-width: @screen-sm-min) { ... }

/* Medium devices (desktops, 992px and up) */
@media (min-width: @screen-md-min) { ... }

/* Large devices (large desktops, 1200px and up) */
@media (min-width: @screen-lg-min) { ... }
[/css]

Using a single set of <code>.col-md-*</code> grid classes, you can create a basic grid system that starts out stacked on mobile devices and tablet devices (the extra small to small range) before becoming horizontal on desktop (medium) devices. Place grid columns in any <code>.row</code>.

<a href name="Stacked-to-horizontal"></a>
<div class="title-block">
	<i class="attention"></i>Stacked-to-horizontal
</div>

[html]
<div class="row">
  <div class="col-md-1">.col-md-1</div>
  <div class="col-md-1">.col-md-1</div>
  <div class="col-md-1">.col-md-1</div>
  <div class="col-md-1">.col-md-1</div>
  <div class="col-md-1">.col-md-1</div>
  <div class="col-md-1">.col-md-1</div>
  <div class="col-md-1">.col-md-1</div>
  <div class="col-md-1">.col-md-1</div>
  <div class="col-md-1">.col-md-1</div>
  <div class="col-md-1">.col-md-1</div>
  <div class="col-md-1">.col-md-1</div>
  <div class="col-md-1">.col-md-1</div>
</div>
<div class="row">
  <div class="col-md-8">.col-md-8</div>
  <div class="col-md-4">.col-md-4</div>
</div>
<div class="row">
  <div class="col-md-4">.col-md-4</div>
  <div class="col-md-4">.col-md-4</div>
  <div class="col-md-4">.col-md-4</div>
</div>
<div class="row">
  <div class="col-md-6">.col-md-6</div>
  <div class="col-md-6">.col-md-6</div>
</div>
[/html]
<hr>

<a href name="Fluid container"></a>
<div class="title-block">
	<i class="attention"></i>Fluid container
</div>

Turn any fixed-width grid layout into a full-width layout by changing your outermost <code>.container</code> to <code>.container-fluid</code>.

[html]
<html class="container-fluid">
  <div class="row">
    ...
  </div>
</div>
[/html]

<a href name="Offseting columns"></a>
<div class="title-block">
	<i class="attention"></i>Offseting columns
</div>

[html]
<div class="row">
  <div class="col-md-4">.col-md-4</div>
  <div class="col-md-4 col-md-offset-4">.col-md-4 .col-md-offset-4</div>
</div>
<div class="row">
  <div class="col-md-3 col-md-offset-3">.col-md-3 .col-md-offset-3</div>
  <div class="col-md-3 col-md-offset-3">.col-md-3 .col-md-offset-3</div>
</div>
<div class="row">
  <div class="col-md-6 col-md-offset-3">.col-md-6 .col-md-offset-3</div>
</div>
[/html]

Move columns to the right using <code>.col-md-offset-*</code> classes. These classes increase the left margin of a column by * columns. For example, <code>.col-md-offset-4</code> moves <code>.col-md-4</code> over four columns:


<a href name="Grid System Examples"></a>
<div class="title-block">
	<i class="attention"></i>Grid System Examples
</div>

<p data-height="635" data-theme-id="0" data-slug-hash="qLfBk" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/qLfBk/'>Bootstrap CSS: Grids</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>
<hr>

<blockquote>Typography</blockquote>

<a href name="Headings"></a>
<div class="title-block">
	<i class="attention"></i>Headings and Secondary Text
</div>

All HTML headings, <code>h1 through h6</code>, are available. .h1 through .h6 classes are also available, for when you want to match the font styling of a heading but still want your text to be displayed inline.

Create lighter, secondary text in any heading with a generic <code>small</code> tag or the .small class.
[html]
<h1>h1. Bootstrap heading <small>Secondary text</small></h1>
<h2>h2. Bootstrap heading <small>Secondary text</small></h2>
<h3>h3. Bootstrap heading <small>Secondary text</small></h3>
<h4>h4. Bootstrap heading <small>Secondary text</small></h4>
<h5>h5. Bootstrap heading <small>Secondary text</small></h5>
<h6>h6. Bootstrap heading <small>Secondary text</small></h6>
[/html]
<hr>

<a href name="Body copy"></a>
<div class="title-block">
	<i class="attention"></i>Body copy
</div>

Bootstrap's global default <code>font-size</code> is 14px, with a <code>line-height</code> of 1.428. This is applied to the <code>body</code> and all paragraphs. In addition, <code>p</code> (paragraphs) receive a bottom margin of half their computed <code>line-height</code> (10px by default).

Make a paragraph stand out by adding <code>.lead</code>.

[html]
<p class="lead">...</p>
<p> ... </p>
[/html]
<hr>

<a href name="Inline text elements"></a>
<div class="title-block">
	<i class="attention"></i>Inline text elements
</div>

<p data-height="203" data-theme-id="0" data-slug-hash="hoLwb" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/hoLwb/'>Inline text element</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>
<hr>

<a href name="Alignment classes"></a>
<div class="title-block">
<i class="attention"></i>Alignment classes
	<i class="attention"></i>Headings and Secondary Text
</div>

Easily realign text to components with text alignment classes.

[html]
<p class="text-left">Left aligned text.</p>
<p class="text-center">Center aligned text.</p>
<p class="text-right">Right aligned text.</p>
<p class="text-justify">Justified text.</p>
<p class="text-nowrap">No wrap text.</p>
[/html]
<hr>

<a href name="Transformation clases"></a>
<i class="attention"></i>Transformation clases

Transform text in components with text capitalization classes

[html]
<p class="text-lowercase">Lowercased text.</p>
<p class="text-uppercase">Uppercased text.</p>
<p class="text-capitalize">Capitalized text.</p>
<hr>
[/html]

<a href name="Abbreviations"></a>
<div class="title-block">
	<i class="attention"></i>Abbreviations
</div>

Stylized implementation of HTML's <code>abbr</code> element for abbreviations and acronyms to show the expanded version on hover. Abbreviations with a <code>title</code> attribute have a light dotted bottom border and a help cursor on hover, providing additional context on hover.

[html]
<abbr title="attribute">attr</abbr>
[/html]
<hr>

<a href name="Blockquotes"></a>
<div class="title-block">
	<i class="attention"></i>Blockquotes
</div>

For quoting blocks of content from another source within your document.

Add a <code>footer</code> for identifying the source. Add <code>.blockquote-reverse</code> for a blockquote with right-aligned content.
<hr>

<a href name="Lists"></a>
<div class="title-block">
	<i class="attention"></i>Lists
</div>

<p data-height="268" data-theme-id="0" data-slug-hash="oIwkc" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/oIwkc/'>Lists</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>
<hr>

<a href name="Codes"></a>
<div class="title-block">
	<i class="attention"></i>Codes
</div>

Wrap inline snippets of code with <code>code</code>.

[html]
For example, <code>&lt;section&gt;</code> should be wrapped as inline.
[/html]

<a href name="User Input"></a>
<div class="title-block">
	<i class="attention"></i>User Input
</div>

Use the <code>kbd</code> to indicate input that is typically entered via keyboard.

[html]
To switch directories, type <kbd>cd</kbd> followed by the name of the directory.
[/html]
<hr>

<a href name="Basic block"></a>
<div class="title-block">
	<i class="attention"></i>Basic block
</div>

Use <code>&lt;pre&gt;</code> for multiple lines of code. Be sure to escape any angle brackets in the code for proper rendering.

[html]
<pre>&lt;p&gt;Sample text here...&lt;/p&gt;</pre>
[/html]

You may optionally add the <code>.pre-scrollable</code> class, which will set a max-height of 350px and provide a y-axis scrollbar.

<a href name="Varible"></a>
<div class="title-block">
	<i class="attention"></i>Varible
</div>

For indicating variables use the <code>&lt;var&gt;</code> tag.

[html]
<var>y</var> = <var>m</var><var>x</var> + <var>b</var>
[/html]

<a href name="Sample output"></a>
<div class="title-block">
	<i class="attention"></i>Sample output
</div>

For indicating blocks sample output from a program use the <code>&lt;samp&gt;</code> tag.

[html]
<samp>This text is meant to be treated as sample output from a computer program.</samp>
[/html]
<hr>

<a href name="Typography Examples"></a>
<div class="title-block">
	<i class="attention"></i>Typography Examples
</div>

<p data-height="626" data-theme-id="0" data-slug-hash="ILeCa" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/ILeCa/'>Bootstrap CSS: Typography</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

<blockquote>Tables</blockquote>

<a href name="Basic example"></a>
<div class="title-block">
	<i class="attention"></i>Basic example
</div>

For basic styling—light padding and only horizontal dividers—add the base class .table to any <code>table</code>.

[html]
<table class="table">
  ...
</table>
[/html]
<hr>

<a href name="Bordered table"></a>
<div class="title-block">
	<i class="attention"></i>Bordered table
</div>

Add <code>.table-bordered</code> for borders on all sides of the table and cells.

[html]
<table class="table table-bordered">
  ...
</table>
[/html]
<hr>

<a href name="Hover rows"></a>
<div class="title-block">
	<i class="attention"></i>Hover rows
</div>

Add <code>.table-hover</code> to enable a hover state on table rows within a <code>tbody</code>.

[html]
<table class="table table-hover">
  ...
</table>
[/html]
<hr>

<a href name="Condensed table"></a>
<div class="title-block">
	<i class="attention"></i>Condensed table
</div>

Add <code>.table-condensed</code> to make tables more compact by cutting cell padding in half.

[html]
<table class="table table-condensed">
  ...
</table>
[/html]
<hr>

<a href name="Bordered table"></a>
<div class="title-block">
	<i class="attention"></i>Contextual classes
</div>

Use contextual classes to color table rows or individual cells:

[html]
<!-- On rows -->
<tr class="active">...</tr>
<tr class="success">...</tr>
<tr class="warning">...</tr>
<tr class="danger">...</tr>
<tr class="info">...</tr>

<!-- On cells (`td` or `th`) -->
<tr>
  <td class="active">...</td>
  <td class="success">...</td>
  <td class="warning">...</td>
  <td class="danger">...</td>
  <td class="info">...</td>
</tr>
[/html]
<hr>

<a href name="Responsive tables"></a>
<div class="title-block">
	<i class="attention"></i>Responsive tables
</div>

Create responsive tables by wrapping any <code>.table</code> in <code>.table-responsive</code> to make them scroll horizontally on small devices (under 768px). When viewing on anything larger than 768px wide, you will not see any difference in these tables.

[html]
<div class="table-responsive">
  <table class="table">
    ...
  </table>
</div>
[/html]

<a href name="Table Examples"></a>
<div class="title-block">
	<i class="attention"></i>Table Examples
</div>

<p data-height="632" data-theme-id="0" data-slug-hash="wqrFH" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/wqrFH/'>Bootstrap CSS: Tables</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>
<hr>

<blockquote>Forms</blockquote>

<a href name="Basic example"></a>
<div class="title-block">
	<i class="attention"></i>Basic example
</div>

Individual form controls automatically receive some global styling. All textual <code>input</code>, <code>textarea</code>, and <code>select</code> elements with .form-control are set to <code>width: 100%;</code> by default. Wrap labels and controls in <code>.form-group</code> for optimum spacing.

[html]
<form role="form">
  <div class="form-group">
    <label for="exampleInputEmail1">Email address</label>
    <input type="email" class="form-control" id="exampleInputEmail1" placeholder="Enter email">
  </div>
  <div class="form-group">
    <label for="exampleInputPassword1">Password</label>
    <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">
  </div>
  <div class="form-group">
    <label for="exampleInputFile">File input</label>
    <input type="file" id="exampleInputFile">
    <p class="help-block">Example block-level help text here.</p>
  </div>
  <div class="checkbox">
    <label>
      <input type="checkbox"> Check me out
    </label>
  </div>
  <button type="submit" class="btn btn-default">Submit</button>
</form>
[/html]
<hr>

<a href name="Inline form"></a>
<div class="title-block">
	<i class="attention"></i>Inline form
</div>

Add <code>.form-inline</code> to your <code>form</code> for left-aligned and inline-block controls. This only applies to forms within viewports that are at least <code>768px</code> wide.

For these inline forms, you can hide the labels using the <code>.sr-only</code> class.
[html]
<form class="form-inline" role="form">
  <div class="form-group">
    <label class="sr-only" for="exampleInputEmail2">Email address</label>
    <input type="email" class="form-control" id="exampleInputEmail2" placeholder="Enter email">
  </div>
  <div class="form-group">
    <div class="input-group">
      <div class="input-group-addon">@</div>
      <input class="form-control" type="email" placeholder="Enter email">
    </div>
  </div>
  <div class="form-group">
    <label class="sr-only" for="exampleInputPassword2">Password</label>
    <input type="password" class="form-control" id="exampleInputPassword2" placeholder="Password">
  </div>
  <div class="checkbox">
    <label>
      <input type="checkbox"> Remember me
    </label>
  </div>
  <button type="submit" class="btn btn-default">Sign in</button>
</form>
[/html]
<hr>

<a href name="Horizontal form"></a>
<div class="title-block">
	<i class="attention"></i>Horizontal form
</div>

Use Bootstrap's predefined grid classes to align labels and groups of form controls in a horizontal layout by adding <code>.form-horizontal</code> to the form. Doing so changes <code>.form-groups</code> to behave as grid rows, so no need for <code>.row</code>.

[html]
<form class="form-horizontal" role="form">
  <div class="form-group">
    <label for="inputEmail3" class="col-sm-2 control-label">Email</label>
    <div class="col-sm-10">
      <input type="email" class="form-control" id="inputEmail3" placeholder="Email">
    </div>
  </div>
  <div class="form-group">
    <label for="inputPassword3" class="col-sm-2 control-label">Password</label>
    <div class="col-sm-10">
      <input type="password" class="form-control" id="inputPassword3" placeholder="Password">
    </div>
  </div>
  <div class="form-group">
    <div class="col-sm-offset-2 col-sm-10">
      <div class="checkbox">
        <label>
          <input type="checkbox"> Remember me
        </label>
      </div>
    </div>
  </div>
  <div class="form-group">
    <div class="col-sm-offset-2 col-sm-10">
      <button type="submit" class="btn btn-default">Sign in</button>
    </div>
  </div>
</form>
[/html]
<hr>

<a href name="Input focus"></a>
<div class="title-block">
	<i class="attention"></i>Input focus
</div>

We remove the default outline styles on some form controls and apply a <code>box-shadow</code> in its place for <code>:focus</code>:
<hr>

<a href name="Validation states"></a>
<div class="title-block">
	<i class="attention"></i>Validation states
</div>
Bootstrap includes validation styles for error, warning, and success states on form controls. To use, add <code>.has-warning</code>, <code>.has-error</code>, or <code>.has-success</code> to the parent element. Any .control-label, .form-control, and .help-block within that element will receive the validation styles.

You can also add optional feedback icons with the addition of <code>.has-feedback</code> and the right icon.
<hr>

<a href name="Control sizing and help text"></a>
<div class="title-block">
	<i class="attention"></i>Control sizing and help text
</div>

Set heights using classes like <code>.input-lg</code>, and set widths using grid column classes like <code>.col-lg-*</code>.

Wrap inputs in grid columns, or any custom parent element, to easily enforce desired widths.

<p data-height="646" data-theme-id="0" data-slug-hash="kAeGg" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/kAeGg/'>Bootstrap CSS: Forms</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>
<hr>

<blockquote>Buttons</blockquote>

<a href name="Options"></a>
<div class="title-block">
	<i class="attention"></i>Options
</div>

Use any of the available button classes to quickly create a styled button:
[html]
<!-- Standard button -->
<button type="button" class="btn btn-default">Default</button>

<!-- Provides extra visual weight and identifies the primary action in a set of buttons -->
<button type="button" class="btn btn-primary">Primary</button>

<!-- Indicates a successful or positive action -->
<button type="button" class="btn btn-success">Success</button>

<!-- Contextual button for informational alert messages -->
<button type="button" class="btn btn-info">Info</button>

<!-- Indicates caution should be taken with this action -->
<button type="button" class="btn btn-warning">Warning</button>

<!-- Indicates a dangerous or potentially negative action -->
<button type="button" class="btn btn-danger">Danger</button>

<!-- Deemphasize a button by making it look like a link while maintaining button behavior -->
<button type="button" class="btn btn-link">Link</button>
[/html]
<hr>

<a href name="Sizes"></a>
<div class="title-block">
	<i class="attention"></i>Sizes
</div>

Fancy larger or smaller buttons? Add <code>.btn-lg</code>, <code>.btn-sm</code>, or <code>.btn-xs</code> for additional sizes
Create block level buttons—those that span the full width of a parent— by adding <code>.btn-block.</code>
[html]
<p>
  <button type="button" class="btn btn-primary btn-lg">Large button</button>
  <button type="button" class="btn btn-default btn-lg">Large button</button>
</p>
<p>
  <button type="button" class="btn btn-primary">Default button</button>
  <button type="button" class="btn btn-default">Default button</button>
</p>
<p>
  <button type="button" class="btn btn-primary btn-sm">Small button</button>
  <button type="button" class="btn btn-default btn-sm">Small button</button>
</p>
<p>
  <button type="button" class="btn btn-primary btn-xs">Extra small button</button>
  <button type="button" class="btn btn-default btn-xs">Extra small button</button>
</p>
<!-- Block level button -->
<button type="button" class="btn btn-primary btn-lg btn-block">Block level button</button>
<button type="button" class="btn btn-default btn-lg btn-block">Block level button</button>
[/html]
<hr>

<a href name="Active state"></a>
<div class="title-block">
	<i class="attention"></i>Active state
</div>

Buttons will appear pressed (with a darker background, darker border, and inset shadow) when active. For <code>button</code> elements, this is done via <code>:active</code>. For <code>a</code> elements, it's done with <code>.active</code>. However, you may use <code>.active</code> on <code>button</code> should you need to replicate the active state programmatically.
<hr>

<a href name="Disabled state"></a>
<div class="title-block">
	<i class="attention"></i>Disabled state
</div>

Make buttons look unclickable by fading them back 50%.

Add the <code>disabled</code> attribute to <code>button</code> or <code>.disabled</code> class to <code>a</code>:

[html]
<button type="button" class="btn btn-lg btn-primary" disabled="disabled">Primary button</button>
<button type="button" class="btn btn-default btn-lg" disabled="disabled">Button</button>
<!-- Anchors elements -->
<a href="#" class="btn btn-primary btn-lg disabled" role="button">Primary link</a>
<a href="#" class="btn btn-default btn-lg disabled" role="button">Link</a>
[/html]

<p data-height="630" data-theme-id="0" data-slug-hash="Chnep" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/Chnep/'>Bootstrap CSS: Buttons</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>
<hr>

<blockquote>Images</blockquote>

<a href name="Responsive images"></a>
<div class="title-block">
	<i class="attention"></i>Responsive images
</div>

Images in Bootstrap 3 can be made responsive-friendly via the addition of the <code>.img-responsive</code> class. This applies <code>max-width: 100%;</code> and <code>height: auto;</code> to the image so that it scales nicely to the parent element.

[html]
<img src="..." class="img-responsive" alt="Responsive image">
[/html]
<hr>

<a href name="Images shapes"></a>
<div class="title-block">
	<i class="attention"></i>Images shapes
</div>

Add classes to an <code>img</code> element to easily style images in any project:

[html]
<img src="..." alt="..." class="img-rounded">
<img src="..." alt="..." class="img-circle">
<img src="..." alt="..." class="img-thumbnail">
[/html]

<p data-height="268" data-theme-id="0" data-slug-hash="ILkHg" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/ILkHg/'>Images shapes</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>
<hr>

<blockquote>Helper Classes</blockquote>

<a href name="Contextual colors"></a>
<div class="title-block">
	<i class="attention"></i>Contextual colors
</div>

Convey meaning through color with a handful of emphasis utility classes: <code>text-muted</code>, <code>text-primary</code>, <code>text-success</code>, <code>text-info</code>, <code>text-warning</code>, <code>text-danger</code>:

[html]
<p class="text-muted">...</p>
<p class="text-primary">...</p>
<p class="text-success">...</p>
<p class="text-info">...</p>
<p class="text-warning">...</p>
<p class="text-danger">...</p>
[/html]
<hr>

<a href name="Contextual backgrounds"></a>
<div class="title-block">
	<i class="attention"></i>Contextual backgrounds
</div>

Similar to the contextual text color classes, easily set the <code>background</code> of an element to any contextual class. Anchor components will darken on hover, just like the text classes.

[html]
<p class="bg-primary">...</p>
<p class="bg-success">...</p>
<p class="bg-info">...</p>
<p class="bg-warning">...</p>
<p class="bg-danger">...</p>
[/html]

<a href name="Close icon"></a>
<div class="title-block">
	<i class="attention"></i>Close icon
</div>

Use the generic close icon for dismissing content like modals and alerts.

[html]
<button type="button" class="close"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
[/html]

<a href name="Carets"></a>
<div class="title-block">
	<i class="attention"></i>Carets
</div>

Use carets to indicate dropdown functionality and direction.

[html]
<span class="caret"></span>
[/html]
<hr>

<a href name="Quick floats"></a>
<div class="title-block">
	<i class="attention"></i>Quick floats
</div>

Float an element to the left or right with a class. <code>!important</code> is included to avoid specificity issues.
[html]
<div class="pull-left">...</div>
<div class="pull-right">...</div>
[/html]
<hr>

<a href name="Center content blocks"></a>
<div class="title-block">
	<i class="attention"></i>Center content blocks
</div>

Set an element to <code>display: block</code> and center via <code>margin</code>

[html]
<div class="center-block">...</div>
[/html]
<hr>

<a href name="Clearfix"></a>
<div class="title-block">
	<i class="attention"></i>Clearfix
</div>

Easily clear floats by adding <code>.clearfix</code> to the parent element.

[html]
<!-- Usage as a class -->
<div class="clearfix">...</div>
[/html]

<a href name="Showing and hiding content"></a>
<div class="title-block">
	<i class="attention"></i>Showing and hiding content
</div>

Force an element to be shown or hidden (including for screen readers) with the use of <code>.show</code> and <code>.hidden</code> classes.

[html]
<div class="show">...</div>
<div class="hidden">...</div>
[/html]
<hr>

<a href name="Helper Classes Examples"></a>
<div class="title-block">
	<i class="attention"></i>Helper Classes Examples

<p data-height="664" data-theme-id="0" data-slug-hash="zLJKp" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/zLJKp/'>Helper Classes</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>522</wp:post_id>
		<wp:post_date>2014-07-17 20:10:04</wp:post_date>
		<wp:post_date_gmt>2014-07-17 18:10:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bootstrap-css</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bootstrap"><![CDATA[Bootstrap]]></category>
		<category domain="category" nicename="css"><![CDATA[CSS]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3398458376]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Bootstrap: Components</title>
		<link>http://savemyday.in/bootstrap-components/</link>
		<pubDate>Sat, 02 Aug 2014 14:59:51 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=552</guid>
		<description></description>
		<content:encoded><![CDATA[<ul style="list-style: none;">
	<li><a class="link-icon" href="/bootstrap-css/#Icons"></a>Icons</li>
	<li><a class="link-icon" href="/bootstrap-css/#Dropdowns"></a>Dropdowns</li>
	<ul>
    <li><a class="link-icon" href="/bootstrap-css/#Control Dropdown via JavaScript"></a>Control Dropdown via JavaScript</li>
    <li><a class="link-icon" href="/bootstrap-css/#Dropdown Overview"></a>Dropdown Example</li>
	</ul>
	<li><a class="link-icon" href="/bootstrap-css/#Buttons groups"></a>Buttons groups</li>
	<ul>
		<li><a class="link-icon" href="/bootstrap-css/#Buttons group via JavaScript"></a>Buttons group via JavaScript</li>
		<li><a class="link-icon" href="/bootstrap-css/#Buttons group Example"></a>Buttons group Example</li>
	</ul>
	<li><a class="link-icon" href="/bootstrap-css/#Input groups"></a>Input groups</li>
  <ul>
    <li><a class="link-icon" href="/bootstrap-css/#Input groups Examples"></a>Input groups Examples</li>
    <li><a class="link-icon" href="/bootstrap-css/#Buttons groups Example"></a>Buttons groups Example</li>
  </ul>
	<li><a class="link-icon" href="/bootstrap-css/#Navs"></a>Navs</li>

</ul>
<hr>

<!--more-->

<blockquote>Icons</blockquote>

Use them in buttons, button groups for a toolbar, navigation, or prepended form inputs.

<a href name="Icons"></a>
<div class="title-block">
	<i class="attention"></i>Icons Examples
</div>

[html]
<button type="button" class="btn btn-default btn-lg">
  <span class="glyphicon glyphicon-star"></span> Star
</button>
[/html]

<p data-height="268" data-theme-id="0" data-slug-hash="zAupx" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/zAupx/'>Bootstrap Components: Icons Examples</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>
<hr>

<a href="" name="Dropdowns"></a>
<blockquote>Dropdowns</blockquote>

Wrap the dropdown's trigger and the dropdown menu within <code>.dropdown</code>, or another element that declares <code>position: relative;</code>. Then add the menu's HTML:


Via data attributes or JavaScript, the dropdown plugin toggles hidden content (dropdown menus) by toggling the <code>.open</code> class on the parent list item. When opened, the plugin also adds <code>.dropdown-backdrop</code> as a click area for closing dropdown menus when clicking outside the menu.

Call the dropdowns via JavaScript: <code>$('.dropdown-toggle').dropdown()</code> or use <code>data-toggle="dropdown"</code>.

<a href name="Control Dropdown via JavaScript"></a>
<div class="title-block">
	<i class="attention"></i>Control Dropdown via JavaScript: <code>$('.dropdown-toggle').dropdown()</code>
</div>

<a href="http://getbootstrap.com/javascript/#dropdowns-usage">Full list Dropdown methods</a>

<a href name="Dropdowns example"></a>
<div class="title-block">
  <i class="attention"></i>Dropdowns example
</div>

<p data-height="177" data-theme-id="0" data-slug-hash="yoehq" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/yoehq/'>yoehq</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>
<hr>

<a href="" name="Buttons group"></a>
<blockquote>Buttons group</blockquote>

Group a series of buttons together on a single line with the button group

<a href name="Buttons group via JavaScript"></a>
<div class="title-block">
	<i class="attention"></i>Buttons group via JavaScript: <code>$('.btn').button()</code>
</div>

<a href="http://getbootstrap.com/javascript/#buttons-usage">Full list methods</a>
<hr>

<a href name="Buttons group"></a>
<div class="title-block">
  <i class="attention"></i>Buttons group</code>
</div>

<p data-height="637" data-theme-id="0" data-slug-hash="qCbxy" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/qCbxy/'>Bootstrap Components: Buttons Group</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>
<hr>

<blockquote>Input groups</blockquote>

Extend form controls by adding text or buttons before, after, or on both sides of any text-based input. Use <code>.input-group</code> with an <code>.input-group-addon</code> to prepend or append elements to a single <code>.form-control</code>.

<a href name="Input groups Example"></a>
<div class="title-block">
  <i class="attention"></i>Input groups Example</code>
</div>

<p data-height="701" data-theme-id="0" data-slug-hash="Cypci" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/Cypci/'>Bootstrap: Components - Input groups</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>
<hr>

<blockquote>Navs</blockquote>

Navs available in Bootstrap have shared markup, starting with the base <code>.nav</code> class, as well as shared states. Swap modifier classes to switch between each style.


<a href name="Navs via JavaScript"></a>
<div class="title-block">
  <i class="attention"></i>Navs via JavaScript: <code>$('#myTab a').tab()</code>
</div>

<a href="http://getbootstrap.com/javascript/#tabs">Full list methods</a>
<hr>

<a href name="Navs Example"></a>
<div class="title-block">
  <i class="attention"></i>Navs Example</code>
</div>

<p data-height="653" data-theme-id="0" data-slug-hash="ousCl" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/ousCl/'>Bootstrap: Copmonents - Navs</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>
<hr>

Provide pagination links for your site or app with the multi-page pagination component, or the simpler pager alternative.

Simple pagination inspired by Rdio, great for apps and search results. The large block is hard to miss, easily scalable, and provides large click areas.

<a href name="Pagination Example"></a>
<div class="title-block">
  <i class="attention"></i>Pagination Example</code>
</div>

<p data-height="639" data-theme-id="0" data-slug-hash="zwqHv" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/zwqHv/'>Bootstrap: Components - Pagination</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>
<hr>

<blockquote>Labels and Badges</blockquote>

Add any of the below mentioned modifier classes to change the appearance of a label.

<a href name="Labels and Badges Example"></a>
<div class="title-block">
  <i class="attention"></i>Labels and Badges Example</code>
</div>

<p data-height="477" data-theme-id="0" data-slug-hash="Aiywe" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/Aiywe/'>Bootstrap: Components - Labels and Badges</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>
<hr>

<blockquote>Thumbnails</blockquote>

With a bit of extra markup, it's possible to add any kind of HTML content like headings, paragraphs, or buttons into thumbnails.

<a href name="Thumbnails Example"></a>
<div class="title-block">
  <i class="attention"></i>Thumbnails Example</code>
</div>

<p data-height="445" data-theme-id="0" data-slug-hash="rtbqu" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/rtbqu/'>Bootstrap: Components - Thumbnail</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>
<hr>

<blockquote>Alerts</blockquote>

Provide contextual feedback messages for typical user actions with the handful of available and flexible alert messages.

<a href name="Alerts via JavaScript"></a>
<div class="title-block">
  <i class="attention"></i>Alerts via JavaScript: <code>$('.alert').alert()</code>
</div>

<a href="http://getbootstrap.com/javascript/#alerts">Full list methods</a>
<hr>

<a href name="Alerts Example"></a>
<div class="title-block">
  <i class="attention"></i>Alerts Example</code>
</div>

<p data-height="634" data-theme-id="0" data-slug-hash="roLJc" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/roLJc/'>Bootstrap: Components - Alerts</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>
<hr>

<blockquote>Progress Bars</blockquote>

Provide up-to-date feedback on the progress of a workflow or action with simple yet flexible progress bars.

<a href name="Progress Bars Example"></a>
<div class="title-block">
  <i class="attention"></i>Progress Bars Example</code>
</div>

<p data-height="607" data-theme-id="0" data-slug-hash="acvLq" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/acvLq/'>Bootstrap: Components - Progress Bar</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>
<hr>


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>552</wp:post_id>
		<wp:post_date>2014-08-02 16:59:51</wp:post_date>
		<wp:post_date_gmt>2014-08-02 14:59:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bootstrap-components</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bootstrap"><![CDATA[Bootstrap]]></category>
		<category domain="post_tag" nicename="bootstrap"><![CDATA[Bootstrap]]></category>
		<category domain="category" nicename="css"><![CDATA[CSS]]></category>
		<category domain="category" nicename="javascript-2"><![CDATA[Javascript]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3366147519]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>108</wp:comment_id>
			<wp:comment_author><![CDATA[online schools]]></wp:comment_author>
			<wp:comment_author_email>Guisti489000@mail.com</wp:comment_author_email>
			<wp:comment_author_url>http://beonelearning.com</wp:comment_author_url>
			<wp:comment_author_IP>184.95.52.218</wp:comment_author_IP>
			<wp:comment_date>2014-08-22 09:59:14</wp:comment_date>
			<wp:comment_date_gmt>2014-08-22 07:59:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Do you design your own site?  Love the way in which it looks.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[true]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408694354.0721149444580078125;s:7:"message";s:35:"Akismet caught this comment as spam";s:5:"event";s:10:"check-spam";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_pro_tip</wp:meta_key>
				<wp:meta_value><![CDATA[discard]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408892424.164691925048828125;s:7:"message";s:41:"qetr1ck reported this comment as not spam";s:5:"event";s:10:"report-ham";s:4:"user";s:7:"qetr1ck";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user</wp:meta_key>
				<wp:meta_value><![CDATA[qetr1ck]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408892625.437633037567138671875;s:7:"message";s:46:"qetr1ck changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"qetr1ck";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Type conversion for primitives</title>
		<link>http://savemyday.in/type-conversion-for-primitives/</link>
		<pubDate>Fri, 25 Jul 2014 19:28:19 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=559</guid>
		<description></description>
		<content:encoded><![CDATA[Type conversion for primitives
<ul style="list-style: none;">
	<li><a class="link-icon" href="/bootstrap-css/#String Conversion"></a>String Conversion</li>
	<li><a class="link-icon" href="/bootstrap-css/#Number Conversion"></a>Number Conversion</li>
	<li><a class="link-icon" href="/bootstrap-css/#Logical Conversion"></a>Logical Conversion</li>
	<li><a class="link-icon" href="/bootstrap-css/#Examples"></a>Examples</li>
</ul>
<!--more-->

<a href name="String Conversion"></a>
<div class="title-block">
	<i class="attention"></i>String Conversion
</div>

String conversion heppens when you want to view something as a string. For example it makes a function <code>alert</code>:

[javascript]
var a = true;

alert(a); // "true"
[/javascript]

You can also implement the conversion explicitly calling <code>String(val)</code>:

[javascript]
console.log( String(null) === "null" );
[/javascript]

Also for conversion you can use operator binary plus operator<code>"+"</code>, in which one of the arguments string:

[javascript]
console.log( true + "test" ); // "truetest"
console.log( "123" + undefined); // "123undefined"
[/javascript]

<a href name="Number Conversion"></a>
<div class="title-block">
	<i class="attention"></i>Number Conversion
</div>

To convert primetive to the number you can call <code>Number(val)</code>, or in short, to put before the expression unary plus operator <code>"+"</code>:

[javascript]
+"\n123\n"; // 123
Number("\n123\n"); // the same result

+undefined  //NaN
+null 		//0
+true		//false //1 / 2
+'' 		//false
+' ' 		//false
+'string'   //true
+'\n'		//true
[/javascript]

<a href name="Logical Conversion"></a>
<div class="title-block">
	<i class="attention"></i>Logical Conversion
</div>

Converting to <code>true / false</code> in a boolean context occurs, such as <code>if(obj)</code>, <code>while(obj)</code> or with logical operator <code>"!!"</code>.

[javascript]
Boolean(1)              //true
!!undefined,null		//false
!!0,NaN					//false
!!all number except 0 	//true
!!''					//false
!!' '					//true
!!'0'					//true
!!'string'				//true
!![]					//true
!!{}					//true
[/javascript]

<a href name="Examples"></a>
<div class="title-block">
	<i class="attention"></i>Examples:
</div>

[javascript]
"" + 1 + 0 = "10"   // (1)
"" - 1 + 0 = -1   // (2)
true + false = 1
6 / "3" = 2
"2" * "3" = 6
4 + 5 + "px" = "9px"
"$" + 4 + 5 = "$45"
"4" - 2 = 2
"4px" - 2 = NaN
7 / 0 = Infinity
parseInt("09")  = "0" или "9" // (3)
" -9\n" + 5 = " -9\n5"
" -9\n" - 5 = -14
5 && 2 = 2
2 && 5 = 5
5 || 0 = 5
0 || 5 = 5
null + 1 = 1 // (4)
undefined + 1 = NaN // (5)
[/javascript]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>559</wp:post_id>
		<wp:post_date>2014-07-25 21:28:19</wp:post_date>
		<wp:post_date_gmt>2014-07-25 19:28:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>type-conversion-for-primitives</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript-2"><![CDATA[Javascript]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<category domain="post_tag" nicename="primitives"><![CDATA[primitives]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3956623851]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Performance: Javascript adding text to a node</title>
		<link>http://savemyday.in/performance-adding-text-to-a-node/</link>
		<pubDate>Fri, 25 Jul 2014 21:10:14 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=564</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
	<li>jQuery's .html() with previously encoded text</li>
	<li>Query's .text()</li>
	<li>innerHTML with previously encoded text</li>
	<li>innerText / textContent</li>
	<li>document.createTextNode once per element</li>
	<li>document.createTextNode once per test run</li>
</ul>
<!--more-->

<div class="wp-center">
<img src="http://savemyday.in/source/images/perf-addText.png" alt="" width=""/>
</div>
<hr>
SaveMyDay:

<a href="http://jsperf.com/jquery-html-vs-text-vs-innerhtml-vs-innertext-textconte/2">Link on jsPerf</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>564</wp:post_id>
		<wp:post_date>2014-07-25 23:10:14</wp:post_date>
		<wp:post_date_gmt>2014-07-25 21:10:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>performance-adding-text-to-a-node</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript-2"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="jquery"><![CDATA[jQuery]]></category>
		<category domain="post_tag" nicename="performance"><![CDATA[performance]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>106</wp:comment_id>
			<wp:comment_author><![CDATA[online schools]]></wp:comment_author>
			<wp:comment_author_email>Cabana308399@outlook.com</wp:comment_author_email>
			<wp:comment_author_url>http://BeOneLearning.com</wp:comment_author_url>
			<wp:comment_author_IP>184.95.52.218</wp:comment_author_IP>
			<wp:comment_date>2014-08-22 00:42:19</wp:comment_date>
			<wp:comment_date_gmt>2014-08-21 22:42:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You are very courageous to write about this kind of topic but that's what keeps me coming back to see more.  Continue the boldness!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[true]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408660939.26844501495361328125;s:7:"message";s:35:"Akismet caught this comment as spam";s:5:"event";s:10:"check-spam";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_pro_tip</wp:meta_key>
				<wp:meta_value><![CDATA[discard]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408892427.4405229091644287109375;s:7:"message";s:41:"qetr1ck reported this comment as not spam";s:5:"event";s:10:"report-ham";s:4:"user";s:7:"qetr1ck";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user</wp:meta_key>
				<wp:meta_value><![CDATA[qetr1ck]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408892628.2287418842315673828125;s:7:"message";s:46:"qetr1ck changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"qetr1ck";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Operator typeof, [[Class]], instanceof,  Duck Typing and Polmorphism</title>
		<link>http://savemyday.in/operator-typeof-class-instanceof-duck-typing-and-polmorphism/</link>
		<pubDate>Tue, 29 Jul 2014 20:01:59 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=572</guid>
		<description></description>
		<content:encoded><![CDATA[Operator typeof, [[Class]] and duck typing

<ul style="list-style: none;">
	<li><a class="link-icon" href="/operator-typeof-class-instanceof-duck-typing-and-polmorphism/#Operator typeof"></a>Operator <code>typeof</code></li>
	<li><a class="link-icon" href="/operator-typeof-class-instanceof-duck-typing-and-polmorphism/#[[Class]] for objects"></a>[[Class]] for objects</li>
	<li><a class="link-icon" href="/operator-typeof-class-instanceof-duck-typing-and-polmorphism/#Duck Typing"></a>Duck Typing</li>
	<li><a class="link-icon" href="/operator-typeof-class-instanceof-duck-typing-and-polmorphism/#Type checking for user objects"></a>Type checking for user objects (<code>instanceof</code>, <code>Object.getPrototypeOf</code>, <code>constructor.prototype</code>)</li>
	<li><a class="link-icon" href="/operator-typeof-class-instanceof-duck-typing-and-polmorphism/#Polymophism"></a>Polymophism</li>
</ul>
<!--more -->

<a href name="Operator typeof"></a>
<div class="title-block">
	<i class="attention"></i>Operator typeof
</div>

Operator typeof return type of argument. He has two syntax: <code>typeof x</code> and <code>typeof(x)</code>.

[javascript]
typeof undefined // "undefined" 

typeof 0    // "number" 
 
typeof true // "boolean" 

typeof "foo" // "string" 

typeof {} // "object" 
typeof [] // "object" 
typeof new Date // "object" 

typeof null  // "object" 
typeof function(){} // "function" 
[/javascript]

<code>typeof</code> operator works great with primitive types, except null, as well as functions. But ordinary objects, arrays, and date for <code>typeof</code> all look the same, they are of type 'object'.

That's why we can't distinguish them using <code>typeof</code>.

<a href name="[[Class]] for objects"></a>
<div class="title-block">
	<i class="attention"></i>[[Class]] for objects
</div>

[javascript]
var date = new Date,
    arr = [1,2];

console.log({}.toString.call(date)); //[object Object]
console.log({}.toString.call(arr)); //[object Array]

console.log(({}.toString.call(date)).slice(8,-1)); //Object
console.log(({}.toString.call(arr)).slice(8,-1)); //Array
[/javascript]

We use this method because the internal implementation of the Object <code>toString</code> returns the standard <code>[[Class]]</code>. Other objects (Date, Array, etc.) <code>toString</code> her and for this purpose will not work.

This method can give the type only for embedded objects. For user constructors always <code>[[Class]] = "Object"</code>:

[javascript]
function Animal(name) { 
  this.name = name;
}
var animal = new Animal("Винни-пух");

var type = {}.toString.call( animal );

console.log(type); //[object Object]
[/javascript]

<a href name="Duck Typing"></a>
<div class="title-block">
	<i class="attention"></i>Duck Typing
</div>

«If it looks like a duck, swims like a duck and quacks like a duck, then it probably is a duck (who cares what it really is)»

Meaning duck typing - to verify the <code>methods</code> and <code>properties</code>, regardless of the type of object.

[javascript]
//check if array has method split
var x = [1,2,3];

if (x.splice) {
  alert('Array');
}

//check if date has method getTime
var z = new Date();

if (z.getTime) {
  alert('Date!');
}
[/javascript]

<a href name="Type checking for user objects"></a>
<div class="title-block">
	<i class="attention"></i>Type checking for user objects (<code>instanceof</code>, <code>Object.getPrototypeOf</code>, <code>constructor.prototype</code>)
</div>

To check who created the object or his prototype, is the operator:

[javascript]
//check custom objects
function Animal(name) { 
  this.name = name;
}
var animal = new Animal("Bee");

console.log( animal instanceof Animal ); // true
console.log( Object.getPrototypeOf(animal) == Animal.prorotype ); // true
console.log( animal.contstructor.prototype == Animal.prorotype ); // true

//also works for inner objects
var d = new Date(); 
console.log( d instanceof Date ); // true
console.log( Object.getPrototypeOf(d) == Date.prorotype ); // true
console.log( d.contstructor.prototype == Date.prorotype ); // true

function f() { }
console.log( f instanceof Function ); // true
console.log( Object.getPrototypeOf(f) == Function.prorotype ); // true
console.log( f.contstructor.prototype == Function.prorotype ); // true
[/javascript]

<a href name="Polymophism"></a>
<div class="title-block">
	<i class="attention"></i>Polymophism
</div>

<code>Polymorphic</code> functions, ie, those which are differently treated arguments, depending on their type. For example, the output may have a different format numbers and dates.

In example we use type checking to create a <code>polymorphic</code> function <code>sayHi</code>. It will work in three modes:

<ol>
	<li>No arguments: outputs <code>"Hello"</code>.</li>
	<li>With an argument, which is not an array: displays <code>"Hello" + string argument</code></li>
	<li>With an argument, which is an array - <code>"Hello" + arr[i]</code></li>
</ol>

[javascript]
function sayHi(who) {
  if (!arguments.length) {
    console.log('Hello');
    return;
  }

  if ( {}.toString.call(who) == '[object Array]' ) {
    for(var i=0; i<who.length; i++) sayHi(who[i]);
    return;
  }

  console.log('Hello, ' + who);
}

sayHi(); // Hello
sayHi("Bob"); // Hello, Bob

sayHi( ["Bob", ["Sam", "Din"] ] ); // Hello Bob..Sam..Din
[/javascript]

SaveMyDay:
<ul>
<li>on <a href="http://learn.javascript.ru/type-detection">learn.javascript.ru</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>572</wp:post_id>
		<wp:post_date>2014-07-29 22:01:59</wp:post_date>
		<wp:post_date_gmt>2014-07-29 20:01:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>operator-typeof-class-instanceof-duck-typing-and-polmorphism</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="instanceof"><![CDATA[instanceof]]></category>
		<category domain="category" nicename="javascript-2"><![CDATA[Javascript]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<category domain="post_tag" nicename="typeof"><![CDATA[typeof]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3490565206]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>NodeList vc Array in Javascript</title>
		<link>http://savemyday.in/nodelist-vc-array-in-javascript/</link>
		<pubDate>Wed, 30 Jul 2014 20:39:40 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=579</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="wp-center">
<img src="http://savemyday.in/source/images/nodeList.png" alt="" width="600"/>
</div>
<!--more-->

Essentially, a <code>NodeList</code> is what you get when you call any method such as <code> document.getElemetsByTagName()</code>, <code>document.querySelectorAll()</code> and such.

We should note here that <code>NodeLists</code> aren’t exactly part of the JavaScript but they are instead part of the <code>DOM APIs</code> the browsers provide through JavaScript. 

[javascript]
var myList = document.querySelectorAll('.story-item');
console.log(myList)
[
  <div class="story-item">…</div>
  ,
  <div class="story-item">…</div>
  ,
  […]
  ,
  <div class="story-item">..</div>
  ,
]

//basic array actions
console.log(myList.length) // 7
console.log(myList[2]) // <div class="story-item">..</div>
[/javascript]

So far, <code>myList</code> has been talking and walking like an array so we can probably assume that it’s an array of some sorts. However, it all goes to hell when you try to call any of the basic array <code>methods</code>:

[javascript]
myList.slice(2) // indexed from 0

TypeError: Result of expression 'myList.slice' [undefined] is not a function.
[/javascript]

Wait, what happened? Well, this is where the between <code>NodeLists</code> and arrays in JavaScript start to surface. Let’s see what is distinguish <code>array</code> and <code>NodeList</code>: 

[javascript]
console.log(myList.constructor.prototype) // "[object NodeListConstructor]"

var surelyArray = ['foo', 'bar'];

console.log(surelyArray.constructor.prototype) //"function Array() { [native code] }"
[/javascript]

So those two elements, <code>myList</code> and <code>surelyArray</code> are definitely constructed by different constructors so it’s no wonder that they don’t share the same methods.

While <code>arrays</code> are essentially a collection of elements held in memory and are part of the JavaScript, <code>NodeLists</code> are live references to actual DOM elements.

Let’s see a quick way to convert a <code>NodeList</code> into an array:

[javascript]
//borrowing the slice() method from the Array’s prototype
var myArray = Array.prototype.slice.call(myList, 0);

console.log(myArray.constructor.prototype) //"function Array() { [native code] }"

//call pop method
myArray.pop() //<div class="story-item">…</div>

//Internet Explorer 9 cannot handle calling slice() on NodeLists
var myIEArray = [];

for (var i = 0; i < myList.length; ++i) { myIEArray.push(myList[i]); }

console.log(myIEArray.constructor.prototype) //"function Array() { [native code] }"
[/javascript]

One thing is worth mentioning though; when you convert your <code>NodeList</code> into an <code>array</code>, you are no longer dealing with a live <code>NodeList</code> but instead an array of DOM nodes.

SaveMyDay:
<ul>	
  <li>on <a href="http://duruk.net/nodelists-and-arrays-in-javascript/" title="">duruk.net</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>579</wp:post_id>
		<wp:post_date>2014-07-30 22:39:40</wp:post_date>
		<wp:post_date_gmt>2014-07-30 20:39:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nodelist-vc-array-in-javascript</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="array"><![CDATA[Array]]></category>
		<category domain="category" nicename="javascript-2"><![CDATA[Javascript]]></category>
		<category domain="post_tag" nicename="nodelist"><![CDATA[NodeList]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3368309825]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Reading files in Javascript with File API</title>
		<link>http://savemyday.in/reading-files-in-javascript-with-file-api/</link>
		<pubDate>Sat, 02 Aug 2014 13:39:09 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=590</guid>
		<description></description>
		<content:encoded><![CDATA[Reading files in Javascript with File API
<ul style="list-style: none;">
	<li><a class="link-icon" href="/reading-files-in-javascript-with-file-api/#Overview"></a>Overview</li>
	<li><a class="link-icon" href="/reading-files-in-javascript-with-file-api/#Selecting files"></a>Selecting files</li>
	<li><a class="link-icon" href="/reading-files-in-javascript-with-file-api/#Using drag and drop for selecting"></a>Using drag and drop for selecting</li>
	<li><a class="link-icon" href="/reading-files-in-javascript-with-file-api/#Reading files"></a>Reading files</li>
	<li><a class="link-icon" href="/reading-files-in-javascript-with-file-api/#Monitoring the progress of a read"></a>Monitoring the progress of a read</li>
	<li><a class="link-icon" href="/reading-files-in-javascript-with-file-api/#Example: drag and drop files and folders"></a>Example: drag and drop files and folders</li>
</ul>
<!--more-->

<a href name="Overview"></a>
<div class="title-block">
	<i class="attention"></i>Overview
</div>

Using <a href="http://dev.w3.org/2006/webapi/FileAPI/#filereader-interface">File API or filereader interfaces</a> on the client side code can be checked as to whether the MIME type of the uploaded file to its expansion, or set limits on the size.

This spec provides an API for representing file objects in web applications:

<ul>
	<li>A <code>FileList</code> interface, which represents an array of individually selected files from the underlying system. The user interface for selection can be invoked via <code>input type="file" multiple</code></li>
	<li>A <code>File</code> interface, which includes readonly informational attributes about a file such as its name, MIME type, and the date of the last modification</li>
	<li>A <code>Blob</code> interface, which represents immutable raw binary data, and allows access to ranges of bytes within the Blob object as a separate Blob.</li>
	<li>A <code>FileReader</code> interface, which provides methods to read a <code>File</code> or a <code>Blob</code>, and an event model to obtain the results of these reads.</li>
	<li>A <code>URL scheme</code> for use with binary data such as files, so that they can be referenced within web applications.</li>
</ul>

<a href name="Selecting files"></a>
<div class="title-block">
	<i class="attention"></i>Selecting files
</div>

[javascript]
// Check for the various File API support.
if (window.File && window.FileReader && window.FileList && window.Blob) {
  // Great success! All the File APIs are supported.
} else {
  alert('The File APIs are not fully supported in this browser.');
}
[/javascript]

<a href name="Using form input for selecting"></a>
<div class="title-block">
	<i class="attention"></i>Using form input for selecting
</div>

The most straightforward way to load a file is to use a standard <code>input type="file"</code> element. JavaScript returns the list of selected <code>File</code> objects as a <code>FileList</code>. Here's an example that uses the <code>'multiple'</code> attribute to allow selecting several files at once:

[html]
<input type="file" id="files" name="files[]" multiple />
<output id="list"></output>

<script>
  function handleFileSelect(evt) {
    var files = evt.target.files; // FileList object

    // files is a FileList of File objects. List some properties.
    var output = [];
    for (var i = 0, f; f = files[i]; i++) {
      output.push('<li><strong>', escape(f.name), '</strong> (', f.type || 'n/a', ') - ',
                  f.size, ' bytes, last modified: ',
                  f.lastModifiedDate ? f.lastModifiedDate.toLocaleDateString() : 'n/a',
                  '</li>');
    }
    document.getElementById('list').innerHTML = '<ul>' + output.join('') + '</ul>';
  }

  document.getElementById('files').addEventListener('change', handleFileSelect, false);
</script>
[/html]

<p data-height="191" data-theme-id="0" data-slug-hash="nhHCi" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/nhHCi/'>Using form input for selecting</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>
<hr>

<a href name="Using drag and drop for selecting"></a>
<div class="title-block">
	<i class="attention"></i>Using drag and drop for selecting
</div>

Another technique for loading files is native drag and drop from the desktop to the browser. We can modify the previous example slightly to include drag and drop support:

[html]
<div id="drop_zone">Drop files here</div>
<output id="list"></output>

<script>
  function handleFileSelect(evt) {
    evt.stopPropagation();
    evt.preventDefault();

    var files = evt.dataTransfer.files; // FileList object.

    // files is a FileList of File objects. List some properties.
    var output = [];
    for (var i = 0, f; f = files[i]; i++) {
      output.push('<li><strong>', escape(f.name), '</strong> (', f.type || 'n/a', ') - ',
                  f.size, ' bytes, last modified: ',
                  f.lastModifiedDate ? f.lastModifiedDate.toLocaleDateString() : 'n/a',
                  '</li>');
    }
    document.getElementById('list').innerHTML = '<ul>' + output.join('') + '</ul>';
  }

  function handleDragOver(evt) {
    evt.stopPropagation();
    evt.preventDefault();
    evt.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.
  }

  // Setup the dnd listeners.
  var dropZone = document.getElementById('drop_zone');
  dropZone.addEventListener('dragover', handleDragOver, false);
  dropZone.addEventListener('drop', handleFileSelect, false);
</script>
[/html]

<p data-height="268" data-theme-id="0" data-slug-hash="EnsgL" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/EnsgL/'>Using drag and drop for selecting</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>
<hr>

<a href name="Reading files"></a>
<div class="title-block">
	<i class="attention"></i>Reading files
</div>

Now comes the fun part!

After you've obtained a <code>File</code> reference, instantiate a <code>FileReader</code> object to read its contents into memory. When the load finishes, the reader's <code>onload</code> event is fired and its result attribute can be used to access the file data.

<code>FileReader</code> includes four options for reading a file, asynchronously:


FileReader.readAsArrayBuffer(Blob|File) - The result property will contain the file/blob's data as an ArrayBuffer object.

<ul>
	<li><code>FileReader.readAsBinaryString(Blob|File)</code> - The <code>result</code> property will contain the file/blob's data as a binary string. Every byte is represented by an integer in the range [0..255]</li>
	<li><code>FileReader.readAsText(Blob|File, opt_encoding)</code> - The <code>result</code> property will contain the file/blob's data as a text string. By default the string is decoded as 'UTF-8'. Use the optional encoding parameter can specify a different format.</li>
	<li><code>FileReader.readAsDataURL(Blob|File)</code> - The <code>result</code> property will contain the file/blob's data encoded as a data URL.</li>
	<li><code>FileReader.readAsArrayBuffer(Blob|File)</code> - The <code>result</code> property will contain the file/blob's data as an ArrayBuffer object.</li>
</ul>

Once one of these read methods is called on your <code>FileReader</code> object, the <code>onloadstart</code>, <code>onprogress</code>, <code>onload</code>, <code>onabort</code>, <code>onerror</code>, and <code>onloadend</code> can be used to track its progress.

The example below filters out images from the user's selection, calls <code>reader.readAsDataURL()</code> on the file, and renders a thumbnail by setting the <code>'src'</code> attribute to a data URL:

[html]
<style>
  .thumb {
    height: 75px;
    border: 1px solid #000;
    margin: 10px 5px 0 0;
  }
</style>

<input type="file" id="files" name="files[]" multiple />
<output id="list"></output>

<script>
  function handleFileSelect(evt) {
    var files = evt.target.files; // FileList object

    // Loop through the FileList and render image files as thumbnails.
    for (var i = 0, f; f = files[i]; i++) {

      // Only process image files.
      if (!f.type.match('image.*')) {
        continue;
      }

      var reader = new FileReader();

      // Closure to capture the file information.
      reader.onload = (function(theFile) {
        return function(e) {
          // Render thumbnail.
          var span = document.createElement('span');
          span.innerHTML = ['<img class="thumb" src="', e.target.result,
                            '" title="', escape(theFile.name), '"/>'].join('');
          document.getElementById('list').insertBefore(span, null);
        };
      })(f);

      // Read in the image file as a data URL.
      reader.readAsDataURL(f);
    }
  }

  document.getElementById('files').addEventListener('change', handleFileSelect, false);
</script>
[/html]

<p data-height="268" data-theme-id="0" data-slug-hash="sJpmy" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/sJpmy/'>sJpmy</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>
<hr>

<a href name="Monitoring the progress of a read"></a>
<div class="title-block">
	<i class="attention"></i>Monitoring the progress of a read
</div>

One of the nice things that we get for free when using async event handling is the ability to monitor the progress of the file read; useful for large files, catching errors, and figuring out when a read is complete.

The <code>onloadstart</code> and <code>onprogress</code> events can be used to monitor the progress of a read.

[html]
<style>
  #progress_bar {
    margin: 10px 0;
    padding: 3px;
    border: 1px solid #000;
    font-size: 14px;
    clear: both;
    opacity: 0;
    -moz-transition: opacity 1s linear;
    -o-transition: opacity 1s linear;
    -webkit-transition: opacity 1s linear;
  }
  #progress_bar.loading {
    opacity: 1.0;
  }
  #progress_bar .percent {
    background-color: #99ccff;
    height: auto;
    width: 0;
  }
</style>

<input type="file" id="files" name="file" />
<button onclick="abortRead();">Cancel read</button>
<div id="progress_bar"><div class="percent">0%</div></div>

<script>
  var reader;
  var progress = document.querySelector('.percent');

  function abortRead() {
    reader.abort();
  }

  function errorHandler(evt) {
    switch(evt.target.error.code) {
      case evt.target.error.NOT_FOUND_ERR:
        alert('File Not Found!');
        break;
      case evt.target.error.NOT_READABLE_ERR:
        alert('File is not readable');
        break;
      case evt.target.error.ABORT_ERR:
        break; // noop
      default:
        alert('An error occurred reading this file.');
    };
  }

  function updateProgress(evt) {
    // evt is an ProgressEvent.
    if (evt.lengthComputable) {
      var percentLoaded = Math.round((evt.loaded / evt.total) * 100);
      // Increase the progress bar length.
      if (percentLoaded < 100) {
        progress.style.width = percentLoaded + '%';
        progress.textContent = percentLoaded + '%';
      }
    }
  }

  function handleFileSelect(evt) {
    // Reset progress indicator on new file selection.
    progress.style.width = '0%';
    progress.textContent = '0%';

    reader = new FileReader();
    reader.onerror = errorHandler;
    reader.onprogress = updateProgress;
    reader.onabort = function(e) {
      alert('File read cancelled');
    };
    reader.onloadstart = function(e) {
      document.getElementById('progress_bar').className = 'loading';
    };
    reader.onload = function(e) {
      // Ensure that the progress bar displays 100% at the end.
      progress.style.width = '100%';
      progress.textContent = '100%';
      setTimeout("document.getElementById('progress_bar').className='';", 2000);
    }

    // Read in the image file as a binary string.
    reader.readAsBinaryString(evt.target.files[0]);
  }

  document.getElementById('files').addEventListener('change', handleFileSelect, false);
</script>
[/html]

<p data-height="268" data-theme-id="0" data-slug-hash="GKbhy" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/GKbhy/'>Monitoring the progress of a read</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>


<a href name="Example: drag and drop files and folders"></a>
<div class="title-block">
	<i class="attention"></i><a href="http://savemyday.in/examples/drag-and-drop-files-and-folders/index.html">Example: drag and drop files and folders</a>
</div>


SaveMyDay:
<ul>
	<li>on <a href="http://www.html5rocks.com/en/tutorials/file/dndfiles/">html5rocks.com</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>590</wp:post_id>
		<wp:post_date>2014-08-02 15:39:09</wp:post_date>
		<wp:post_date_gmt>2014-08-02 13:39:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>reading-files-in-javascript-with-file-api</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="file-api"><![CDATA[File API]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="category" nicename="javascript-2"><![CDATA[Javascript]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3462451294]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>107</wp:comment_id>
			<wp:comment_author><![CDATA[click here]]></wp:comment_author>
			<wp:comment_author_email>Legrow201014@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://beonelearning.com</wp:comment_author_url>
			<wp:comment_author_IP>184.95.52.218</wp:comment_author_IP>
			<wp:comment_date>2014-08-22 02:23:41</wp:comment_date>
			<wp:comment_date_gmt>2014-08-22 00:23:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You've some very nice ideas. Maintain the great work.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[true]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408667021.3021919727325439453125;s:7:"message";s:35:"Akismet caught this comment as spam";s:5:"event";s:10:"check-spam";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408892425.95810794830322265625;s:7:"message";s:41:"qetr1ck reported this comment as not spam";s:5:"event";s:10:"report-ham";s:4:"user";s:7:"qetr1ck";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user</wp:meta_key>
				<wp:meta_value><![CDATA[qetr1ck]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408892627.5912969112396240234375;s:7:"message";s:46:"qetr1ck changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"qetr1ck";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>CSS Transforms</title>
		<link>http://savemyday.in/css-transforms/</link>
		<pubDate>Sun, 03 Aug 2014 20:13:20 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=601</guid>
		<description></description>
		<content:encoded><![CDATA[<ul style="list-style: none;">
	<li><a class="link-icon" href="/bootstrap-css/#How to use transforms"></a>How to use transforms</li>
	<li><a class="link-icon" href="/bootstrap-css/#2D examples"></a>2D examples</li>
	<li><a class="link-icon" href="/bootstrap-css/#3D examples"></a>3D examples</li>
	<li><a class="link-icon" href="/bootstrap-css/#3D Transform image slider"></a>3D Transform image slider</li>
</ul>

<!--more-->

<a href name="How to use transforms"></a>
<div class="title-block">
	<i class="attention"></i>How to use transforms
</div>

There are two categories of transform - <code>2D transforms</code> and <code>3D transforms</code>. 2D transforms are more widely supported, whereas 3D transforms are only in newer browers.

<a href name="2D examples"></a>
<div class="title-block">
	<i class="attention"></i>2D examples
</div>

[css]
//don't forget about prefixes
#skew {
  -webkit-transform:skew(35deg);
   -moz-transform:skew(35deg);
    -ms-transform:skew(35deg);
     -o-transform:skew(35deg);
        transform:skew(35deg);
}
#scale {
  -webkit-transform:scale(1,0.5);
   -moz-transform:scale(1,0.5);
    -ms-transform:scale(1,0.5);
     -o-transform:scale(1,0.5);
        transform:scale(1,0.5);
}
#rotate {
  -webkit-transform:rotate(45deg);
   -moz-transform:rotate(45deg);
    -ms-transform:rotate(45deg);
     -o-transform:rotate(45deg);
        transform:rotate(45deg);
}
#translate {
  -webkit-transform:translate(10px, 20px);
   -moz-transform:translate(10px, 20px);
    -ms-transform:translate(10px, 20px);
     -o-transform:translate(10px, 20px);
        transform:translate(10px, 20px);
}

.thumbnail {
  -webkit-transition: all .5s ease-in;
  -moz-transition: all .5s ease-in;  
  -o-transition: all .5s ease-in;
  transition: all .5s ease-in;
}
[/css]

<p data-height="494" data-theme-id="0" data-slug-hash="BGAaf" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/BGAaf/'>CSS Transforms: 2D examples</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>
<hr>

<a href name="3D examples"></a>
<div class="title-block">
	<i class="attention"></i>3D examples and hadle <code>onTransitionEnd</code>
</div>

3D CSS transforms are similar to 2D CSS transforms. The basic properties are <code>translate3d</code>, <code>scale3d</code>, <code>rotateX</code>, <code>rotateY</code> and <code>rotateZ</code>. <code>translate3d</code> and <code>scale3d</code> take three arguments for x,y and z, whereas the rotates just take an angle. Here are some examples:

[css]
#rotateX{
-webkit-transform:rotateX(180deg);
   -moz-transform:rotateX(180deg);
    -ms-transform:rotateX(180deg);
     -o-transform:rotateX(180deg);
        transform:rotateX(180deg);
}
#rotateY{
-webkit-transform:rotateY(180deg);
   -moz-transform:rotateY(180deg);
    -ms-transform:rotateY(180deg);
     -o-transform:rotateY(180deg);
        transform:rotateY(180deg);
}
#rotateZ{
-webkit-transform:rotateZ(180deg);
   -moz-transform:rotateZ(180deg);
    -ms-transform:rotateZ(180deg);
     -o-transform:rotateZ(180deg);
        transform:rotateZ(180deg);
}
[/css]

[javascript]
$('.thumbnail').on('transitionend webkitTransitionEnd MSTransitionEnd', function(e) {
  //transitionend fires for each property transitioned
  if (e.originalEvent.propertyName != 'transform') return;
  
  alert('webkitTransitionEnd')
});
[/javascript]

<p data-height="473" data-theme-id="0" data-slug-hash="CDrkj" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/CDrkj/'>CSS Transforms: 3D example and transtionEnd</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>
<hr>

<a href name="3D Transform image slider"></a>
<div class="title-block">
	<i class="attention"></i>3D Transform image slider
</div>

Note that because of the way a cube works, the image is moved out towards the screen, and is bigger than it should be. You should move it back by <code>half</code> the width of an image to make sure it is normal size.

<p data-height="536" data-theme-id="0" data-slug-hash="GgCah" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/GgCah/'>CSS Transforms: 3D Transform image slider</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

SaveMyDay:
<ul>
	<li>on <a href="http://css3.bradshawenterprises.com/transforms/">css3.bradshawenterprises.com</a></li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>601</wp:post_id>
		<wp:post_date>2014-08-03 22:13:20</wp:post_date>
		<wp:post_date_gmt>2014-08-03 20:13:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>css-transforms</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="css"><![CDATA[CSS]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<category domain="post_tag" nicename="transform"><![CDATA[Transform]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3437391401]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Performance: Javascript loops</title>
		<link>http://savemyday.in/performance-javascript-loops/</link>
		<pubDate>Wed, 06 Aug 2014 18:38:48 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=607</guid>
		<description></description>
		<content:encoded><![CDATA[<ul style="list-style: none;">
	<li><a class="link-icon" href="/bootstrap-css/#forEach"></a>forEach</li>
	<li><a class="link-icon" href="/bootstrap-css/#for loop, simple"></a>for loop, simple</li>
    <li><a class="link-icon" href="/bootstrap-css/#for loop, cached length"></a>for loop, cached length</li>
    <li><a class="link-icon" href="/bootstrap-css/#for loop, reverse"></a>for loop, reverse</li>
	<li><a class="link-icon" href="/bootstrap-css/#for loop, cached length, callback"></a>for loop, cached length, callback</li>
	<li><a class="link-icon" href="/bootstrap-css/#$.each"></a>$.each</li>
	<li><a class="link-icon" href="/bootstrap-css/#for ... in"></a>for ... in</li>
    <li><a class="link-icon" href="/bootstrap-css/#for loop, reverse decrement"></a>for loop, reverse decrement</li>
    <li><a class="link-icon" href="/bootstrap-css/#other crazy loops"></a>other crazy loops</li>
</ul>

<!--more-->

Is it faster to use the native forEach or just loop with for?

Obviously, the most faster loop is for with cashed array length. But in my case it was ordinary for loop :)

Also I was confused that Array.forEach method is slowest more than 89% from classic for loop... 

Screenshot from jsperf: 

<div class="wp-center">
	<img src="http://savemyday.in/source/images/performaceArray.png" alt="" />
</div>
<hr>

SaveMyDay:
<ul>
	<li>on <a href="http://jsperf.com/for-vs-foreach/37">jsperf.com</a></li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>607</wp:post_id>
		<wp:post_date>2014-08-06 20:38:48</wp:post_date>
		<wp:post_date_gmt>2014-08-06 18:38:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>performance-javascript-loops</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="array"><![CDATA[Array]]></category>
		<category domain="category" nicename="javascript-2"><![CDATA[Javascript]]></category>
		<category domain="post_tag" nicename="perforamance"><![CDATA[Perforamance]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3791775584]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>112</wp:comment_id>
			<wp:comment_author><![CDATA[distance learning]]></wp:comment_author>
			<wp:comment_author_email>Virgili380566@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://beonelearning.com/</wp:comment_author_url>
			<wp:comment_author_IP>184.95.52.218</wp:comment_author_IP>
			<wp:comment_date>2014-08-23 23:55:40</wp:comment_date>
			<wp:comment_date_gmt>2014-08-23 21:55:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Could you give advice on how to produce a great website like yours?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[true]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408830940.5501880645751953125;s:7:"message";s:35:"Akismet caught this comment as spam";s:5:"event";s:10:"check-spam";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408892419.243421077728271484375;s:7:"message";s:41:"qetr1ck reported this comment as not spam";s:5:"event";s:10:"report-ham";s:4:"user";s:7:"qetr1ck";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user</wp:meta_key>
				<wp:meta_value><![CDATA[qetr1ck]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408892459.747520923614501953125;s:7:"message";s:46:"qetr1ck changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"qetr1ck";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Structuring Javascript Code</title>
		<link>http://savemyday.in/structuring-javascript-code/</link>
		<pubDate>Wed, 06 Aug 2014 21:03:07 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=617</guid>
		<description></description>
		<content:encoded><![CDATA[<ul style="list-style: none;">
	<li><a class="link-icon" href="/structuring-javascript-code/#Why do we need Javascript Pattern"></a>Why do we need Javascript Pattern</li>
	<li><a class="link-icon" href="/structuring-javascript-code/#Funtion Spagetti Code"></a>Funtion Spagetti Code</li>
    <li><a class="link-icon" href="/structuring-javascript-code/#Closure to rescue"></a>Closure to rescue</li>
    <li><a class="link-icon" href="/structuring-javascript-code/#Prototype Pattern"></a>Prototype Pattern</li>
	<li><a class="link-icon" href="/structuring-javascript-code/#Module Pattern"></a>Module Pattern</li>
	<li><a class="link-icon" href="/structuring-javascript-code/#Revealing Module Pattern"></a>Revealing Module Pattern</li>
	<li><a class="link-icon" href="/structuring-javascript-code/#Revealing Prototype Pattern"></a>Revealing Prototype Pattern</li>
</ul>

<!--more-->

Throughout the orticle I’ll show how closures and other techniques can be used to better organize JavaScript code and make it easier to re-use and maintain in HTML5 applications.

<a href name="Why do we need Javascript Pattern"></a>
<div class="title-block">
	<i class="attention"></i>Why do we need Javascript Pattern
</div>

A <code>pattern</code> is a reusable solution that can be applied to commonly occurring problems in software design - in our case - in writing JavaScript web applications. Another way of looking at patterns are as templates for how we solve problems - ones which can be used in quite a few different situations.

<ol>
	<li><code>Patterns are proven solutions</code>: They provide solid approaches to solving issues in software development using proven techniques that reflect the experience and insights the developers that helped define them bring to the pattern.</li>
	<li><code>Patterns can be easily reused</code>: A pattern usually reflects an out of the box solution that can be adapted to suit our own needs. This feature makes them quite robust.</li>
	<li><code>Patterns can be expressive</code>: When we look at a pattern there’s generally a set structure and vocabulary to the solution presented that can help express rather large solutions quite elegantly.</li>
</ol>


<a href name="Funtion Spagetti Code"></a>
<div class="title-block">
	<i class="attention"></i>Funtion Spagetti Code
</div>

Problems with Function Spaghetti Code:

<ul>
	<li>Varible / function added into global scope</li>
	<li>Potential for dublicate functional name</li>
	<li>Problem with adding 3th party library</li>
	<li>Not modular</li>
	<li>Not easy to maintain</li>
	<li>No sense of a "container" (separate file aka classes in java or c#)</li>
</ul>

<a href name="Closure to rescue"></a>
<div class="title-block">
	<i class="attention"></i>Closure to rescue
</div>

"... an inner function always has access to the vars and parrameters of its outer function, even after the outer function has returned." by <code>Douglas Crockford</code>.

Non-Closure Example:
[javascript]
function nonClosure() {
	//encapsulation
	var date = new Date(); //Varible lost after function returns

	return date.getMilliseconds();
}
[/javascript]

Closure function:
[javascript]
function trueClosure() {
	//encapsulation
	var date = new Date(); //Varible stays around even after function returns

	//nested function (!)
	return function() {
		return date.getMilliseconds();
	}
}
[/javascript]

Closure function example2:
[javascript]
function trueClosure() {
	//encapsulation
	var date = new Date(); //Varible stays around even after function returns
	//nested function (!)
	function getTime() {
		return date.getMilliseconds();
	}

	return {
		getTime: getTime
	}
}
[/javascript]
<hr>

<a href name="Prototype Pattern"></a>
<div class="title-block">
	<i class="attention"></i>Prototype Pattern
</div>

Pros:

<ul>
	<li>Leverage Javascript built-in features (allows to extend existing object)</li>
	<li>"Modularize" (Encapsulate) code into re-usable objects</li>
	<li>Varible / function taken out of global namespace</li>
	<li>Function loaded into memory <code>once</code></li>
	<li>Easy to maintain</li>
	<li>Possible to "override" function (method) through prototyping</li>
</ul>

Cons: 

<ul>
	<li>"this" can be triky</li>
	<li>Constructor separate from prototype definition</li>
</ul>

[javascript]
//using namespace
var appNS = appNS || {};

function appNS.Calculator(eq) {
	this.eqCtl = document.getElementById(eq);
}

appNS.Calculator.prototype = {
	add: function(x, y) {
		var val = x + y;
		this.eqCtl.innerHTML = val;
	}
	//...
}

//create instance of Calculator
var calc = new appNS.Calculator('eqCrl')
calc.add(2,2)

//override add method
Calculator.prototype.add = function() {
	//new logic
}
[/javascript]
<hr>

<a href name="Module Pattern"></a>
<div class="title-block">
	<i class="attention"></i>Module Pattern
</div>

Pros:

<ul>
	<li>"Modularize" (Encapsulate) code into re-usable objects</li>
	<li>Varible / function taken out of global namespace</li>
	<li>Expose only public members while hiding private members</li>
</ul>

Cons: 

<ul>
	<li>Function may duplicated across objects in memory when not using singelton</li>
	<li>Each object instance create new copies of functions in memory</li>
	<li>Not ease to extend</li>
</ul>

[javascript]
//using namespace
var appNS = appNS || {};

appNS.Claculator = function() {
	//private varibles
	//private function
	var eqCtl = document.getElementById(eq);

	return {
		//public mmembers
		add: function(x, y) {
			var val = x + y;
			this.eqCtl.innerHTML = val;
		}
	}
}
//create instance of Calculator
var calc = new appNS.Calculator('eqCrl')
calc.add(2,2)
[/javascript]
<hr>

<a href name="Revealing Module Pattern"></a>
<div class="title-block">
	<i class="attention"></i>Revealing Module Pattern
</div>

Pros:

<ul>
	<li>"Modularize" (Encapsulate) code into re-usable objects</li>
	<li>Varible / function taken out of global namespace</li>
	<li>Expose only public members</li>
	<li>"Cleaner" way to expose public members</li>
	<li>Good choice gor singelton</li>
</ul>

Cons: the same as <a href="/structuring-javascript-code/#Module Pattern">Module Pattern</a>

[javascript]
//using namespace
var appNS = appNS || {};

appNS.calculator = function(eq) {
    //privite members
    var eqCtl = document.getElementById(eq),
	add = function(x, y) {
		var val = x + y;
		eqCtl.innerHTML = val;
	}

    return {
	add: add  //expose public members
    }
}()

appNS.calculator.add(2,2);
[/javascript]
<hr>

<a href name="Revealing Prototype Pattern"></a>
<div class="title-block">
	<i class="attention"></i>Revealing Prototype Pattern
</div>

Pros:

<ul>
	<li>Combines Prototype and Reaviling Module patters</li>
	<li>"Modularize" (Encapsulate) code into re-usable objects</li>
	<li>Varible / function taken out of global namespace</li>
	<li>Expose only public members</li>
	<li>Function loaded into memory once</li>
</ul>

Cons:

Cons: the same as <a href="/structuring-javascript-code/#Prototype Pattern">Prototype Pattern</a>

[javascript]
//using namespace
var appNS = appNS || {};

function appNS.Calculator(eq) {
	this.eqCtl = document.getElementById(eq);
}

appNS.Calculator.prototype = {
	var add = function(x, y) {
		var val = x + y;
		this.eqCtl.innerHTML = val;
	};

	return {
		add: add
	}
}();

//create instance of Calculator
var calc = new appNS.Calculator('eqCrl')
calc.add(2,2)

//override add method
Calculator.prototype.add = function() {
	//new logic
}
[/javascript]
<hr>

SaveMyDay:
<ul>
	<li>on <a href="http://beta.pluralsight.com/courses/structuring-javascript">pluralsight.com</a></li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>617</wp:post_id>
		<wp:post_date>2014-08-06 23:03:07</wp:post_date>
		<wp:post_date_gmt>2014-08-06 21:03:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>structuring-javascript-code</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript-2"><![CDATA[Javascript]]></category>
		<category domain="post_tag" nicename="module"><![CDATA[Module]]></category>
		<category domain="post_tag" nicename="pattern"><![CDATA[Pattern]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<category domain="post_tag" nicename="prototype"><![CDATA[Prototype]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3391123602]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Maybe, You don&#039;t need jQuery</title>
		<link>http://savemyday.in/maybe-you-dont-need-jquery/</link>
		<pubDate>Sun, 10 Aug 2014 16:08:20 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=623</guid>
		<description></description>
		<content:encoded><![CDATA[You don't need jQuery

<ul style="list-style: none;">
	<li><a class="link-icon" href="/maybe-you-dont-need-jquery/#When shoud I use jQuery"></a>When shoud I use jQuery</li>
	<li><a class="link-icon" href="/maybe-you-dont-need-jquery/#Alternative Libraries"></a>Alternative Libraries</li>
	<li><a class="link-icon" href="/maybe-you-dont-need-jquery/#Native Selectors"></a>Native Selectors
	<ul style="list-style: none;">
		<li><a class="link-icon" href="/maybe-you-dont-need-jquery/#Selectors"></a>Selectors</li>
		<li><a class="link-icon" href="/maybe-you-dont-need-jquery/#Each"></a>Each</li>
		<li><a class="link-icon" href="/maybe-you-dont-need-jquery/#Index(eq)"></a>Index(eq)</li>
		<li><a class="link-icon" href="/maybe-you-dont-need-jquery/#First, Last"></a>First, Last</li>
		<li><a class="link-icon" href="/maybe-you-dont-need-jquery/#Is(Matches)"></a>Is(Matches)</li>
		<li><a class="link-icon" href="/maybe-you-dont-need-jquery/#Filter"></a>Filter</li>
		<li><a class="link-icon" href="/maybe-you-dont-need-jquery/#Next, Prev"></a>Next, Prev</li>
		<li><a class="link-icon" href="/maybe-you-dont-need-jquery/#Closest"></a>Closest</li>
	</ul>
	</li>
	<li><a class="link-icon" href="/maybe-you-dont-need-jquery/#Native DOM Manipulation"></a>Native DOM Manipulation</li>
	<ul style="list-style: none;">
		<li><a class="link-icon" href="/maybe-you-dont-need-jquery/#HTML & Text"></a>HTML & Text</li>
		<li><a class="link-icon" href="/maybe-you-dont-need-jquery/#Append & Prepend"></a>Append & Prepend</li>
		<li><a class="link-icon" href="/maybe-you-dont-need-jquery/#CSS"></a>CSS</li>
		<li><a class="link-icon" href="/maybe-you-dont-need-jquery/#Attributes and Property"></a>Attributes and Property</li>
		<li><a class="link-icon" href="/maybe-you-dont-need-jquery/#Value"></a>Value</li>
		<li><a class="link-icon" href="/maybe-you-dont-need-jquery/#Height & Width"></a>Height & Width</li>
	</ul>
	<li><a class="link-icon" href="/maybe-you-dont-need-jquery/#Native Events"></a>Native Events</li>
	<ul style="list-style: none;">
		<li><a class="link-icon" href="/maybe-you-dont-need-jquery/#Bind & Unbind"></a>Bind & Unbind</li>
		<li><a class="link-icon" href="/maybe-you-dont-need-jquery/#Delegation"></a>Delegation</li>
		<li><a class="link-icon" href="/maybe-you-dont-need-jquery/#Prevent Default & Stop Propation"></a>Prevent Default & Stop Propation</li>
		<li><a class="link-icon" href="/maybe-you-dont-need-jquery/#Trigger"></a>Trigger</li>
		<li><a class="link-icon" href="/maybe-you-dont-need-jquery/#DOM Ready"></a>DOM Ready</li>
	</ul>
	<li><a class="link-icon" href="/maybe-you-dont-need-jquery/#Native Ajax"></a>Native Ajax</li>
	<ul style="list-style: none;">
		<li><a class="link-icon" href="/maybe-you-dont-need-jquery/#Ajax Get"></a>Ajax Get</li>
		<li><a class="link-icon" href="/maybe-you-dont-need-jquery/#Ajax Post"></a>Ajax Post</li>
		<li><a class="link-icon" href="/maybe-you-dont-need-jquery/#JSONP"></a>JSONP</li>
		<li><a class="link-icon" href="/maybe-you-dont-need-jquery/#Micro-Library"></a>Micro-Library</li>
	</ul>
	<li><a class="link-icon" href="/maybe-you-dont-need-jquery/#Native Utilities"></a>Native Utilities</li>
	<ul style="list-style: none;">
		<li><a class="link-icon" href="/maybe-you-dont-need-jquery/#Data"></a>Data</li>
		<li><a class="link-icon" href="/maybe-you-dont-need-jquery/#Each, Grep, Map"></a>Each, Grep, Map</li>
	</ul>
	
</ul>

<!--more-->

<a href name="When shoud I use jQuery"></a>
<div class="title-block">
	<i class="attention"></i>When shoud I use jQuery
</div>

<ol>
	<li>Do you need a quick prototype or proof of concept?</li>
	<li>Do you use jQuety plugin?</li>
		<ul>
			<li>jQuery Plugins, jQuery Widgets, Twitter Bootstrap, etc...</li>
		</ul>
	<li>Do you use a Library or Fremework than depends on jQuery?</li>
		<ul>
			<li>Backbone.js, Ember.js, etc...</li>
		</ul>
	<li>Do any of your browser not <a href="https://gist.github.com/speedsticko/7453837">"Cut the mustard"</a> (come up to expectations, reach the required standard) ?</li>
	<li>Featured not supported Netievly in <= IE8</li>
	<ul>
		<li>document.qeurySelector(IE limited to CSS 2.1 selectors)</li>
		<li>addEventListener (IE9+)</li>
		<li>dispatchEvent(IE9+)</li>
		<li>Mathes</li>
		<li>ECMAScript 5 (bind, forEach, filter, map... IE9+)</li>
		<li>classList (IE10+)</li>
		<li>CSS3 Animation (IE9+)</li>
	</ul>
</ol>

<a href name="Alternative Libraries"></a>
<div class="title-block">
	<i class="attention"></i>Alternative Libraries
</div>

<ul>
	<li><a href="http://zeptojs.com/">Zepto.js</a></li>
		<ul>
			<li>v1.1.4 - 9.7k gzip & largely jQuery-compatible API</li>
			<li>Doesn't support IE10 or below</li>
		</ul>
	<li><a href="https://github.com/remy/min.js/">Min.js</a></li>
		<ul>
			<li>Very minimalistic & jQuery-like API</li>
			<li>~60 lines of code with comments</li>
		</ul>
	
</ul>

<a href name="Native Selectors"></a>
<a href name="Selectors"></a>
<div class="title-block">
	<i class="attention"></i>Native Selectors
</div>

jQuery:
<ul>
	<li><code>$('#datepicker')</code></li>
	<li><code>$('input')</code></li>
	<li><code>$('.date')</code></li>
	<li><code>$('input.date')</code></li>
</ul>

Native :
<ul>
	<li><code>document.getElementById('datepicker')</code></li>
	<li><code>document.getElementsByTagName('input')</code></li>
	<li><code>document.getElementsByClassName('.date')</code></li>
	<li><code>document.querySelectorAll('input.date')</code></li>
	<li><code>document.querySelector('input.date')</code></li>
</ul>

<a href name="Each"></a>
<div class="title-block">
	<i class="attention"></i>Each
</div>

Each jQuery:

[javascript]
$('input.date').each(function(el, i) {
	$(el).text('Hello ' + i);
})
[/javascript]

Each Native #1: 

[javascript]
var nodes = document.querySelectorAll('input.date');

for (var i = 0; i < nodes.lenght; i++) {
	nodes[i].innerText = 'Hello ' + i;
}
[/javascript]

Each Native #2: 

[javascript]
var nodes = document.querySelectorAll('input.date'),
	elems = [].slice.call(nodes);

elems.forEach(function(el, i) {
	el.innerText('Hello ' + i);
});
[/javascript]

Each Native #3:

[javascript]
var nodes = document.querySelectorAll('input.date');

[].forEach.call(nodes, function(el, i) {
	el.innerText('Hello ' + i);
});
[/javascript]

Each Native #4: 

[javascript]
function $$(selector) {
	return [].slice.call(selector)
}

$$('input.date').forEach(function(el, i) {
	el.innerText('Hello ' + i);
});
[/javascript]
<hr>

<a href name="Index(eq)"></a>
<div class="title-block">
	<i class="attention"></i>Index(eq)
</div>

Index(eq) jQuery:

[javascript]
$(div.date).eq(3)    //return $ object
$(div.date).get(3)
$(div.date)[3] 
[/javascript]

Index Native:

[javascript]
document.querySelectorAll('div.date').item(3)
document.querySelectorAll('input.date')[3]
[/javascript]
<hr>

<a href name="First, Last"></a>
<div class="title-block">
	<i class="attention"></i>First, Last
</div>

First, Last jQuery:

[javascript]
var $dates = $('.dates');

$dates.first();    //return $ object
$dates.eq(0);      //return $ object
$dates.get(0);
$dates[0];

$dates.last();    //return $ object
$dates.eq(-1);    //return $ object
$dates.get(-1);
$dates[$dates.length - 1];
[/javascript]

First, Last Native:

[javascript]
var dates = document.querySelectorAll('.dates');

dates.firstChild
dates[0];
document.querySelector('.dates');

dates.lastChild
date[date.length - 1];
[].pop.call(date);
[/javascript]
<hr>

<a href name="Is(Matches)"></a>
<div class="title-block">
	<i class="attention"></i>Is(Matches)
</div>

Is jQuery:

[javascript]
$('#widget').is('.active');
[/javascript]

Is(match) Native:

[javascript]
document.getElentById('widget').matches('.active');

//matches polyfil;
if (Element && !Element.prototype.matches) {
    var proto = Element.prototype;
    proto.matches = proto.matchesSelector ||
        proto.mozMatchesSelector || proto.msMatchesSelector ||
        proto.oMatchesSelector || proto.webkitMatchesSelector;
}
[/javascript]
<hr>

<a href name="Filter"></a>
<div class="title-block">
	<i class="attention"></i>Filter
</div>

Filter jQuery:

[javascript]
var dates = $(.dates);

//dates.filter('[pattern]');

dates.filter('.active')
[/javascript]

Filter Native:

[javascript]
var dates = [].slice.call(document.querySelectorAll('.dates'));

//dates.filter('[pattern]');

dates = dates.filter(function(el, i) {
	el.matches('.active')
});
[/javascript]
<hr>

<a href name="Find"></a>
<div class="title-block">
	<i class="attention"></i>Find
</div>

Find jQuery:

[javascript]
$('#widget').find('.favorites');
$('ul').find('.favorites');
[/javascript]

Find Native:

[javascript]
document.getElementById('widget').querySelectorAll('.favorites');
[/javascript]
<hr>

<a href name="Next, Prev"></a>
<div class="title-block">
	<i class="attention"></i>Next, Prev
</div>

Next, Prev jQuery:

[javascript]
var elem = $('#widget'),
	prev = elem.prev(),
	next = elem.next();
[/javascript]

Next, Prev Native:

[javascript]
var elem = document.getElementById('widget'),
	prev = elem.previousElemntSibling,
	next = elem.nextElemntSibling;

[/javascript]
<hr>

<a href name="Closest"></a>
<div class="title-block">
	<i class="attention"></i>Closest
</div>

[javascript]
$('#widget').('.active');
[/javascript]

Closest Native:

[javascript]
closest(document.getElementById('widget'), '.active')

function closest(elem, selector) {

   var matchesSelector = elem.matches || elem.webkitMatchesSelector || elem.mozMatchesSelector || elem.msMatchesSelector;

    while (elem) {
        if (matchesSelector.bind(elem)(selector)) {
            return elem;
        } else {
            elem = elem.parentElement;
        }
    }
    return false;
}
[/javascript]
<hr>

<a href name="Native DOM Manipulation"></a>
<a href name="Classes"></a>
<div class="title-block">
	<i class="attention"></i>Classes
</div>

More information about Class Minipulation in my article - <a href="http://savemyday.in/class-manipulation-in-javascript-jquery-and-angularjs/">Class manipulation in Javascript, jQuery and AngularJS</a>

Class manipulation in <=IE9

[javascript]
document.querySelector('.widget').className += ' active';
document.querySelector('.widget').className = ' ';
[/javascript]

For polyfill <code>ClassList</code> use this <a href="https://github.com/remy/polyfills/blob/master/classList.js">one</a>.
<hr>

<a href name="HTML & Text"></a>
<div class="title-block">
	<i class="attention"></i>HTML & Text
</div>

jQuery:

[javascript]
var $widget = $('#widget');

$widget.html('<b>Hello from jQuery!</b>');	//Setter
$widget.html();								//Getter
$widget.text('Bye from jQuery!');			
$widget.text();
[/javascript]

Native:

[javascript]
var widget = document.getElementById('widget');

widget.innerHTML = '<b>Hello from Native!</b>'	//Setter
widget.innerHTML;								//Getter
widget.innerText = 'Bye from Native!';
widget.innerText;
[/javascript]

<a href name="Append & Prepend"></a>
<div class="title-block">
	<i class="attention"></i>Append & Prepend
</div>

jQuery:

[javascript]
$('#widget').append('<div>Hello from jQuery!</div>');
$('#widget').append('<div>Bye from jQuery!</div>');
[/javascript]

Native:

[javascript]
var widget = document.getElementById('widget'),
	appendEl = document.createElement('div'),
	prependdEl = document.createElement('div');

widget.appendChild(appendEl);
widget.insertBefore(prependEl, appendEl.children[0]);
[/javascript]

<a href name="Remove"></a>
<div class="title-block">
	<i class="attention"></i>Remove
</div>

jQuery:

[javascript]
var $widget = $('#widget');

$widget.empty();
$widget.html('');
$widget.remove();
[/javascript]

Native:

[javascript]
var widget = document.getElementById('widget');

widget.innerHTML = '';
widget.parentNode.removeChild(widget);
while (widget.lastChild)
	widget.removeChild(widget.lastChild);
[/javascript]
<hr>

<a href name="CSS"></a>
<div class="title-block">
	<i class="attention"></i>CSS
</div>

jQuery:

[javascript]
var $widget = $('#widget');

$widget.css('color', 'aquamarine');
$widget.css({
	fontSize: '2em',
	'-webkit-transform': 'rotate(45deg)',
	'transition': 'all .5s easy-in'
	});
$widget.remove();
[/javascript]

Native:

[javascript]
var widget = document.getElementById('widget');

widget.css.color = 'aquamarine';
widget.css[fontSize varible] = '2em';
[/javascript]
<hr>

<a href name="Attributes and Property"></a>
<div class="title-block">
	<i class="attention"></i>Attributes and Property
</div>

jQuery:

[javascript]
var $widget = $('#search-main'),
	$toggle = $('#toogle-checkbox'),
	$link = $('#link-awesome');

$widget.attr('placeholder', 'Search Here ...');
$widget.attr();

$toggle.prop('checked', true);
$toggle.prop();

$link.attr('href'); // .pages/about.html
$link.prop('href'); // http://domain.com/pages/about.html
[/javascript]

Native:

[javascript]
var widget = document.getElementById('widget'),
	toogle = document.getElementById('toogle-checkbox'),
	link = document.getElementById('toogle-checkbox');

widget.setAttribute('placeholder', 'Search Here ...');
widget.setAttribute();

toogle.checked = true;
toogle.checked;

link.getAttribute('href'); // .pages/about.html
link.href; 				   // http://domain.com/pages/about.html
[/javascript]
<hr>

<a href name="Value"></a>
<div class="title-block">
	<i class="attention"></i>Value
</div>

jQuery:

[javascript]
var $widget = $('#search-main');
	
$widget.val('Hello, new value!');
$widget.val();
[/javascript]

Native:

[javascript]
var widget = document.getElementById('search-main');
	
widget.value = 'Hello, new value!'
$widget.value;
[/javascript]
<hr>

<a href name="Height & Width"></a>
<div class="title-block">
	<i class="attention"></i>Height & Width
</div>

jQuery:

[javascript]
var $container = $('#container');
	
$container.width();
$container.innerWidth();
$container.outerWidth();
[/javascript]

Native:

[javascript]
var container = document.getElementById('search-main');
	
container.clientWidth;
container.offsetWidth;
box.getBoundingClientRect().width;
[/javascript]
<hr>

<a href name="Native Events"></a>
<a href name="Bind and Unbind"></a>
<div class="title-block">
	<i class="attention"></i>Bind and Unbind
</div>

jQuery:

[javascript]
$('#foo-btn').click(function() {});
$('#foo-btn').on('click', function() {});
$('#foo-btn').bind('click', function() {});

$(.btn-active).on('click', function() {});

//unbind
var el = $('#bar-btn');

el.off();
el.off('click');
el.off('click', nameOfCallback);
[/javascript]

Native:

[javascript]
var btn = document.getElementById('foo-btn');
	btnsActive = document.querySelectorAll('.foo-active'),
	cachingCallback = function(){};

btn.addEventListener('click', function() {});

[].forEach.call(btnsActive, function(el) {
	el.addEventListener('click', cachingCallback);
})

//unbind
btn.removeEventListener('click', nameOfCallback);

[].forEach.call(btnsActive, function(el) {
	el.removeEventListener('click', nameOfCallback);
})
[/javascript]
<hr>

<a href name="Delegation"></a>
<div class="title-block">
	<i class="attention"></i>Delegation
</div>

jQuery:

[javascript]
$('#menu').on('click', 'li' function() {});
[/javascript]


Native:

[javascript]
document.getElementById('menu').addEventListener('click', function(ev) {
	if (ev.target.tagName != 'LI') return;

	//or
	if (ev.target.matches(.active)) {
		//...
	}
});
[/javascript]
<hr>

<a href name="Prevent Default & Stop Propation"></a>
<div class="title-block">
	<i class="attention"></i>Prevent Default & Stop Propation
</div>

jQuery:

[javascript]
$('submit-form').on('click', function(ev) {
	ev.preventDefault();
	ev.stopPropation();
});
[/javascript]

Native:

[javascript]
document.getElementById('#submit-form').addEventListener('click', function(ev) {
	ev.preventDefault();
	ev.stopPropation();
});
[/javascript]
<hr>

<a href name="Trigger"></a>
<div class="title-block">
	<i class="attention"></i>Trigger
</div>

jQuery:

[javascript]
$('menu').on('click', function(ev, arg1, arg2) {
	console.log(ev, arg1, arg2);
});

$('menu').trigger('click');
$('menu').trigger('click', ['arg1', 'arg2']);
[/javascript]

Native:

[javascript]
document.getElementById('#menu').addEventListener('click', function(ev, arg1, arg2) {
	console.log(ev, arg1, arg2)
});

var event = new Event('click');
document.getElementById('#menu').dispatchEvent(event);

var event = new CustomEvent('click', {
	detail: ['arg1', 'arg2']
});
document.getElementById('#menu').dispatchEvent(event);
[/javascript]

<a href name="DOM Ready"></a>
<div class="title-block">
	<i class="attention"></i>DOM Ready
</div>

jQuery:

[javascript]
$(document).ready(function() {
	//DOM is ready
});

$(function() {
	//DOM is ready
})
[/javascript]

Native #1:

[html]
<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>Document</title>
</head>
<body>
	
	<script>
		//DOM is ready
	</script>
</body>
</html>
[/html]

Native #2:

[javascript]
document.addEventListener('DOMContentLoaded', function() {
	//DOM is ready
})
[/javascript]
<hr>

<a href name="Native Ajax"></a>
<a href name="Ajax Get"></a>
<div class="title-block">
	<i class="attention"></i>Ajax Get
</div>

jQuery #1:

[javascript]
$.get('url', function(data) {
	console.log(data);
});

$.get(
	'url',
	{name: 'foo'},
	function(data) {
		console.log(date);
	}
)
[/javascript]

jQuery #2:

[javascript]
$.ajax({
	type: 'GET',
	url: 'url',
	data: {name: 'foo'},
	success: function(data) {
		console.log(date);
	}
})
[/javascript]

Native:

[javascript]
var xhr = new XMLHttRequest();

xhr.open('GET', 'url' + 'name=foo', true);
xhr.onload = function() {
	if (this.status === 200)
		console.log(this.responseText);
};
xhr.send();
[/javascript]

<a href name="Ajax Post"></a>
<div class="title-block">
	<i class="attention"></i>Ajax Post
</div>

jQuery #1:

[javascript]
$.post('url', function(data) {
	console.log(data);
});

$.post(
	'url',
	{name: 'foo'},
	function(data) {
		console.log(date);
 )
[/javascript]

jQuery #2:

[javascript]
$.ajax({
	type: 'POST',
	url: 'url',
	data: {name: 'foo'},
	success: function(data) {
		console.log(date);
	}
})
[/javascript]

Native #1:

[javascript]
var xhr = new XMLHttRequest();

xhr.open('POST', 'url', true);
xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded')
xhr.onload = function() {
	if (this.status === 200)
		console.log(this.responseText);
};
xhr.send('name=bob&age=26');
[/javascript]

http://beta.pluralsight.com/courses/jquery-free-javascript
http://beta.pluralsight.com/courses/csharp-fundamentals-csharp5

Native #2:

[html]
<form enctype="multipart/form-data" method="post" name="fileinfo">
  <label>Your email address:</label>
  <input type="email" autocomplete="on" autofocus name="userid" placeholder="email" required size="32" maxlength="64" /><br />
  <label>Custom file label:</label>
  <input type="text" name="filelabel" size="12" maxlength="32" /><br />
  <label>File to stash:</label>
  <input type="file" name="file" required />
  <input type="submit" value="Stash the file!" />
</form>
<div id="output"></div>
[/html]

[javascript]
var form = document.forms.namedItem("fileinfo");
form.addEventListener('submit', function(ev) {

  var
    oOutput = document.getElementById("output"),
    oData = new FormData(document.forms.namedItem("fileinfo"));

  oData.append("CustomField", "This is some extra data");

  var oReq = new XMLHttpRequest();
  oReq.open("POST", "stash.php", true);
  oReq.onload = function(oEvent) {
    if (oReq.status == 200) {
      oOutput.innerHTML = "Uploaded!";
    } else {
      oOutput.innerHTML = "Error " + oReq.status + " occurred uploading your file.<br \/>";
    }
  };

  oReq.send(oData);
  ev.preventDefault();
}, false);
[/javascript]

<a href name="JSONP"></a>
<div class="title-block">
	<i class="attention"></i>JSONP
</div>

jQuery #1:

[javascript]
$.getJSON('http://domain.io/jsonp?callback=?',
 function(data) {
	console.log(data);
});

jQuery #2:

[javascript]
$.ajax({
	url: 'url',
	dataTepe: 'jsonp',
	success: function(data) {
		console.log(date);
	}
})
[/javascript]

Native:

[javascript]
function jsonpCallback(data) {
	console.log(data)
}

var script = document.creatElement('script');
script.src = 'http://exampleDomain.io/jsonp?callback=jsonpCallback';
document.head.appendChils(script);
[/javascript]

<a href name="Micro-Library"></a>
<div class="title-block">
	<i class="attention"></i>Micro-Library
</div>

Reqwest on <a href="https://github.com/ded/reqwest">link</a>
<hr>

<a href name="Native Utilities"></a>
<blockquote>Native Utilities</blockquote>

<a href name="Data"></a>
<div class="title-block">
	<i class="attention"></i>Data
</div>

[html]
<div id="contact" data-contact-name="sammy">Sam Winchester</div>
<p id="comment" data-option="{'color': 'red', 'margin': '10px'}"></p>
[/html]

jQuery:

[javascript]
$('contact').data('contactName');
$('contact').attr('contact-name');

$('comment').data('option'); //object

$('contact').data('contactName', 'newValue');
[/javascript]

Native #1:

[javascript]
var contact = document.getElementById('contact'),
	comment = document.getElementById('comment'),
	user = {name: 'Sam', lname: 'Winchester'};

contact.getAttribute('data-contact-name');
contact.setAttribute('data-contact-name', 'newValue');

comment.setAttribute('data-contact-name', JSON.stringify(user))
[/javascript]

Native #2:

[javascript]
var contact = document.getElementById('contact'),

contact.dataset.contactName;
contact.dataset.contactName = 'newValue';
[/javascript]
<hr>

<a href name="Each, Grep, Map"></a>
<div class="title-block">
	<i class="attention"></i>Each, Grep, Map
</div>

jQuery:

[javascript]
$.each(arr, function(el) {
	console.log(el.name + ' ' + el.id);
})

arr = $.grep(arr.function(el) {
	return el.matches('Script')
})

arr = $.map(arr, function(el) {
	return {
		nickname: el.name,
		secretCode: el.age,
		age: Date.now()
	};
});
[/javascript]

Native:

[javascript]
arr.forEach(function(el) {
	console.log(el.name + ' ' + el.id);
});

arr = arr.filter(function(el) {
	return el.matches('Script')
});

arr = arr.map(function(el) {
	return {
		nickname: el.name,
		secretCode: el.age,
		age: Date.now()
	};
});
[/javascript]

Or you can use Undersore or Low-Dash <code>_.each</code>.
<hr>

<a href name="In Array"></a>
<div class="title-block">
	<i class="attention"></i>In Array
</div>

[html]
var arr = ['foo', 'bar', 'baz'];
[/html]

jQuery:

[javascript]
console.log('Found Bar: ' + !!~arr.inArray('bar'));
[/javascript]

Native:

[javascript]
console.log('Found Bar: ' + !!~arr.indexOf('bar'));
[/javascript]
<hr>

<a href name="Trim"></a>
<div class="title-block">
	<i class="attention"></i>Trim
</div>

jQuery:

[javascript]
$.trim('   look at me, I"m padded!   ');
[/javascript]

Native:

[javascript]
'   look at me, I"m padded!   '.trim();
[/javascript]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>623</wp:post_id>
		<wp:post_date>2014-08-10 18:08:20</wp:post_date>
		<wp:post_date_gmt>2014-08-10 16:08:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>maybe-you-dont-need-jquery</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="category" nicename="javascript-2"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="jquery"><![CDATA[jQuery]]></category>
		<category domain="post_tag" nicename="jquery"><![CDATA[jQuery]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<wp:postmeta>
			<wp:meta_key>_oembed_d59a6ebce5d75f74d48e9535b42ac57f</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_934dc1696d14c107484b86fe26b3e104</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3335452039]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Off-canvas icon navigation with an animated border effect</title>
		<link>http://savemyday.in/off-canvas-icon-navigation-with-an-animated-border-effect/</link>
		<pubDate>Mon, 11 Aug 2014 19:11:48 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=626</guid>
		<description></description>
		<content:encoded><![CDATA[<ul style="list-style: none;">
	<li><a class="link-icon" href="/off-canvas-icon-navigation-with-an-animated-border-effect/#The Markup"></a>The Markup</li>
	<li><a class="link-icon" href="/off-canvas-icon-navigation-with-an-animated-border-effect/#The CSS"></a>The CSS</li>
	<li><a class="link-icon" href="/off-canvas-icon-navigation-with-an-animated-border-effect/#The Javascript"></a>The Javascript</li>
	<li><a class="link-icon" href="/off-canvas-icon-navigation-with-an-animated-border-effect/#View Demo"></a>View Demo</li>
</ul>

<div class="wp-center">
<img src="http://savemyday.in/source/images/animated-border-menus.png" alt="" width="600"/>
</div>

<!--more-->
<div class="demo">
	<a href="/examples/AnimatedBorderMenus/index2.html"><span class="icon-film" style="padding-right: 10px; font-size: 18px;"></span>View demo</a>
</div>

<a href name="The Markup"></a>
<div class="title-block">
	<i class="attention"></i>The Markup
</div>

The HTML structure for our menu will consist of a <code>nav</code> element that will contain a <code>trigger anchor</code> and an unordered list with the menu items which will consist of icons:

[html]
<nav id="bt-menu" class="bt-menu">
    <a href="#" class="bt-menu-trigger"><span>Menu</span></a>
    <ul>
        <li><a href="#" class="bt-icon icon-zoom">Zoom</a></li>
        <li><a href="#" class="bt-icon icon-refresh">Refresh</a></li>
        <li><a href="#" class="bt-icon icon-lock">Lock</a></li>
        <li><a href="#" class="bt-icon icon-speaker">Sound</a></li>
        <li><a href="#" class="bt-icon icon-star">Favorite</a></li>
    </ul>
</nav>
[/html]

<a href name="The CSS"></a>
<div class="title-block">
	<i class="attention"></i>The CSS
</div>

Let’s use the border-box box-sizing:

[css]
*,
*:after,
*::before {
    box-sizing: border-box;
}
[/css]

And let’s set some styles for the body and the main container:

[css]
body  {
    background: #04a466;
}
 
.container {
    padding: 80px;
}
[/css]

The padding will help providing some space around our content so that when the border appears, we guarantee that there is enough space around.

The main menu element will have position <code>fixed</code> so that, no matter where we are in the page, the border is always around the viewport. We set an initial <code>border</code> style which we will transition to a bigger border. Setting the initial <code>height</code> to 0 will make sure that the menu does not cover anything initially. The “backward” or closing height <code>transition</code> will have a delay of 0.3s:

[css]
.bt-menu {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 0;
    border-width: 0px;
    border-style: solid;
    border-color: #333;
    background-color: rgba(0,0,0,0);
    transition: border-width 0.3s, background-color 0.3s, height 0s 0.3s;
}
[/css]

When we open the menu, we’ll set the <code>height</code> to 100% (but we won’t transition that property) and the <code>border will</code> animate to 90px on the left side and 30px on all the other sides. The <code>background color</code> will be semi-transparent using an RGBA value:

[css]
.bt-menu.bt-menu-open {
    height: 100%;
    border-width: 30px 30px 30px 90px;
    background-color: rgba(0,0,0,0.3);
    transition: border-width 0.3s, background-color 0.3s;
}
[/css]

Now we have to use a little trick. We will add another <code>element</code> using JavaScript which will server as a dummy container covering the whole page except the border. This will allow us to distinguish where we are clicking in order to close the whole thing. We don’t want the menu to close when clicking on the border but only when clicking in the space between:

[css]
.bt-overlay {
    position: absolute;
    width: 100%;
}
[/css]

When we open the menu, this element will have full <code>height</code>:

[css]
.bt-menu-open .bt-overlay {
    height: 100%;
}
[/css]

Let’s style that little <code>trigger element</code>. We’ll give it a <code>fixed</code> position and we’ll show it in the <code>top left corner</code> of the page:

[css]
.bt-menu-trigger {
    position: fixed;
    top: 15px;
    left: 20px;
    display: block;
    width: 50px;
    height: 50px;
    cursor: pointer;
}
[/css]

The <code>trigger anchor</code> itself will serve as a container and the span will be the middle line of our hamburger menu icon. So we position it in the middle by setting the <code>top</code> to 50% and giving it a negative top <code>margin</code> of half of its height:

[css]
.bt-menu-trigger span {
    position: absolute;
    top: 50%;
    left: 0;
    display: block;
    width: 100%;
    height: 4px;
    margin-top: -2px;
    background-color: #fff;
    font-size: 0px;
    user-select: none;
    transition: background-color 0.3s;
}
[/css]

When opening the menu, we will make a cross out of the icon. The other two lines will be created by pseudo-elements and when the menu is open, the middle line will disappear:

[css]
.bt-menu-open .bt-menu-trigger span {
    background-color: transparent;
}
[/css]

Now, let’s create the two other lines. The pseudo-elements will be <code>positioned</code> absolutely and their <code>height</code> is going to be the same like of their parent by setting it to 100%:

[css]
.bt-menu-trigger span:before,
.bt-menu-trigger span:after {
    position: absolute;
    left: 0;
    width: 100%;
    height: 100%;
    background: #fff;
    content: '';
    transition: transform 0.3s;
}
[/css]

For positioning them correctly, we’ll use <code>translateY</code>:

[css]
.bt-menu-trigger span:before {
    transform: translateY(-250%);
}
 
.bt-menu-trigger span:after {
    transform: translateY(250%);
}
[/css]

The cross will be formed when opening the menu by setting the <code>translateY</code> to 0 and rotating the pseudo-elements accordingly:

[css]
.bt-menu-open .bt-menu-trigger span:before {
    transform: translateY(0) rotate(45deg);
}
 
.bt-menu-open .bt-menu-trigger span:after {
    transform: translateY(0) rotate(-45deg);
}
[/css]

The <code>unordered list</code> with our icons will also have a <code>fixed</code> position and we’ll set it to the left side of the window:

[css]
.bt-menu ul {
    position: fixed;
    top: 75px;
    left: 0;
    margin: 0;
    padding: 0;
    width: 90px;
    list-style: none;
    backface-visibility: hidden;
}
[/css]
Let’s set the list items and the anchors to <code>display: block</code> and give them full width:

[css]
.bt-menu ul li,
.bt-menu ul li a {
    display: block;
    width: 100%;
    text-align: center;
}
[/css]

Each list item will be hidden initially and the <code>opacity</code> will be 0. The “backward” transition of the visibility will be delayed until all the other <code>transitions</code> of the transform and the opacity are finished:

[css]
.bt-menu ul li {
    padding: 16px 0;
    opacity: 0;
    visibility: hidden;
    transition: transform 0.3s, opacity 0.2s, visibility 0s 0.3s;
}
[/css]

Now we will transform each of the list items differently so that they are all placed in the <code>middle</code> and to the left until they are hidden (-100% on the Y axis):

[css]
.bt-menu ul li:first-child { 
    transform: translate3d(-100%,200%,0);
}
 
.bt-menu ul li:nth-child(2) { 
    transform: translate3d(-100%,100%,0);
}
 
.bt-menu ul li:nth-child(3) { 
    transform: translate3d(-100%,0,0);
}
 
.bt-menu ul li:nth-child(4) { 
    transform: translate3d(-100%,-100%,0);
}
 
.bt-menu ul li:nth-child(5) { 
    transform: translate3d(-100%,-200%,0);
}
[/css]

When opening the menu, the list items will become <code>visible</code> (instantly, because we are not setting a transition for it) and they will fade in. They will also move to their original positions by setting the <code>transform3d</code> to 0 for all axes:

[css]
.bt-menu.bt-menu-open ul li {
    visibility: visible;
    opacity: 1;
    transition: transform 0.3s, opacity 0.3s;
    transform: translate3d(0,0,0);
}
[/css]

Now, let’s style the anchors. We will use an icon font and include the font reference and the icon classes in another CSS which will be provided by a service like <a href="http://app.fontastic.me/">Fontastic</a> or the <a href="https://icomoon.io/app">IcoMoon app</a>.

By setting the <code>font size</code> of the anchor to 0 and make it transparent, we’ll hide the text:

[css]
.bt-menu ul li a {
    display: block;
    outline: none;
    color: transparent;
    text-decoration: none;
    font-size: 0px;
}
[/css]

We’ll reset the <code>font size</code> for the pseudo-element which contains the icon. We’ll need to use a pixel-based value because the main element has a font-size of 0 so ems won’t work here:

.bt-menu ul li a:before {
    color: #04a466;
    font-size: 48px;
    transition: color 0.2s;
}

On <code>hover</code> we’ll make them white:

[css]
.bt-menu ul li a:hover:before,
.bt-menu ul li a:focus:before  {
    color: #fff;
}
[/css]

And last, but not least, we want the icons to be smaller on mobile screens:

[css]
@media screen and (max-height: 31.125em) {
    .bt-menu ul li a:before {
        font-size: 32px;
    }
}
[/css]

<a href name="The Javascript"></a>
<div class="title-block">
	<i class="attention"></i>The Javascript
</div>

Our script is pretty straightforward; when we click on the trigger anchor, we toggle the class <code>bt-menu-open</code> and <code>bt-menu-close</code> on the <code>nav</code> element.

When we click on the <code>overlay</code>, we will close the menu. We’ll also add some touch support:

[javascript]
(function() {
 
    // http://stackoverflow.com/a/11381730/989439
    function mobilecheck() {
        var check = false;
        (function(a){if(/(android|ipad|playbook|silk|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4)))check = true})(navigator.userAgent||navigator.vendor||window.opera);
        return check;
    }
 
    function init() {
 
        var menu = document.getElementById( 'bt-menu' ),
            trigger = menu.querySelector( 'a.bt-menu-trigger' ),
            // event type (if mobile, use touch events)
            eventtype = mobilecheck() ? 'touchstart' : 'click',
            resetMenu = function() {
                classie.remove( menu, 'bt-menu-open' );
                classie.add( menu, 'bt-menu-close' );
            },
            closeClickFn = function( ev ) {
                resetMenu();
                overlay.removeEventListener( eventtype, closeClickFn );
            };
 
        var overlay = document.createElement('div');
        overlay.className = 'bt-overlay';
        menu.appendChild( overlay );
 
        trigger.addEventListener( eventtype, function( ev ) {
            ev.stopPropagation();
            ev.preventDefault();
             
            if( classie.has( menu, 'bt-menu-open' ) ) {
                resetMenu();
            }
            else {
                classie.remove( menu, 'bt-menu-close' );
                classie.add( menu, 'bt-menu-open' );
                overlay.addEventListener( eventtype, closeClickFn );
            }
        });
 
    }
 
    init();
 
})();
[/javascript]

<a href name="View Demo"></a>
<div class="title-block">
	<i class="attention"></i>View Demo
</div>

<div class="demo">
	<a href="/examples/AnimatedBorderMenus/index2.html"><span class="icon-film" style="padding-right: 10px; font-size: 18px;"></span>View demo</a>
</div>

SaveMyDay:
<ul>
	<li>on <a href="http://tympanus.net/codrops/2013/09/30/animated-border-menus/">tympanus.net</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>626</wp:post_id>
		<wp:post_date>2014-08-11 21:11:48</wp:post_date>
		<wp:post_date_gmt>2014-08-11 19:11:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>off-canvas-icon-navigation-with-an-animated-border-effect</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="canvas-off-menu"><![CDATA[Canvas-off menu]]></category>
		<category domain="category" nicename="javascript-2"><![CDATA[Javascript]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3381844554]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Article Intro Effects Examples</title>
		<link>http://savemyday.in/article-intro-effects-examples/</link>
		<pubDate>Tue, 19 Aug 2014 10:46:59 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=658</guid>
		<description></description>
		<content:encoded><![CDATA[Most of the effects we tried are highly experimental; animating large images can become a bit sluggish, also because a couple of transitions happening at the same time. The effect gets triggered when <code>scrolling begins</code>  or when the <code>button is clicked</code>.

The images in the demos are from amazing <a href="http://unsplash.com/">Unsplash</a> , a fantastic place to find high-quality public domain photos.

<!--more-->
<div class="demo">
	<a href="/examples/Article-Intro-Effects/index.html"><span class="icon-film" style="padding-right: 10px; font-size: 18px;"></span>View demo</a>
</div>

The first effect pushes the image to the top together with the title, and a new title element slides in with the content.

<div class="wp-center">
<img src="/source/images/Article-Intro-Effects/article-info-effects-1.png" alt="" />
</div>
<hr>

The second demo shows the effect that fades out the image at the bottom and fades in the resting content. We do this by using a pseudo element with a linear gradient.

<div class="wp-center">
<img src="/source/images/Article-Intro-Effects/article-info-effects-2.gif" alt="" />
</div>
<hr>

The third effect slices the main image into two where the first half moves up and the second one slides down, giving space for the title to enlarge.

<div class="wp-center">
<img src="/source/images/Article-Intro-Effects/article-info-effects-3.gif" alt="" />
</div>
<hr>

The forth effect cuts away the image and pushes the title to the side.

<div class="wp-center">
<img src="/source/images/Article-Intro-Effects/article-info-effects-4.gif" alt="" />
</div>
<hr>

The fifth effect is similar to the previous one but here we fix the image to the side and allow the content to flow on the right hand side

<div class="wp-center">
<img src="/source/images/Article-Intro-Effects/article-info-effects-5.gif" alt="" />
</div>
<hr>

The next demo moves the image up and reveals a grid where the current main image will scale up into the grid. This could be a great idea for showing related posts right in the header.

<div class="wp-center">
<img src="/source/images/Article-Intro-Effects/article-info-effects-6.gif" alt="" />
</div>
<hr>

 The last effect is an attempt to imitate the cool effect - the fullscreen image becomes a top bar and the content slides in.

<div class="wp-center">
<img src="/source/images/Article-Intro-Effects/article-info-effects-7.gif" alt="" />
</div>
<hr>

SaveMyDay:
<ul>
	<li>on <a href=" http://tympanus.net/codrops/2014/05/22/inspiration-for-article-intro-effects/">tympanus.net</a></li>
</ul>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>658</wp:post_id>
		<wp:post_date>2014-08-19 12:46:59</wp:post_date>
		<wp:post_date_gmt>2014-08-19 10:46:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>article-intro-effects-examples</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="css"><![CDATA[CSS]]></category>
		<category domain="post_tag" nicename="css-2"><![CDATA[css]]></category>
		<category domain="category" nicename="design"><![CDATA[Design]]></category>
		<category domain="category" nicename="javascript-2"><![CDATA[Javascript]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3453696170]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>UI Component: Search Box with Filter</title>
		<link>http://savemyday.in/ui-component-search-box-with-filter/</link>
		<pubDate>Mon, 25 Aug 2014 17:28:52 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=671</guid>
		<description></description>
		<content:encoded><![CDATA[This search box reveals a drop down menu after the user clicks into the input field. The menu is meant to act as a filter with several checkbox options that allow the user to select specific categories for his search. When the user hovers out of the input or the filter box, the drop down will disappear.

<!--more-->
<div class="demo">
	<a href="/examples/Search-Box/index.html"><span class="icon-film" style="padding-right: 10px; font-size: 18px;"></span>View demo</a>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>671</wp:post_id>
		<wp:post_date>2014-08-25 19:28:52</wp:post_date>
		<wp:post_date_gmt>2014-08-25 17:28:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ui-component-search-box-with-filter</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="css"><![CDATA[CSS]]></category>
		<category domain="category" nicename="inspiration"><![CDATA[Inspiration]]></category>
		<category domain="category" nicename="javascript-2"><![CDATA[Javascript]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3582642077]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Medium-Style Page Transition</title>
		<link>http://savemyday.in/medium-style-page-transition/</link>
		<pubDate>Mon, 01 Sep 2014 20:50:51 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=678</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="wp-center">
<img src="http://savemyday.in/source/images/medium-style-page-transition.gif" alt="" width="200px"/>
</div><br />

An article on how to achieve <a href="https://medium.com/">Medium’s</a> next page transition effect—an effect that can be seen by clicking anywhere on the “Read Next” footer at the bottom of the page. This effect is characterized by the lower article easing upward as the current article fades up and out.

The page makes Ajax request to static <code>json</code> files. Page state is managed by using the <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Manipulating_the_browser_history">PushState API</a> and <code>location.hash</code>. All photos are from <a href="http://unsplash.com/">Unsplash</a>.

Article map:
<ul style="list-style: none;">
	<li><a class="link-icon" href="/medium-style-page-transition/#HTML"></a>HTML</li>
	<li><a class="link-icon" href="/medium-style-page-transition/#CSS"></a>CSS</li>
    <li><a class="link-icon" href="/medium-style-page-transition/#JavaScript"></a>JavaScript</li>
    <li><a class="link-icon" href="/medium-style-page-transition/#Animation Code"></a>Animation Code</li>
</ul>

<!--more-->

<div class="demo">
	<a href="/examples/Medium-style-page-transitions-master/index.html"><span class="icon-film" style="padding-right: 10px; font-size: 18px;"></span>View demo</a>
</div>


In this article, I will outline how to achieve Medium’s page transition effect—an effect that can be seen by clicking anywhere on the “Read Next” footer at the bottom of the page. This effect is characterized by the lower article easing upward as the current article fades up and out. See the animation below for an illustration of this effect.

<a href name="HTML"></a>
<div class="title-block">
	<i class="attention"></i>HTML
</div>

In this demo, the page first loads with barebones HTML, which we’ll use as a template that will be filled in later with Ajax’d-in data. Below is what our <code>&lt;body&gt;</code> looks like on initial page load. One main <code>&lt;article&gt;</code> tag. Pretty simple, eh?

[html]
<body>
  <article class='page hidden'>
    <div class='big-image'></div>
    <div class='content'></div>
  </article>
</body>
[/html]

Once the content is Ajax’d-in, the <body> looks something like so:

[html]
<body>
  <article class='page current'><!--other HTML --></article>
  <article class='page next '><!--other HTML --></article>
<body>
[/html]

The page currently being viewed has a class of <code>current</code>, and the next article has a class of <code>next</code>. The next article only has its large image being shown at the bottom of the page, which, when <code>clicked</code> on, brings it into focus.

<a href name="CSS"></a>
<div class="title-block">
	<i class="attention"></i>CSS
</div>

The styles in this demo which control the article transitions are both applied dynamically via jQuery’s <code>css()</code> method, as well as by applying classes to the <code>&lt;article&gt;</code> elements using jQuery’s <code>addClass()</code> method:

[css]
article.page.hidden { 
    display: none
}
 
article.page.content-hidden .content { 
    display: none
}
 
article.fade-up-out {
    opacity: 0;
    transform: scale(0.8) translate3d(0, -10%, 0);
    transition: all 450ms cubic-bezier(0.165, 0.840, 0.440, 1.000);
}
 
article.easing-upward {
    transition: all 450ms cubic-bezier(0.165, 0.840, 0.440, 1.000);
}
[/css]

<a href name="JavaScript"></a>
<div class="title-block">
	<i class="attention"></i>JavaScript
</div>

Before getting into the Javascript code, I want to first outline the algorithm used to transition the <code>next</code> article upward, and transition the <code>current</code> article up and away.

So, when user click on <code>next</code> article:

<ol>
	<li>Disable scroll on the page</li>
	<li>Fade <code>current</code> article to <code>opacity</code> of 0, a <code>scale</code> of .8 and move it upward by 10%</li>
	<li>Show the <code>article</code> content, give it smooth transition, then move it upward to the top of the window</li>
	<li>After 500ms:</li>
	<ol>
		<li>Remove the <code>current</code> article from the DOM</li>
		<li>Remove smooth <code>transition</code> from <code>current</code> article</li>
		<li>Scroll to top programmaticaly</li>
		<li>Make <code>next</code> article the <code>current</code></li>
		<li>Enable scroll on the page</li>
		<li>Make Ajax request for <code>next</code> article content</li>
	</ol>
</ol>

Non-Closure Example:
[javascript]
function nonClosure() {
	//encapsulation
	var date = new Date(); //Varible lost after function returns

	return date.getMilliseconds();
}
[/javascript]

Closure function:
[javascript]
function trueClosure() {
	//encapsulation
	var date = new Date(); //Varible stays around even after function returns

	//nested function (!)
	return function() {
		return date.getMilliseconds();
	}
}
[/javascript]

Closure function example2:
[javascript]
function trueClosure() {
	//encapsulation
	var date = new Date(); //Varible stays around even after function returns
	//nested function (!)
	function getTime() {
		return date.getMilliseconds();
	}

	return {
		getTime: getTime
	}
}
[/javascript]
<hr>

<a href name="Animation Code"></a>
<div class="title-block">
	<i class="attention"></i>Animation Code
</div>

[javascript]
 ArticleAnimator.animatePage = function(callback){
  var self              = this;
  var translationValue  = this.$next.get(0).getBoundingClientRect().top;
  this.canScroll        = false;
 
  this.$current.addClass('fade-up-out');
 
  this.$next.removeClass('content-hidden next')
       .addClass('easing-upward')
       .css({ "transform": "translate3d(0, -"+ translationValue +"px, 0)" });
 
  setTimeout(function(){
      scrollTop();
      self.$next.removeClass('easing-upward')
          self.$current.remove();
 
      self.$next.css({ "transform": "" });
          self.$current = self.$next.addClass('current');
 
      self.canScroll = true;
      self.currentPostIndex = self.nextPostIndex( self.currentPostIndex );
 
      callback();
  }, self.animationDuration + 300 );
}
[/javascript]

Throughout the CSS and JavaScript code in order to achieve fluid animation I'm using <code>transform: translate3d(x, y, z)</code> to move DOM elements. By doing this, we <code>hardware accelarate</code> the DOM elements movement. This method is preferred over animating an element using <code>top / left</code> or <code>transform: translateX(x) / translateY(y)</code>, which are not <code>hardware</code> accelarated by default.

SaveMyDay:
<ul>
	<li>on <a href="http://beta.pluralsight.com/courses/structuring-javascript">pluralsight.com</a></li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>678</wp:post_id>
		<wp:post_date>2014-09-01 22:50:51</wp:post_date>
		<wp:post_date_gmt>2014-09-01 20:50:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>medium-style-page-transition</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="css"><![CDATA[CSS]]></category>
		<category domain="category" nicename="inspiration"><![CDATA[Inspiration]]></category>
		<category domain="category" nicename="javascript-2"><![CDATA[Javascript]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3330628037]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Use HTML Codes for Special Characters</title>
		<link>http://savemyday.in/use-html-codes-for-special-characters/</link>
		<pubDate>Thu, 04 Sep 2014 19:35:55 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=687</guid>
		<description></description>
		<content:encoded><![CDATA[If you post a website in another language, refer to currency that's not on the keyboard, or want to represent more complex mathematical concepts you will need to use special characters. It is often easier to insert and use a special character on a web page, than to find the actual code to use.

<!--more-->

Follow these simple steps to find the characters you need and add them to your web pages.

<ul style="list-style: none;">
	<li><a class="link-icon" href="/medium-style-page-transition/#Look up the characters you look for"></a>Look up the characters you look for</li>
	<li><a class="link-icon" href="/medium-style-page-transition/#Place the code in yout document"></a>Place the code in yout document</li>
    <li><a class="link-icon" href="/medium-style-page-transition/#Add Unicode declaration to your document head"></a>Add Unicode declaration to your document head</li>
    <li><a class="link-icon" href="/medium-style-page-transition/#Always check that you have ended your entity with semi-colon(;)"></a>Always check that you have ended your entity with semi-colon(;)</li>
    <li><a class="link-icon" href="/medium-style-page-transition/#Your entity should begin with an ampersand <code>&</code>"></a>Your entity should begin with an ampersand <code>&</code></li>
    <li><a class="link-icon" href="/medium-style-page-transition/#Test pages in as many browser as you can"></a>Test pages in as many browser as you can</li>
</ul>
<hr>

<a href name="Look up the characters you look for"></a>
<div class="title-block">
	<i class="attention"></i>Look up the characters you look for
</div>

First you want to look the characters you need to use. If it's a character based on a latter, start with the <a href="http://webdesign.about.com/library/bl_htmlcodes.htm">HTML Codes</a>, or you can check the <a href="http://webdesign.about.com/od/localization/l/blhtmlcodes-cur.htm">currency codes</a>, <a href="http://webdesign.about.com/od/localization/l/blhtmlcodes-math.htm">mathematics codes</a> and <a href="http://webdesign.about.com/od/localization/l/blhtmlcodes-punc.htm">punctuation codes</a>.


<a href name="Place the code in yout document"></a>
<div class="title-block">
	<i class="attention"></i>Place the code in yout document
</div>

You can use the friendly name it there is one, the decimal numeric code, or the haxedecimal numeric code. I recommend to use <code>decimal</code> or <code>haxedecimal</code> code, because not all browsers support friendly names and they may cause problem in XML namespaces.

Some of more common characters used are(note: need to add <code>&</code> in the begin):

<ul>
	<li>&nbsp;- <code>nbsp;</code> or <code>#160;</code> or <code>#xA0;</code> non-breaking space</li>
	<li>&copy; - <code>copy;</code> or <code>#169;</code> or <code>#xA9;</code> copyright </li>
	<li>&trade; -<code>trade;</code> or <code>#153;</code> or <code>#xA9;</code> copyright </li>
</ul>

<a href name="Add Unicode declaration to your document head"></a>
<div class="title-block">
	<i class="attention"></i>Add Unicode declaration to your document head
</div>

Simply add the following meta tag anywere in <code>head</code> tag. This will insure that your charachters display correctly. <code>meta http-equiv="content-type" content="text/html;charset=utf-8"</code>

<a href name="Always check that you have ended your entity with semi-colon(;)"></a>
<div class="title-block">
	<i class="attention"></i>Always check that you have ended your entity with semi-colon(;)
</div>

Some HTML editors will allow you to post HTML codes without the final semi-colon, but pages will be invalid, and many browsers won't display the entities correctly without <code>;</code>

<a href name="Your entity should begin with an ampersand <code>&</code>"></a>
<div class="title-block">
	<i class="attention"></i>Your entity should begin with an ampersand <code>&</code>
</div>

The same history as with semi-colon: HTML editor won't throw error, but put HTML code without <code>&</code> may cause a lot problem for many browsers.

<a href name="Test pages in as many browser as you can"></a>
<div class="title-block">
	<i class="attention"></i>Test pages in as many browser as you can
</div>

If the character is crucial to understanding your document, and you can't test it in the browser/OS combinations that your customers use, then you should find another way to represent it. But before you resort to images or something else, you should see if these <a href="http://www.browserstack.com/">browser testing</a> tools can help you.

SaveMyDay:
<ul>
	<li>on <a href="http://webdesign.about.com/od/charactersets/a/aa112906.htm"</a>webdesign.about.com</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>687</wp:post_id>
		<wp:post_date>2014-09-04 21:35:55</wp:post_date>
		<wp:post_date_gmt>2014-09-04 19:35:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>use-html-codes-for-special-characters</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="html"><![CDATA[HTML]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3391749552]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Centering in CSS</title>
		<link>http://savemyday.in/centering-in-css/</link>
		<pubDate>Mon, 08 Sep 2014 20:54:09 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=700</guid>
		<description></description>
		<content:encoded><![CDATA[So you want to centering ..?

<ul style="list-style: none;">
	<li><a class="link-icon" href="/centering-in-css/#Horizontally"></a>Horizontally
		<ul style="list-style: none;">
			<li><a class="link-icon" href="/centering-in-css/#Is it inline or inline-* elements(like text or links)?"></a>Is it inline or inline-* elements(like text or links)?</li>
			<li><a class="link-icon" href="/centering-in-css/#Is it a block-level element?"></a>Is it a block-level element?</li>
			<li><a class="link-icon" href="/centering-in-css/#Is there are more than one block level element?"></a>Is there are more than one block level element?</li>
		</ul>
	</li>
		
	<li><a class="link-icon" href="/centering-in-css/#Vertically"></a>Vertically
		<ul style="list-style: none;">
			<li><a class="link-icon" href="/centering-in-css/#Is it inline or inline-* elements(like text or links)?"></a>Is it inline or inline-* elements(like text or links)?
				<ul style="list-style: none;">
					<li><a class="link-icon" href="/centering-in-css/#Is it single line?"></a>Is it single line?</li>
					<li><a class="link-icon" href="/centering-in-css/#Is it multiple line?"></a>Is it multiple line?</li>
				</ul>
			</li>

			<li><a class="link-icon" href="/centering-in-css/#Is it a block-level element?"></a>Is it a block-level element?
				<ul style="list-style: none;">
					<li><a class="link-icon" href="/centering-in-css/#Do you know the height of the element?"></a>Do you know the height of the element?</li>
					<li><a class="link-icon" href="/centering-in-css/#Is the element of unknown height?"></a>Is the element of unknown height?</li>
				</ul>
			</li>
		</ul>
	</li>
	<li><a class="link-icon" href="/centering-in-css/#Both Horizontally and Vertically"></a>Both Horizontally and Vertically
		<ul style="list-style: none;">
			<li><a class="link-icon" href="/centering-in-css/#Is the element of fixed width and height?"></a>Is the element of fixed width and height?</li>
			<li><a class="link-icon" href="/centering-in-css/#Is the element of unknown width and height?"></a>Is the element of unknown width and height?</li>
</ul>
<hr>

<!--more-->

<h1>Horizontally</h1>

<a href name="Is it inline or inline-* elements(like text or links)?"></a>
<div class="title-block">
	<i class="attention"></i>Is it inline or inline-* elements(like text or links)?
</div>

You can easely center inline elements horizontaly, within a block-level parent element, with:

[css]
.center-children {
	text-align: center
}
[/css]

<p data-height="167" data-theme-id="0" data-slug-hash="AqsLf" data-default-tab="result" data-user="qetr1ck-op" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/AqsLf/'>AqsLf</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

This works for inline, inline-block,  inline-table, inline-flex, etc.

<a href name="Is it a block-level element?"></a>
<div class="title-block">
	<i class="attention"></i>Is it a block-level element?
</div>

You can centered a block-level by give it <code>margin-left</code> and <code>margin-right</code> of <code>auto</code> (and it has a set <code>width</code>, otherwise it would be full and wouldn't need centering). This often is doing with shourthand like this: 

[html]
.center {
	margin: 0 auto;
}
[/html]

<p data-height="169" data-theme-id="0" data-slug-hash="Kxemr" data-default-tab="result" data-user="qetr1ck-op" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/Kxemr/'>Kxemr</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

This will work no matter what the width of the block level element you're centering, or the parent.


<a href name="Is there are more than one block level element?"></a>
<div class="title-block">
	<i class="attention"></i>Is there are more than one block level element?
</div>

If you have more than two or more block-level elements than need to be centered horizontaly in a <code>row</code> you should making them a differnt <code>display</code> type. Here is an example of making them <code>inline-block</code> or <code>flexbox</code>:

<p data-height="400" data-theme-id="0" data-slug-hash="qlpJG" data-default-tab="result" data-user="qetr1ck-op" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/qlpJG/'>Centering Row of Blocks</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

<h1>Vertically</h1>

<a href name="Is it inline or inline-* elements(like text or links)?"></a>
<div class="title-block">
	<i class="attention"></i>Is it inline or inline-* elements(like text or links)?
</div>

<a href name="Is it single line?"></a>
<div class="title-block">
	<i class="attention"></i>Is it single line?
</div>

Sometimes inline / text elements can appear vertically centered with equal padding above and below them:

<p data-height="268" data-theme-id="0" data-slug-hash="Dyngd" data-default-tab="result" data-user="qetr1ck-op" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/Dyngd/'>Centering text (kinda) with Padding</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

If padding is not an option for some reason, there is a trick to making <code>line-height</code> equal to the <code>height</code>:

<p data-height="268" data-theme-id="0" data-slug-hash="cugsD" data-default-tab="result" data-user="qetr1ck-op" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/cugsD/'>Centering a line with line-height</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

<a href name="Is it multiple lines?"></a>
<div class="title-block">
	<i class="attention"></i>Is it multiple lines?
</div>

Equal <code>padding</code> on top and bottom still works for multiple lines of text, but if this isn't enought, perhaps the element text can be a <code>table cell</code>, eather literally or made to behaviour like one with css:

<p data-height="319" data-theme-id="0" data-slug-hash="tBvnk" data-default-tab="result" data-user="qetr1ck-op" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/tBvnk/'>Centering text (kinda) with Padding</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

If sometime table-like is out, perhaps you could use flex-box:

<p data-height="268" data-theme-id="0" data-slug-hash="vcqej" data-default-tab="result" data-user="qetr1ck-op" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/vcqej/'>Vertical Center Multi Lines of Text with Flexbox</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

If both these tehniques are out, you could employ the "ghost element" tehnique:

<p data-height="303" data-theme-id="0" data-slug-hash="BDziH" data-default-tab="result" data-user="qetr1ck-op" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/BDziH/'>Ghost Centering Multi Line Text</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>


<a href name="Is block-level element?"></a>
<div class="title-block">
	<i class="attention"></i>Is block-level element?
</div>

<a href name="Do you know the height of element?"></a>
<div class="title-block">
	<i class="attention"></i>Do you know the height of element?
</div>

If you know the height, you can centere verticaly like:

<p data-height="268" data-theme-id="0" data-slug-hash="EfpCb" data-default-tab="result" data-user="qetr1ck-op" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/EfpCb/'>Center Block with Fixed Height</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

<a href name="Is it the element with unknown height?"></a>
<div class="title-block">
	<i class="attention"></i>Is it the element with unknown height?
</div>

It's still possibele to vertically center it:

<p data-height="268" data-theme-id="0" data-slug-hash="DtBKp" data-default-tab="result" data-user="qetr1ck-op" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/DtBKp/'>Center Block with Unknown Height</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

<a href name="Can you use flex-box?"></a>
<div class="title-block">
	<i class="attention"></i>Can you use flex-box??
</div>

Suprise-suprise with this tehnique it's so ease:

<p data-height="424" data-theme-id="0" data-slug-hash="shLvd" data-default-tab="result" data-user="qetr1ck-op" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/shLvd/'>Center Block with Unknown Height with Flexbox</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>


<h1>Both Horizontally and Vertically</h1>

You can combine the tehnique above in any order to get perfectly centered elements. But you can next grouped tehniques:

<a href name="Is the element of fixed width and height?"></a>
<div class="title-block">
	<i class="attention"></i>Is the element of fixed width and height?
</div>

Using negative margins equels to half of width and heigh. After you get absolutely positioned it at 50% / 50%:

<p data-height="328" data-theme-id="0" data-slug-hash="jIfuD" data-default-tab="result" data-user="qetr1ck-op" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/jIfuD/'>Center Block with Fixed Height and Width</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

<a href name="Is the element of unknown width and height?"></a>
<div class="title-block">
	<i class="attention"></i>Is the element of unknown width and height?
</div>

If you don't know  the width and height - you can the <code>tranform</code> property with negative <code>translate</code> of 50% in both directions:

<p data-height="268" data-theme-id="0" data-slug-hash="zqyma" data-default-tab="result" data-user="qetr1ck-op" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/zqyma/'>Center Block with Unknown Height and Width</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

<a href name="Can you use flexbox?"></a>
<div class="title-block">
	<i class="attention"></i>Can you use flexbox?
</div>

To center in both directions with flexbox, you need to use two centering properties:

<p data-height="311" data-theme-id="0" data-slug-hash="yxqFf" data-default-tab="result" data-user="qetr1ck-op" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/yxqFf/'>Center Block with Unknown Height and Width with Flexbox</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

So know you can easiely to say, that centering in CSS isn't a big deal. 

SaveMyDay:
<ul>
	<li>on <a href="http://css-tricks.com/centering-css-complete-guide/">pluralsight.com</a> css-tricks</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>700</wp:post_id>
		<wp:post_date>2014-09-08 22:54:09</wp:post_date>
		<wp:post_date_gmt>2014-09-08 20:54:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>centering-in-css</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="css"><![CDATA[CSS]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3348853103]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>OOP in prototype style</title>
		<link>http://savemyday.in/oop-in-prototype-style/</link>
		<pubDate>Mon, 15 Sep 2014 20:40:38 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=711</guid>
		<description></description>
		<content:encoded><![CDATA[The main point is that one object can be <code>prototype</code> of another object. That means if property isn't found in the object - than it takes from <code>prototype</code> object. In JavaScript this implementation is at the language level.

<ul style="list-style: none;">
    <li><a class="link-icon" href=" http://savemyday.in/oop-in-prototype-style/#Inheritance through link __proto__"></a>Inheritance through link <code>__proto__</code></li>
    <li><a class="link-icon" href=" http://savemyday.in/oop-in-prototype-style/#Method hasOwnProperty"></a>Method <code>hasOwnProperty</code></li>
    <li><a class="link-icon" href=" http://savemyday.in/oop-in-prototype-style/#Prototype Chain"></a>Prototype Chain</li>
    <li><a class="link-icon" href=" http://savemyday.in/oop-in-prototype-style/#Methods to work with __proto__"></a>Methods to work with <code>__proto__</code></li>
    <li><a class="link-icon" href=" http://savemyday.in/oop-in-prototype-style/#Exercises with __proto__"></a>Exercises with <code>__proto__</code></li>
    <li><a class="link-icon" href=" http://savemyday.in/oop-in-prototype-style/#F.prototype and creating object via new"></a>F.prototype<code>F.prototype</code> and creating object via <code>new</code></li>
    <li><a class="link-icon" href=" http://savemyday.in/oop-in-prototype-style/#Exercises with prototype and new"></a><code>Exercises with prototype and new</code></li>
    <li><a class="link-icon" href=" http://savemyday.in/oop-in-prototype-style/#Classes. Where methods come from"></a>"Classes". Where methods come from <code>{ }</code></li>
    <li><a class="link-icon" href=" http://savemyday.in/oop-in-prototype-style/#Build-in Classes"></a>Build-in "Classes"</li>
    <li><a class="link-icon" href=" http://savemyday.in/oop-in-prototype-style/#Exercises with overriding prototype"></a>Exercises with overriding prototype</li>
    <li><a class="link-icon" href=" http://savemyday.in/oop-in-prototype-style/#Declares owns Classes"></a>Declares owns "Classes"</li>
    <li><a class="link-icon" href=" http://savemyday.in/oop-in-prototype-style/#Property constructor"></a>Property <code>constructor</code></li>
    <li><a class="link-icon" href=" http://savemyday.in/oop-in-prototype-style/#Inheritance for Classes"></a>Inheritance for "Classes".  Classical Inheritance</li>
</ul>
<hr>

<!--more-->

<a href="#Inheritance through link __proto__" name="Inheritance through link __proto__"></a>
<div class="title-block">
    <i class="attention"></i>Inheritance through link <code>__proto__</code>
</div>

Inheritance in JavaScript is realized via special property <code>__proto__</code> (In specs EcmaScript the name is <code>[[Prototype]]</code>). In ES5 the property was available in Chrome / Firefox and Safari, but in other browser was hidden. ES6 includes <code>__proto__</code> property as standard. In this article, for more efficient way I'll use <code>__proto__</code> property, but for legacy you should use <code>Object.getPrototypeOf()</code>

If the object, for instance <code>rabbit</code>, has a special link <code>__proto__</code> to another object <code>animal</code>, that mean, that all property which are searched in the <code>rabbit</code>, will be also searched in the <code>animal</code> object.

<script src="https://gist.github.com/qetr1ck-op/acf247f35d67290c8fbe.js"></script>

We can write any object in <code>prototype</code> object:

<script src="https://gist.github.com/qetr1ck-op/446b83701477ad23da58.js"></script>

So, object pointed by <code>__proto__</code> it is his <code>prototype</code>. In another words <code>prototype</code> it's "Backup Storage of Properties and Methods", which automatically used in the search.

<div class="wp-center">
    <img src="http://savemyday.in/source/images/OOP in prototype style/img1.png" alt=""/>
</div>
<br>

<!--  -->

<a href="#Method hasOwnProperty" name="Method hasOwnProperty"></a>
<div class="title-block">
    <i class="attention"></i>Method hasOwnProperty</code>
</div>

Simple loop <code>for...in</code> or loop through iterable objects (Array, Mas, Set, arguments object) can't distinguish between the own properties and properties of his <code>prototype</code>

<script src="https://gist.github.com/qetr1ck-op/bb4165bd8e74e36f3570.js"></script>

For iterate only through own properties with <code>obj.hasOwnProperty(prop)</code>:

<script src="https://gist.github.com/qetr1ck-op/f69804da0f8a16a29f79.js"></script>

<!--  -->

<a href="#Prototype Chain" name="Prototype Chain"></a>
<div class="title-block">
    <i class="attention"></i>Prototype Chain
</div>

In object <code>__proto__</code> can be another <code>__proto__</code> object and so on. For example, the inheritance chain of three object donkey -> winnie -> owl:

<script src="https://gist.github.com/qetr1ck-op/d57b779a057e164bf1d2.js"></script>

<div class="wp-center">
    <img src="http://savemyday.in/source/images/OOP in prototype style/img2.png" alt=""/>
</div>
<br>

<!--  -->

<a href="#Methods to work with __proto__" name="Methods to work with __proto__"></a>
<div class="title-block">
    <i class="attention"></i>Methods to work with __proto__
</div>

By historical reason we have methods to get/set <code>__proto__</code> property:

<script src="https://gist.github.com/qetr1ck-op/54c9dbea765318e4a2c2.js"></script>

<code>Object.create(proto, descriptors)</code> creates new empty object with <code>__proto__</code> object:

<script src="https://gist.github.com/qetr1ck-op/970d7c61bf7452fd8b5e.js"></script>

This method only allows create new empty object. He can't change <code>prototype</code> of an existing object.

Create an empty collection, without prototype chain with <code>Object.create(null)</code>:

<script src="https://gist.github.com/qetr1ck-op/99be3a7345429941c2eb.js"></script>

<!--  -->

<a href="#Exercise with __proto__" name="Exercise with __proto__"></a>
<div class="title-block">
    <i class="attention"></i>Exercise with <code>__proto__</code>
</div>

1.1
<script src="https://gist.github.com/qetr1ck-op/d20e3a520e4dc06a5f63.js"></script>

1.2
<script src="https://gist.github.com/qetr1ck-op/32ce09bfa0ca65d5346d.js"></script>

<div class="wp-center">
    <img src="http://savemyday.in/source/images/OOP in prototype style/img3.png" alt=""/>
</div>
<br>

<!--  -->

<a href="#F.prototype" name="F.prototype"></a>
<div class="title-block">
    <i class="attention"></i>F.prototype
</div>

Property <code>prototype</code> can point on any object but it has sense, when it's assigned to function-constructor.

When project is creating via <code>new</code>, in his <code>__proto__</code> object writes link from <code>prototype</code> of function-constructor.

<script src="https://gist.github.com/qetr1ck-op/c4ac921c558015b4a481.js"></script>

<!--  -->

<a href="#Exercises with prototype and new" name="Exercises with prototype and new"></a>
<div class="title-block">
    <i class="attention"></i>Exercises with prototype and new
</div>

1.1

<script src="https://gist.github.com/qetr1ck-op/079e4c21baa262ca5f44.js"></script>

1.2

<script src="https://gist.github.com/qetr1ck-op/340acc108182399dbd38.js"></script>

1.3

<script src="https://gist.github.com/qetr1ck-op/275f8d2485c73f3a365a.js"></script>

1.4

<script src="https://gist.github.com/qetr1ck-op/9b042fd1294bb8529477.js"></script>

1.5

<script src="https://gist.github.com/qetr1ck-op/36a799bfd94038ea3a88.js"></script>

2.1

<script src="https://gist.github.com/qetr1ck-op/aadce099bb5b8ddf7a02.js"></script>

<!--  -->

<a href="#Classes. Where methods come from { }" name="Classes. Where methods come from { }"></a>
<div class="title-block">
    <i class="attention"></i>"Classes". Where methods come from empty {}
</div>

Lets begin with creating empty object end call method <code>toString</code>:

<script src="https://gist.github.com/qetr1ck-op/d0902bca8a134b7c101f.js"></script>

It's obviously, that <code>{ }</code> is empty. But then who generates method <code>toString()</code>? Off-course this makes method <code>toString()</code> which is built-in <code>Object.prototype</code>.

In details it works like this:

<ol>
    <li>Creating object literal <code>obj = { }</code> means shorthand form for <code>obj = new Object()</code>, were <code>Object</code> is built-in function-constructor for objects</li>
    <li>While <code>new Object</code> invokes, new object has receives <code>obj.__proto__ = Object.prototype</code>.</li>
    <li><code>obj.toString === Object.prototype.toString</code> method will be taken from prototype object.</li>
</ol>

<div class="wp-center">
    <img src="http://savemyday.in/source/images/OOP in prototype style/img4.png" alt=""/>
</div>
<br>

<!--  -->

<a href="#Build-in Classes" name="Build-in Classes"></a>
<div class="title-block">
    <i class="attention"></i>Build-in "Classes"
</div>

The same methods use in arrays <code>Array</code>, functions <code>Function</code> and other objects. Build-in methods are in <code>Array.prototype</code>, <code>Function.prototype</code>, etc.

<!--  -->

<div class="wp-center">
    <img src="http://savemyday.in/source/images/OOP in prototype style/img5.png" alt=""/>
</div>
<br>

Thats why everywhere JS developers like to say that "All objects inherit from <code>Object</code>". But it's a quite correct. All objects inherit from <code>Object.prototype</code> via <code>__proto__</code> link.

In some cases, method can overrides. For example, "class" <code>Array</code> has it's own <code>toString</code>, which is in <code>Array.prototype.toString</code>:

<script src="https://gist.github.com/qetr1ck-op/823a2dfdf760938c91fd.js"></script>

<!--  -->

<a href="#Exercises with overriding prototype" name="Exercises with overriding prototype"></a>
<div class="title-block">
    <i class="attention"></i>Exercises with overriding prototype
</div>

1.1

<script src="https://gist.github.com/qetr1ck-op/df77c34e3efec24039e6.js"></script>

1.2

<script src="https://gist.github.com/qetr1ck-op/188c0afa47da9b036b73.js"></script>

1.3

<script src="https://gist.github.com/qetr1ck-op/e733ebd38e35616ed565.js"></script>

1.4

<script src="https://gist.github.com/qetr1ck-op/a292315fd0ddd6477827.js"></script>

<!--  -->

<a href="#Declares own Classes" name="Declares own Classes"></a>
<div class="title-block">
    <i class="attention"></i>Declares own "Classes"
</div>

For create "Class" you need:

<ol>
    <li>Declare function-constructor</li>
    <li>Write all required methods and properties in <code>prototype</code></li>
</ol>

<script src="https://gist.github.com/qetr1ck-op/fde34608e4532f82d166.js"></script>

<!--  -->

<a href="#Property constructor" name="Property constructor"></a>
<div class="title-block">
    <i class="attention"></i>Property <code>constructor</code>
</div>

Property <code>constructor</code> is in every function, even if it isn't declare. So concept is next, the property <code>constructor</code> should have link to function, which creates the object:

<script src="https://gist.github.com/qetr1ck-op/02ee2ee811e78b50274c.js"></script>

But when you overriding the <code>prototype</code>, property <code>constructor</code> disappears:

<script src="https://gist.github.com/qetr1ck-op/c43b5a7d1ec3afd701af.js"></script>

So how it works: animal -> Animal.prototype (new Object) -> Object.prototype

<!--  -->

<a href="#Inheritance for Classes" name="Inheritance for Classes"></a>
<div class="title-block">
    <i class="attention"></i>Prototype OOP</code>
</div>

Classes it isn't only function-constructor with <code>prototype</code>, it's also additional opportunities for OOP development.

For example two "Classes" and realization of "Class inheritance":

<script src="https://gist.github.com/qetr1ck-op/4aed9017910b8e0d2c39.js"></script>

SaveMyDay:
<ul>
    <li>on <a href="https://learn.javascript.ru/prototypes"</a> learn.javascript.ru</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>711</wp:post_id>
		<wp:post_date>2014-09-15 22:40:38</wp:post_date>
		<wp:post_date_gmt>2014-09-15 20:40:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>oop-in-prototype-style</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="inheritance"><![CDATA[inheritance]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="category" nicename="javascript-2"><![CDATA[Javascript]]></category>
		<category domain="post_tag" nicename="oop"><![CDATA[OOP]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<category domain="post_tag" nicename="prototype"><![CDATA[Prototype]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3712482317]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[prototype-inheritance-and-methods]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>git pull versus git pull --rebase</title>
		<link>http://savemyday.in/git-pull-versus-git-pull-rebase/</link>
		<pubDate>Thu, 16 Oct 2014 20:05:58 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=759</guid>
		<description></description>
		<content:encoded><![CDATA[<ul style="list-style: none;">
	<li><a class="link-icon" href="/git-pull-versus-git-pull-rebase/#Short answer"></a>Short answer</li>
	<li><a class="link-icon" href="/git-pull-versus-git-pull-rebase/#Long answer"></a>Long answer (compare <code>git merge</code> and <code>git rebase</code>)</li>
</ul>

<!--more-->

<a href name="Short answer"></a>
<div class="title-block">
	<i class="attention"></i>Short answer
</div>

<code>git pull</code> = git fetch + git merge

<code>git pull --rebase</code> = git fetch + git rebase
For more detail info how <code>git pull</code> and <code>git rabase</code> differ read in <a href="/git-pull-versus-git-pull-rebase/#Long answer">Long answer</a>.


<a href name="Long answer"></a>
<div class="title-block">
	<i class="attention"></i>Long answer: <code>git merge</code> and  <code>git rebase</code>
</div>

Suppose originally there were a 3 commits, <code>A</code>, <code>B</code>, <code>C</code>:

<div class="wp-center">
<img src="http://i.stack.imgur.com/lJRq7.png" alt=""/>
</div>
<br>

Then developer Dan create commit <code>D</code>, ans developer Ed created commit <code>E</code>:

<div class="wp-center">
<img src="http://i.stack.imgur.com/pK7Zb.png" alt=""/>
</div>
<br>

Obviously, this conflict should be resolve somehow. For this are 2 ways:

<div class="title-block">
	<i class="attention"></i><code>git merge</code>
</div>

<div class="wp-center">
<img src="http://i.stack.imgur.com/9Ul5w.png" alt=""/>
</div>
<br>

Both commits <code>D</code> and	<code>E</code> are still here, but git create merge commit <code>M</code> that inherits changes from both <code>D</code> and <code>E</code>. However, this create <code>diamond</code> shape, which many people find confusing.

<div class="title-block">
	<i class="attention"></i><code>git rebase</code>
</div>

<div class="wp-center">
<img src="http://i.stack.imgur.com/TvXuJ.png" alt=""/>
</div>
<br>

Git create commit <code>R</code> which is identical to merge commit <code>M</code>. But, we get rid of commit <code>E</code>, like it have never existed (shown by dots). Because of this, <code>E</code> should be local to developer Ed and should have never pushed to any repository.

Advantage of rebase id that is that <code>rebase</code> is avoided, and history stays nice straight line - most developers love that!


Make my day:
<a href="http://stackoverflow.com/questions/11816424/understanding-the-basics-of-git-and-github" title="stackoverflow">understanding-the-basics-of-git-and-github</a>
<a href="http://stackoverflow.com/questions/871/why-is-git-better-than-subversion">Discussion on StackOverflow</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>759</wp:post_id>
		<wp:post_date>2014-10-16 22:05:58</wp:post_date>
		<wp:post_date_gmt>2014-10-16 20:05:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>git-pull-versus-git-pull-rebase</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="git"><![CDATA[Git]]></category>
		<category domain="category" nicename="git"><![CDATA[Git]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3407371197]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Triangles with CSS</title>
		<link>http://savemyday.in/triangles-with-css/</link>
		<pubDate>Sun, 26 Oct 2014 11:54:23 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=769</guid>
		<description></description>
		<content:encoded><![CDATA[<ul style="list-style: none;">
	<li><a class="link-icon" href="/triangles-with-css/#Short answer"></a>With addition element</li>
	<li><a class="link-icon" href="/triangles-with-css/#Long answer"></a>With <code>:before</code> and <code>:after</code></li>
	<li><a class="link-icon" href="/triangles-with-css/#Demo"></a>Demo</code></li>
</ul>

<!--more-->

<a href name="With addition element"></a>
<div class="title-block">
	<i class="attention"></i>With addition element
</div>

Secrets for creating CSS triangle: 
<ul>
	<li>create transparent giant border for two <code>perpendicular sides</code> of the directory you would like the triangle point</li>
	<li>make the opposite sides border the same width and the background color you'd like the tool-tip to be</li>
	<li>you may set any color, border width (size of triangle) and direction of CSS triangle</li>
</ul>

<a href name="With :before and :after"></a>
<div class="title-block">
	<i class="attention"></i>With <code>:before</code> and <code>:after</code>
</div>

If don't want to use true element, you may create tool-tip triangle with pseudo-elements <code>:before, :after</code>. This is the perfect case for tool-tips.

The border side you add the color to is the opposite side of the arrow pointer. Also not that you don't need to use both :before and :after pseudo-elements -- you need only use one. The second arrow could, however, be used as a background shadow or background "border".

<a href name="Demo"></a>
<div class="title-block">
	<i class="attention"></i>Demo</code>
</div>
<p data-height="268" data-theme-id="0" data-slug-hash="Ewnlx" data-default-tab="result" data-user="qetr1ck-op" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/Ewnlx/'>Ewnlx</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>769</wp:post_id>
		<wp:post_date>2014-10-26 13:54:23</wp:post_date>
		<wp:post_date_gmt>2014-10-26 11:54:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>triangles-with-css</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="css"><![CDATA[CSS]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3373785085]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JSONP</title>
		<link>http://savemyday.in/jsonp/</link>
		<pubDate>Wed, 29 Oct 2014 19:44:50 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=774</guid>
		<description></description>
		<content:encoded><![CDATA[<code>JSONP</code> is really simple trick to overcome <code>XMLHttpRequest</code> same origin domain policy - you can't send <code>AJAX (XMLHttpRequest)</code> request to different domain.

<!--more-->

So instead of using <code>XMLHttpRequest</code> we have to use <code>script</code> HTML tag to get data from another domain. And yes, it's sound weird. Example:

[javascript]
(function() {
	var script = document.createElement('script');
	script.type = 'text/javascript'
	script.src = 'http://www.someWebApiServer.com/some-data?callback=my_callback';
	document.getElementsByTagName('head')[0].appendChild(elem)
})()
[/javascript]

Notice the <code>my_callback</code> function over here? So when when server receives request and finds callback parameter - instead of returning plain <code>JSON</code> object :

[javascript]
{foo: bar}
[/javascript]

 it will return callback: 

[javascript]
my_callback({foo: bar}) // 'Response from another domain: ' {foo: bar}

//it's already implemented
function my_callback(resp) {
	console.log('Response from another domain: ' + resp);
}
[/javascript]

The profit is that we get automatic callback <code>my_callback</code> that will be triggered once we get the data.

So <code>JSONP</code> is callback and script tags.


Basic JavaScript example (simple Twitter feed using JSONP):
[html]
<div id = 'twitterFeed'></div>
<script>
function myCallback(dataWeGotViaJsonp){
    var text = '';
    var len = dataWeGotViaJsonp.length;
    for(var i=0;i<len;i++){
        twitterEntry = dataWeGotViaJsonp[i];
        text += '<p><img src = "' + twitterEntry.user.profile_image_url_https +'"/>' + twitterEntry['text'] + '</p>'
    }
    document.getElementById('twitterFeed').innerHTML = text;
}
[/html]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>774</wp:post_id>
		<wp:post_date>2014-10-29 21:44:50</wp:post_date>
		<wp:post_date_gmt>2014-10-29 19:44:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jsonp</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript-2"><![CDATA[Javascript]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3487505332]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Git pull vs git fetch</title>
		<link>http://savemyday.in/git-pull-vs-git-fetch/</link>
		<pubDate>Mon, 24 Nov 2014 21:46:41 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=785</guid>
		<description></description>
		<content:encoded><![CDATA[What is the differences between "git pull" and "git fetch"?

<!--more-->

When you use <code>git pull</code>, Git tries to automaticaly do your work with for you. Git will do <code>git merge</code> any new pulled commits into to the branch you are currently working in. <code>git pull</code> is what you should to do to bring a local-branch up-to-date with its remore version, while also updating your other remote-tracking branches.

When you use <code>git fetch</code>, Git gather any commits from the target branch that do not exist in your current branch and stores them in your local repository. However, it does not merge them with your current branch.

You can do <code>git fetch</code> in any time to update your remote-tracking branches under <code>refs/remote/s/heads</code>. This operation never changes any of your own local branches under <code>refs/heads</code>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>785</wp:post_id>
		<wp:post_date>2014-11-24 23:46:41</wp:post_date>
		<wp:post_date_gmt>2014-11-24 21:46:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>git-pull-vs-git-fetch</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="git"><![CDATA[Git]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3358104294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Reverting a single file to previous version</title>
		<link>http://savemyday.in/reverting-a-single-file-to-previous-version/</link>
		<pubDate>Wed, 26 Nov 2014 18:59:38 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=789</guid>
		<description></description>
		<content:encoded><![CDATA[We've made some number of commits and we want to revert the file to one of the previous versions. First of all, git doesn't keep version numbers for individual files. It just tracks content - a commit is essentially a snapshot of the work tree, along with some meta-data (e.g. commit message). So, we have to know which commit has the version of the file we want. Once we know that, we'll need to make a new commit reverting the file to that state.

<!--more-->

<ol>
	<li>
		Find right commit:
		[bash]git log (-p) path/to/file[/bash]
	</li>
	<li>
		Or with command:
		[bash]gitk path/to/file[/bash]
	</li>
	<li>
		Either way you will able to find SHA1 (hash) of the commit with you want for:
		[bash]
			# get the version of the file from the given commit
			git checkout <commit hash> path/to/file
			# commit the modification
			git commit
		[/bash]
	</li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>789</wp:post_id>
		<wp:post_date>2014-11-26 20:59:38</wp:post_date>
		<wp:post_date_gmt>2014-11-26 18:59:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>reverting-a-single-file-to-previous-version</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="git"><![CDATA[Git]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Promises in Javascript</title>
		<link>http://savemyday.in/promises-in-javascript/</link>
		<pubDate>Thu, 27 Nov 2014 21:12:29 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=793</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="wp-center">
<img src="../source/images/promise.png" alt="" width="500px"/>
</div>

<ul style="list-style: none;">
    <li><a class="link-icon" href="/promises-in-javascript/#Promises libraries and native Javascript promise object"></a>Promises libraries and native Javascript promise object</li>
    <li><a class="link-icon" href="/promises-in-javascript/#Browser support and polyfill"></a>Browser support and polyfill</li>
    <li><a class="link-icon" href="/promises-in-javascript/#Promisifying XMLHttpRequest"></a>Promisifying XMLHttpRequest</li>
    <li><a class="link-icon" href="/promises-in-javascript/#Promise chaining"></a>Promise chaining</li>
    <li><a class="link-icon" href="/promises-in-javascript/#Error handling"></a>Error handling</li>
</ul>

<!--more-->

<a href name="Promises libraries and native Javascript promise object"></a>
Promises have been around for a while in the libraries, such as:
<ol>
    <li><a href="https://github.com/kriskowal/q">Q</a></li>
    <li><a href="https://github.com/cujojs/when">when</a></li>
    <li><a href="https://github.com/tildeio/rsvp.js">RSVP.js</a></li>
</ol>
The above and JavaScript promises share a common, standard behavior called <a href="https://github.com/promises-aplus/promises-spec">Promises/A+</a>. If you used jQeury, they have something similar implementation is called <a href="http://api.jquery.com/category/deferred-object/">Deferred on off cite</a> and post on my cite <a href="http://savemyday.in/deferred-and-promise-in-jquery/">Deferred and promise in jQuery</a>.

Javascript promises are similar to RSVP.js. Example how create a promise:

[javascript]
var promise = new Promise(funtion (resolve, reject) {
    //start to doing something async, then...

    if (/*evething allright*/) {
        resolve('Stuff worked')
    } else {
        reject(Error('It"s broken'));
    }
})
[/javascript]

The Promises constructor takes callback with two parameters: <code>resolve</code> and <code>reject</code>. Idea is to do something, perhaps async, then call resolve if everything worked, otherwise call reject. Here how to use the promise:

[javascript]
promise.then(function (res) {
    console.log(res); // 'Stuff worked'
}, function (err) {
    console.log(err); // Error: 'It"s broken', with stack trace
})
[/javascript]

<a href name="Browser support and polyfill"></a>
<div class="title-block">
    <i class="attention"></i>Browser support and polyfill
</div>

You can check that in all modern browser promises have already implemented on <a href="http://caniuse.com/#feat=promises">caniuse</a>. <code>WebKit, Blink</code> and <code>Gecko</code> have a excellent support, however <code>Trident</code> engine I mean IE, doesn't have realization of promises.

To add promises to browsers and Node.js check out <a href="https://github.com/jakearchibald/es6-promise#readme">the polyfill</a>

<a href name="Promisifying XMLHttpRequest"></a>
<div class="title-block">
    <i class="attention"></i>Promisifying XMLHttpRequest
</div>

The <code>XMLHttpRequest</code> is a prime candidate for update to use promises. Example with simple GET/POST request:

[javascript]
function sendRequest(params) {
    //return new promise
    return new Promise(function (resolve, reject) {
        //create usual XHR object
        var req = new XMLHttpRequest();
        req.open(params.isPost ? 'POST' : 'GET', params.url);

        req.onload = function() {
            //this is called even with 404 etc
            //so need to check the status
            //and resolve with result of XHR response text
            req.status === 200 ?
                resolve(req.response)
                : reject(req.statusText);
        };

        //handle Network error
        req.onerror = function() {
            reject(Error('Network Error'));
        };

        req.send(params.isPost ? params.data : null);
    });
}
[/javascript]

Now let's use it:

[javascript]
sendRequest({url: 'example.json'}).then(function(response) {
    console.log('Success', response);
}, function(error) {
    console.error('Failed', error);
})
[/javascript]

Now we can make HTTP requests without manually typing XMLHttpRequest, which is great, because the less I have to see the infuriating camel-casing of XMLHttpRequest, the happier my life will be.

<a href name="Promise chaining"></a>
<div class="title-block">
    <i class="attention"></i>Promise chaining
</div>

<code>"then"</code> isn't the end of the story, you can chain <code>then</code> together to transform result of callback or run additional async action after another:

[javascript]
var promise = new Promise(function(resolve, reject) {
  resolve(1);
});

promise.then(function(val) {
  console.log(val); // 1
  return val + 2;
}).then(function(val) {
  console.log(val); // 3
});
[/javascript]

And practical example on our <code>sendRequest</code> function:

[javascript]
sendRequest({url: 'example.json'}).then(function(response) {
    return(JSON.parse(response));
}).then(function(response) {
    console.log('Serialized JSON', response);
})
[/javascript]

Or shorthand of previous example:

[javascript]
sendRequest({url: 'example.json'}).then(JSON.parse)).then(function(response) {
    console.log('Serialized JSON', response);
})
[/javascript]


<a href name="Error handling"></a>
<div class="title-block">
    <i class="attention"></i>Error handling
</div>

So <code>then</code> takes two arguments, one for success, one for failure(or fulfill and rejected in promise-speak). We can also use <code>catch</code> method:

[javascript]
sendRequest({url: 'example.json'}).then(function(response) {
    console.log('Success', response);
}).catch(function(error) {
    console.err(error);
});
//it's sugar for
sendRequest({url: 'example.json'}).then(function(response) {
    console.log('Success', response);
}).than(undefined, function(error) {
    console.error('Failed', error);
});
[/javascript]

Article which save my day
<ul>
    <li>on <a href="http://www.html5rocks.com/en/tutorials/es6/promises/">html5rocks.com</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>793</wp:post_id>
		<wp:post_date>2014-11-27 23:12:29</wp:post_date>
		<wp:post_date_gmt>2014-11-27 21:12:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>promises-in-javascript</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript-2"><![CDATA[Javascript]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3329422540]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Solutions from learnyounode</title>
		<link>http://savemyday.in/solutions-from-learnyounode/</link>
		<pubDate>Sat, 29 Nov 2014 10:32:57 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=800</guid>
		<description></description>
		<content:encoded><![CDATA[Recently, I've pased basic course from <a href="http://nodeschool.io/">nodeschool.io</a> so I want keep solution, just in case.

<!--more-->

Write a program that accepts one or more numbers as command-line arguments and prints the sum of those numbers
to the console (<code>stdout</code>).

[javascript]
var result = 0;

Array.prototype.forEach.call(process.argv, function (elem, i) {
    if (i >= 2) {
        result += +elem;
    }
});

console.log(result);
[/javascript]

Write a program that uses a single synchronous and asynchronous file system operation to read a file and print the numbers of new line it contains to the console (stdout).

[javascript]
var fs = require('fs');

var filename = process.argv[2];

file = fs.readFileSync(filename);

console.log(file.split('\n').length - 1);
[/javascript]

and

[javascript]
var fs = require('fs');

var filename = process.argv[2];

file = fs.readFile(filename, function(err, data) {
    if (err) {
        console.err(err);
        return;
    }
    console.log(data.toString().split('\n').length - 1);
});
[/javascript]

Create a program that prints a list of files in a given directory, filtered by the extension of files.

[javascript]
var fs = require('fs'),
    path = require('path'),
    dirName = process.argv[2],
    ext = process.argv[3];

fs.readdir(dirName, function (err, files) {
    if (err) {
        console.error(err);
        return;
    }
    Array.prototype.forEach.call(files, function (el) {
        if (path.extname(el).slice(1) === ext) {
            console.log(el);
        }
    });
});

[/javascript]

The same using modular approach.

[javascript]
//main.js
var module = require('./module.js'),
    dirName = process.argv[2],
    ext = process.argv[3];

module(dirName, ext, function (err, files) {
    if (err) {
        console.error(err);
        return;
    }
    files.forEach(function (el) {
        console.log(el);
    });
});

//module.js
module.exports = function (dirName, ext, callback) {
    var fs = require('fs'),
        path = require('path'),
        files = [];

    fs.readdir(dirName, function (err, files) {
        if (err) {
            return callback(err);
        }
        files = files.filter(function (el) {
            if (path.extname(el).slice(1) === ext) {
                return el;
            }
        });
        return callback(null, files);
    });
};
[/javascript]

Write a program that performs an HTTP GET request to a URL, provided as first command-line argument. Write the String content of each 'data' event from the response.

[javascript]
var http = require('http'),
    url = process.argv[2];

http.get(url, function (res) {
    res.on('data', function (data) {
        console.log(data.toString());
    });
});
[/javascript]

and with complete string of characters sent from server:

[javascript]
var http = require('http'),
    url = process.argv[2],
    result = '';

http.get(url, function (res) {
    res.on('data', function (data) {
        result += data.toString();
    });
    res.on('end', function (data) {
        console.log(result.length);
        console.log(result);
    });
});
[/javascript]

The problem is the same as the previous example to use http.get(). However, this time you will be provided with three URLs as the first three command-line arguments. The catch is that you need to stdout them in the same order.

[javascript]
var http = require('http');

var urls = process.argv.slice(2);
var results = [];

// initialise results array
for (i = 0; i < urls.length; i++) {
  results[i] = null;
}

for (i = 0; i < urls.length; i++) {
  (function(i) {
    http.get(urls[i], function(request) {
      var result = "";
      request.setEncoding("utf8");
      request.on("data", function(data) {
        result += data;
      });
      request.on("end", function() {
        results[i] = result;
        var resultCount = 0;
        for (j = 0; j < results.length; j++) {
          if (results[j] != null) resultCount++;
        }
        if (resultCount == results.length) {
          for (j = 0; j < results.length; j++) {
            console.log(results[j]);
          }
        }
      });
    });
  })(i);
}
[/javascript]

Write a TCP time server.

[javascript]
var net = require('net'),
    strftime = require('strftime'),
    port = process.argv[2];

net.createServer(function (socket) {
    var date = new Date();
    socket.end(strftime('%F %T', date).slice(0, -3));
}).listen(port);
[/javascript]

Write a HTTP server that serves the text file for each request it receives. 

[javascript]
var http = require('http'),
    fs = require('fs'),
    filePath = process.argv[3],
    port = process.argv[2];

var file = fs.createReadStream(filePath);

http.createServer(function (req, res) {
    file.pipe(res);
}).listen(port);
[/javascript]

Write a HTTP server that receives only POST requests and converts incoming POST body characters to upper-case and returns it to the client.

[javascript]
var http = require('http'),
    map = require('through2-map');
port = process.argv[2];

var toUC = map(function (chunk) {
    return chunk.toString().toUpperCase();
});

http.createServer(function (req, res) {
    req.pipe(toUC).pipe(res);
}).listen(port);
[/javascript]

Write a HTTP server that serves JSON data then it receives a GET request. Example of GET request: "api/parsetime?iso=2013-08019T12:10:15.474z".

[javascript]
var http = require('http'),
    url = require('url');

function parseRoutes(url) {
    if (url.pathname === '/api/parsetime') {
        var date = new Date(url.query.iso);
        return {
            hour: date.getHours(),
            minute: date.getMinutes(),
            second: date.getSeconds()
        };
    } else if (url.pathname === '/api/unixtime') {
        return {
            unixtime: new Date(url.query.iso).getTime()
        };
    } else return null;
}

var server = http.createServer(function (req, res) {
    var urlPath = url.parse(req.url, true),
        resourse = parseRoutes(urlPath);

    res.end(JSON.stringify(resourse));

    if (resourse) {
        res.writeHead(200, {
            'Content-Type': 'application/json'
        });
        res.end(JSON.stringify(resourse));
    } else {
        res.writeHead(404);
        res.end();
    }

});
server.listen(process.argv[2]);
[/javascript]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>800</wp:post_id>
		<wp:post_date>2014-11-29 12:32:57</wp:post_date>
		<wp:post_date_gmt>2014-11-29 10:32:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>solutions-from-learnyounode</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="nodejs"><![CDATA[NodeJs]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3333505878]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Browsers Layout engines</title>
		<link>http://savemyday.in/browsers-layout-engines/</link>
		<pubDate>Tue, 02 Dec 2014 19:01:39 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=804</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="wp-center">
<img src="../source/images/browsers-engine.jpg" alt="" width="500px">
</div>

The list of popular layout engines (the full list you may find in the end of the article):

<!--more-->

<ul>
    <li><code>Gecko</code> is developed by the <code>Mozilla Foundation</code>.</li>
    <li><code>Presto</code> is developed by Opera Software for use in Opera. Development stopped as Opera transitions to Blink.</li>
    <li><code>Trident</code> is developed by Microsoft for use in the Windows version of their web browser, from Internet Explorer 4 to the present time.</li>
    <li><code>WebKit</code> used in Apple Safari, Chromium and Google Chrome.</li>
    <li><code>Blink</code> is a 2013 fork of WebKit by Google used in Chromium, Google Chrome and Opera.</li>
</ul>


Full list of Browsers Layout engines on <a href="http://en.wikipedia.org/wiki/List_of_layout_engines">wiki</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>804</wp:post_id>
		<wp:post_date>2014-12-02 21:01:39</wp:post_date>
		<wp:post_date_gmt>2014-12-02 19:01:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>browsers-layout-engines</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="html"><![CDATA[HTML]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3672542682]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Awesome terminal emulator for Windows - cmder</title>
		<link>http://savemyday.in/cmder/</link>
		<pubDate>Tue, 02 Dec 2014 19:15:37 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=807</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="wp-center">
	<img src="../source/images/cmder.jpg" alt="" width="500px">
</div>

<!--more-->

Download <a href="http://bliker.github.io/cmder/">here</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>807</wp:post_id>
		<wp:post_date>2014-12-02 21:15:37</wp:post_date>
		<wp:post_date_gmt>2014-12-02 19:15:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cmder</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cli"><![CDATA[CLI]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3344154000]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>257</wp:comment_id>
			<wp:comment_author><![CDATA[qetr1ck]]></wp:comment_author>
			<wp:comment_author_email>orestprustayko@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>193.105.219.210</wp:comment_author_IP>
			<wp:comment_date>2014-12-09 18:10:14</wp:comment_date>
			<wp:comment_date_gmt>2014-12-09 16:10:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[For sure,
As I suppose, Cmder is working under Conemu.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>254</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1418141415.0111849308013916015625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"qetr1ck";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>254</wp:comment_id>
			<wp:comment_author><![CDATA[Jitendra Vyas]]></wp:comment_author>
			<wp:comment_author_email>jitendra.web@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>122.172.67.195</wp:comment_author_IP>
			<wp:comment_date>2014-12-06 20:12:54</wp:comment_date>
			<wp:comment_date_gmt>2014-12-06 18:12:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Have you also seen Conemu?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1417889574.16526508331298828125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1418141414.5641829967498779296875;s:7:"message";s:46:"qetr1ck changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"qetr1ck";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Firebase and AngularJS</title>
		<link>http://savemyday.in/firebase-and-angularjs/</link>
		<pubDate>Wed, 10 Dec 2014 21:45:45 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=818</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="wp-center">
<img src="../source/images/Firebase&AngularJS/AngularFire.jpg" alt="" width="500px"/>
</div>

<ul style="list-style: none;">
    <li><a class="link-icon" href="/promises-in-javascript/#Why, Who and WHAT?"></a>Why, Who and WHAT?</li>
    <li><a class="link-icon" href="/promises-in-javascript/#Quick start"></a>Quick start</li>
    <li><a class="link-icon" href="/promises-in-javascript/#Synchronize data with $asObject(). Thee way data-binding."></a>Synchronize data with $asObject(). Thee way data-binding.</li>
    <li><a class="link-icon" href="/promises-in-javascript/#Synchronize Arrays with $asArray()"></a>Synchronize Arrays with $asArray()</li>
</ul>
<!--more-->

<a href name="Why, Who and WHAT?"></a>
<div class="title-block">
    <i class="attention"></i>Why, Who and WHAT?
</div>


<a href="https://www.firebase.com/">Firebase</a> is developed by Google and its a rich API to store and sync data in realtime. Firebase has full-featured libraries for support all major web framework.

AngularFire is the officially supported by AngularJS binding fir Firebase. The combination of Angular and Firebase provides a <code>three-way</code> between your Firebase data store and Angular's bindings (i.e. JavaScript variables to DOM elements).

<a href name="Quick start"></a>
<div class="title-block">
    <i class="attention"></i>Quick start
</div>

Simply include source from CDN:

[html]
<!-- Angular -->
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.2/angular.min.js"></script>

<!-- Firebase -->
<script src="https://cdn.firebase.com/js/client/2.0.4/firebase.js"></script>

<!-- AngularFire -->
<script src="https://cdn.firebase.com/libs/angularfire/0.9.0/angularfire.min.js"></script>
[/html]

Also sources are available via <a href="http://bower.io/search/?q=firebase">Bower</a> or <a href="https://github.com/firebase/generator-angularfire">Yeoman</a> scaffolding.

Next we need to include ANgularFire service by adding <code>'firebase'</code> as a module dependency in our app. And than inject dependency the <code>$firebase</code> into a controller, factory, or service.

[javascript]
var app = angular.module('app', ['firebase']);

app.controller('MainCtrl', function($scope, $firebase) {
    var ref = new Fireabase("https://<your-firebase>.firebaseio.com/");
    var sync = $firebase(ref);
})
[/javascript]

<a href name="Synchronize data with $asObject(). Thee way data-binding."></a>
<div class="title-block">
    <i class="attention"></i>Synchronize data with $asObject(). Thee way data-binding
</div>

Keep in mind that <code>$firebase</code> does not actually download any data from the Firebase server until <code>$asArray()</code> or <code>$asObject()</code> are called.

The full list for <code>$firebase</code> methods can be found in the <a href="https://www.firebase.com/docs/web/libraries/angular/api.html#firebaseobject">API documentation</a>.

Synchronizing changes from the server is pretty magical via <code>$save()</code>. To achieve three-way data binding simply call <code>$bindTo()</code> on a synchronized object and now any changes in the DOM are pushed to Angular, and then automatically to Firebase. And inversely, any changes on the server get pushed into Angular and straight to the DOM:

<p data-height="495" data-theme-id="10606" data-slug-hash="QwyJvg" data-default-tab="result" data-user="qetr1ck-op" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/QwyJvg/'>Synchronize data with $asObject(). Thee way data-binding</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<a href name="Synchronize Arrays with $asArray()"></a>
<div class="title-block">
    <i class="attention"></i>Synchronize Arrays with $asArray()
</div>

Synchronized arrays should be used for any list of objects that will be sorted, iterated and have unique IDs. The complete list of methods can be found in the <a href="https://www.firebase.com/docs/web/libraries/angular/api.html#firebasearray">API</a> for <code>$FirebaseArray</code>.

The contents of this array are synchronized with a remote server, and AngularFire controls adding, removing, and ordering the elements. Because of this special arrangement, AngularFire provides the concurrency safe methods <code>$add()</code>, <code>$remove()</code>, and <code>$save()</code> to modify the array elements.

<p data-height="331" data-theme-id="10606" data-slug-hash="ByjXeq" data-default-tab="result" data-user="qetr1ck-op" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/ByjXeq/'>Synchronize Arrays with $asArray()</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>818</wp:post_id>
		<wp:post_date>2014-12-10 23:45:45</wp:post_date>
		<wp:post_date_gmt>2014-12-10 21:45:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>firebase-and-angularjs</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="angular"><![CDATA[Angular]]></category>
		<category domain="category" nicename="javascript-2"><![CDATA[Javascript]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3327908396]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Smooth Page Scolling</title>
		<link>http://savemyday.in/smooth-page-scolling/</link>
		<pubDate>Sun, 14 Dec 2014 10:04:09 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=822</guid>
		<description></description>
		<content:encoded><![CDATA[Performs a smooth page scroll to an anchor on the same page with jQuery.animate() or GSAP (TweenLite.to()).

<!--more-->

<p data-height="357" data-theme-id="10606" data-slug-hash="XJdVLm" data-default-tab="result" data-user="qetr1ck-op" class='codepen'>See the Pen <a href='http://codepen.io/qetr1ck-op/pen/XJdVLm/'>Smooth Page Scrolling</a> by qetr1ck-op (<a href='http://codepen.io/qetr1ck-op'>@qetr1ck-op</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>822</wp:post_id>
		<wp:post_date>2014-12-14 12:04:09</wp:post_date>
		<wp:post_date_gmt>2014-12-14 10:04:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>smooth-page-scolling</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="css"><![CDATA[CSS]]></category>
		<category domain="category" nicename="gsap"><![CDATA[GSAP]]></category>
		<category domain="category" nicename="inspiration"><![CDATA[Inspiration]]></category>
		<category domain="category" nicename="javascript-2"><![CDATA[Javascript]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3327416770]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Organizing an application using AMD (require.js)</title>
		<link>http://savemyday.in/organizing-an-application-using-amd-require-js/</link>
		<pubDate>Sat, 20 Dec 2014 10:39:53 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=825</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="wp-center">
<img src="../source/images/Organizing your application using Modules (require.js)/amd_and_require.jpg" alt="" width="500px"/>
</div>

<ul style="list-style: none;">
    <li><a class="link-icon" href="/organizing-an-application-using-modules-require-js/#What is AMD?"></a>What is AMD?</li>
    <li><a class="link-icon" href="/organizing-an-application-using-modules-require-js/#Example File Structure"></a>Example File Structure</li>
    <li><a class="link-icon" href="/organizing-an-application-using-modules-require-js/#Bootstrapping your application"></a>Bootstrapping your application</li>
    <li><a class="link-icon" href="/organizing-an-application-using-modules-require-js/#What does the require.js look like?"></a>What does the require.js look like?</li>
</ul>
<!--more-->

<a href name="What is AMD?"></a>
<div class="title-block">
    <i class="attention"></i>What is AMD?
</div>
Asynchronous Module Definitions designed to load modular code asynchronously in the browser and server. It is actually a fork of the <a href="http://requirejs.org/docs/commonjs.html">Common.js</a> specification. Many script loaders have built their implementations around AMD, seeing it as the future of modular JavaScript development.

<a href name="Example File Structure"></a>
<div class="title-block">
    <i class="attention"></i>Example File Structure
</div>
There are many different ways to lay out your files and I believe it is actually dependent on the size and type of the project. In the example below views and templates are mirrored in file structure.

[javascript]
/* File Structure
├── imgs
├── css
│   └── style.css
├── templates
│   ├── projects
│   │   ├── list.html
│   │   └── edit.html
│   └── users
│       ├── list.html
│       └── edit.html
├── js
│   ├── libs
│   │   ├── jquery
│   │   │   ├── jquery.min.js
│   │   ├── backbone
│   │   │   ├── backbone.min.js
│   │   └── underscore
│   │   │   ├── underscore.min.js
│   ├── models
│   │   ├── users.js
│   │   └── projects.js
│   ├── collections
│   │   ├── users.js
│   │   └── projects.js
│   ├── views
│   │   ├── projects
│   │   │   ├── list.js
│   │   │   └── edit.js
│   │   └── users
│   │       ├── list.js
│   │       └── edit.js
│   ├── router.js
│   ├── app.js
│   ├── main.js  // Bootstrap
│   ├── order.js //Require.js plugin
│   └── text.js  //Require.js plugin
└── index.html
*/
[/javascript]

<a href name="Bootstrapping your application"></a>
<div class="title-block">
    <i class="attention"></i>Bootstrapping your application
</div>


Using <a href="http://requirejs.org/docs/start.html">Require.js</a> we define a single entry point on our index page. We should setup any useful containers that might be used by our Backbone views.

Note: The data-main attribute on our single script tag tells Require.js to load the script located at "js/main.js". It automatically appends the ".js"

[html]
<!doctype html>
<html lang="en">
<head>
    <title>Jackie Chan</title>
    <!-- Load the script "js/main.js" as our entry point -->
    <script data-main="js/main" src="js/libs/require/require.js"></script>
</head>
<body>

<div id="container">
  <div id="menu"></div>
  <div id="content"></div>
</div>

</body>
</html>
[/html]

You should most always end up with quite a light weight index file. You can serve this off your server and then the rest of your site off a CDN ensuring that everything that can be cached, will be.

<a href name="What does the require.js look like?"></a>
<div class="title-block">
    <i class="attention"></i>What does the require.js look like?
</div>

Our bootstrap file will be responsible for configuring Require.js and loading initially important dependencies.

In the example below we configure Require.js to create a shortcut alias to commonly used scripts such as jQuery, Underscore and Backbone.

Note: Modules are loaded relatively to the boot strap and always append with ".js". So the module "app" will load "app.js" which is in the same directory as the bootstrap.

[javascript]
// Filename: main.js

// Require.js allows us to configure shortcut alias
// There usage will become more apparent further along in the tutorial.
require.config({
  paths: {
    jquery: 'libs/jquery/jquery',
    underscore: 'libs/underscore/underscore',
    backbone: 'libs/backbone/backbone'
  }

});

require([

  // Load our app module and pass it to our definition function
  'app',
], function(App){
  // The "app" dependency is passed in as "App"
  App.initialize();
});
[/javascript]

This awesome <a href="http://backbonetutorials.com/organizing-backbone-using-modules/">article</a> saves my day.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>825</wp:post_id>
		<wp:post_date>2014-12-20 12:39:53</wp:post_date>
		<wp:post_date_gmt>2014-12-20 10:39:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>organizing-an-application-using-amd-require-js</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript-2"><![CDATA[Javascript]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3342793585]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[organizing-an-application-using-modules-require-js]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ScrollMagic - controling scroll like a boss</title>
		<link>http://savemyday.in/scrollmagic-controling-scroll-like-a-boss/</link>
		<pubDate>Sun, 21 Dec 2014 09:16:42 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=830</guid>
		<description></description>
		<content:encoded><![CDATA[ScrollMagic is a jQuery plugin which lets you use the scroll bar like a playback control.

<!--more-->

The main possibilities of the plugin:

<ul>
    <li>start animation at specific scroll position</li>
    <li>synchronize an animation to the scroll movement</li>
    <li>pin (stick element) element at a specific scroll position or a limited amount of scroll progress</li>
    <li>easily add a parallax effect</li>
    <li>create  an infinitely scrolling page with ajax load</li>
    <li>call functions when the user hits certain scroll positions or react in any other way to the current scroll position.</li>
</ul>

Check out the <a href="http://janpaepke.github.io/ScrollMagic/">demo</a>, browse the <a href="http://janpaepke.github.io/ScrollMagic/examples/index.html">example</a> or read the <a href="http://janpaepke.github.io/ScrollMagic/docs/index.html">documentation</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>830</wp:post_id>
		<wp:post_date>2014-12-21 11:16:42</wp:post_date>
		<wp:post_date_gmt>2014-12-21 09:16:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>scrollmagic-controling-scroll-like-a-boss</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="inspiration"><![CDATA[Inspiration]]></category>
		<category domain="category" nicename="javascript-2"><![CDATA[Javascript]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3345434685]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[834]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Full-screen scrolling page effects with fullPage.js</title>
		<link>http://savemyday.in/full-screen-scrolling-page-effects-with-fullpage-js/</link>
		<pubDate>Sun, 21 Dec 2014 09:34:48 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=836</guid>
		<description></description>
		<content:encoded><![CDATA[A simple and easy to use jQuery plugin to create full-screen effects.

Plugin is capable of:

<ul>
    <li>Scroll within sections using they mouse wheel scroll</li>
    <li>Scroll within sections and within sliders using the arrow keys and the pageUp and pageDown keys</li>
    <li>Use multiple callbacks</li>
    <li>Use touch events for mobile and tablet devices</li>
    <li>Add a menu linked to to the sections</li>
    <li>Support for CSS3 animations with jQuery fallback</li>
    <li>Use of anchor links (#) for each section and slides</li>
    <li>Support for scrolling inside each section</li>
    <li>Resize the sections size as well as the text when resizing the browser’s window</li>
    <li>Autoadjust itself to fit the current section/slide when resizing the browser’s window</li>
    <li>Admit some options such as the scrolling easing, the background color of the slides, the scrolling speed, loop options, callbacks and the vertical align of the text within the sections</li>
</ul>

For more investigation follow <a href="http://alvarotrigo.com/fullPage/">Live Demo</a> or <a href="https://github.com/alvarotrigo/fullPage.js#fullpagejs">another demo</a> or visit <a href="">https://github.com/alvarotrigo/fullPage.js#fullpagejs</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>836</wp:post_id>
		<wp:post_date>2014-12-21 11:34:48</wp:post_date>
		<wp:post_date_gmt>2014-12-21 09:34:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>full-screen-scrolling-page-effects-with-fullpage-js</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="inspiration"><![CDATA[Inspiration]]></category>
		<category domain="category" nicename="javascript-2"><![CDATA[Javascript]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[835]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3345441117]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>subl.exe - open Sublime Text From the CLI</title>
		<link>http://savemyday.in/subl-exe-open-sublime-text-from-the-cli/</link>
		<pubDate>Sun, 21 Dec 2014 10:32:23 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=841</guid>
		<description></description>
		<content:encoded><![CDATA[<!--more-->


<a href name="Adding Sublime to Your PATH"></a>
<div class="title-block">
    <i class="attention"></i>Adding Sublime to Your PATH
</div>

A nice shortcut to do this is to open up your command line and typing <code>sysdm.cpl</code>. Then you should create a New System Varible and add to your PATH:

<a href="http://savemyday.in/wp-content/uploads/2014/12/subl-environment-variable-1.jpg"><img src="http://savemyday.in/wp-content/uploads/2014/12/subl-environment-variable-1-300x273.jpg" alt="subl-environment-variable-1" width="300" height="273" class="aligncenter size-medium wp-image-842" /></a>

<a href="http://savemyday.in/wp-content/uploads/2014/12/subl-windows-system-path-2.jpg"><img src="http://savemyday.in/wp-content/uploads/2014/12/subl-windows-system-path-2-300x277.jpg" alt="subl-windows-system-path-2" width="300" height="277" class="aligncenter size-medium wp-image-843" /></a>

<a href name="subl.exe - open file / folder Sublime in new / same Window"></a>
<div class="title-block">
    <i class="attention"></i>subl.exe - open file / folder Sublime in new / same Window
</div>

Just find the one you want and type:

[bash]
subl.exe file_name 
#or 
subl.exe folder_name

#in current sublime window

subl.exe file_name --add 
#or 
subl.exe folder_name --add
[/bash]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>841</wp:post_id>
		<wp:post_date>2014-12-21 12:32:23</wp:post_date>
		<wp:post_date_gmt>2014-12-21 10:32:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>subl-exe-open-sublime-text-from-the-cli</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cli"><![CDATA[CLI]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<category domain="category" nicename="sublime"><![CDATA[Sublime]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3367300968]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Exploring ECMAScript2015</title>
		<link>http://savemyday.in/exploring-ecmascript2015/</link>
		<pubDate>Sat, 04 Jul 2015 06:48:03 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=853</guid>
		<description></description>
		<content:encoded><![CDATA[<ul style="list-style: none;">
    <li><a class="link-icon" href="/TOD/#arrow-function"></a>arrow-function</li>
    <li><a class="link-icon" href="/TODO/#classes"></a>classes</li>
    <li><a class="link-icon" href="/TODO/#TODO"></a>TODO</li>
    <li><a class="link-icon" href="/TODO/#TODO"></a>TODO</li>
    <li><a class="link-icon" href="/TODO/#TODO"></a>TODO</li>
</ul>

<!--more-->

<a href name="arrow-function"></a>
<div class="title-block">
    Arrow function
</div>

The "fat" arrow <code>=></code> (the opposed to the thin arrow <code>-></code>) was chosen to compatible with CoffeeScript style.

Specifying parameters:

[code lang="javascript" highlight="1,2"]
    () =&gt; { ... } // no parameter
    x =&gt; { ... } // a one parameter
    (x, y) =&gt; { ... } // several params
[/code]

Specifying body:

[javascript]
    x =&gt; {return x * x} // block style
    x =&gt; x * x //expression, equivalent to previous line

    let squares = [1, 2, 3].map(x =&gt; x * x) // a real example
[/javascript]

There are two benefits to use arrow functions:

<ol>
    <li>They are less verbose than traditional function expression</li>
    <li>Their <code>this</code> picked up from surrounding (lexical scope), e.g. you don't need to use <code>bind</code> or <code>self = this</code></li>
</ol>

Traditional functions can be used as:

<ol>
    <li>Non-method function</li>
    <li>Methods</li>
    <li>Constructors</li>
</ol>

The problems appear in 2 and 3, when function has always their own <code>this</code>. Example of problem in ES5:

[javascript]
    function Prefixer(prefix) {
        this.prefix = prefix;
    }
    Prefixer.prototype.prefixArray = function (arr) {
        'use strict';
        return arr.map(function (x) {
            // Doesn’t work:
            return this.prefix + x; // this = undefined, in &quot;non-strict&quot; mode this = window
        });
    };
[/javascript]

Solution with <code>self = this</code>:

[javascript]
function Prefixer(prefix) {
    this.prefix = prefix;
}
Prefixer.prototype.prefixArray = function (arr) {
    var self = this; // store in closure
    return arr.map(function (x) {
        return self.prefix + x;
    });
};
[/javascript]

Solution with specifying value for <code>this</code>:

[javascript]
function Prefixer(prefix) {
    this.prefix = prefix;
}
Prefixer.prototype.prefixArray = function (arr) {
    return arr.map(function (x) {
        return this.prefix + x;
    }, this); // a few array methods have an extra last parameter for specifying value to &quot;this&quot;
};
[/javascript]

Solution with <code>bind(this)</code>:

[javascript]
function Prefixer(prefix) {
    this.prefix = prefix;
}
Prefixer.prototype.prefixArray = function (arr) {
    return arr.map(function (x) {
        return this.prefix + x;
    }.bind(this)); // now this not depends of context calling, &quot;this&quot; is always the same value
};
[/javascript]

ES2015 solution:

[javascript]
function Prefixer(prefix) {
    this.prefix = prefix;
}
Prefixer.prototype.prefixArray = function (arr) {
    return arr.map((x) =&gt; {
        return this.prefix + x;
    });
};

//fully ES2015-ify the code:

class Prefixer {
    constructor(prefix) {
        this.prefix = prefix;
    }
    prefixArray(arr) {
        return arr.map(x =&gt; this.prefix + x); // has lexical &quot;this&quot;, its determined by the surrounding scope
    }
}
[/javascript]

IIFE as arrow functions:

[javascript]
(() =&gt; {
    return 123;
})();
[/javascript]

<hr>

<a href name="classes"></a>
<div class="title-block">
    Classes
</div>

Classes are syntactical sugar over existing prototyped-based inheritance. The class syntax doesn't introduce new object-orient inheritance model to JS. It just provides a much simpler and cleaner way to create object and dealing with inheritance.

A class and subclass:

[javascript]
class Point {
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
    toString() {
        return `(${this.x}, ${this.y})`;
    }
}

class ColorPoint extends Point {
    constructor(x, y, color) {
        super(x, y);
        this.color = color;
    }
    toString() {
        return super.toString() + ' in ' + this.color;
    }
}

let cp = new ColorPoint(25, 8, 'green');

cp.toString(); //'(25, 8) in green'

cp instanceof ColorPoint; //true
cp instanceof Point; //true

console.log(Object.getPrototypeOf(cp) === ColorPoint.prototype
            &amp;&amp; cp.__proto__ === ColorPoint.prototype); // true

console.log(Object.getPrototypeOf(cp) === Point
            &amp;&amp; cp.__proto__ === Point); // true
[/javascript]

Under the hood ES2015 <code>classes</code> are not something radically new:

[javascript]
console.log(typeof Point); // function
[/javascript]

However, <code>class</code> can be only invoked with <code>new</code>:

[javascript]
Point()
TypeError: Classes can't be function-called
[/javascript]

Class declaration is not hoisted:

[javascript]
typeof Foo() // undeclared
class Foo {/* ... */}
typeof Foo() // function
[/javascript]

An example of accessors property:

[javascript]
class CustomHTMLElement {
    constructor(elem) {
        this.elem = elem;
    }

    get html() {
        return this.elem.innerHTML;
    }

    set html(content) {
        this.elem.innerHTML = content;
    }
}

let customElement = class CustomHTMLElement('The custom elem);
let descriptor = Object.getOwnPropertyDescriptor(CustomHTMLElement.prototype, 'html');

console.log('get' in descriptor); //true
console.log('set' in descriptor); //true
[/javascript]

Creating class with static method via <code>static</code>:

[javascript]
class PersonClass {

    // equivalent of the PersonClass constructor
    constructor(name) {
        this.name = name;
    }

    // equivalent of PersonClass.prototype.sayName
    sayName() {
        console.log(this.name);
    }

    // equivalent of PersonClass.create
    static create(name) {
        return new PersonClass(name);
    }
}

let person = PersonClass.create(&quot;Nicholas&quot;); // call 'create()' without creating an constructor
[/javascript]


An example of creating singleton by IIFE the class constructor:

[javascript]
let person = new class {
    constructor(name) {
        this.name = name;
    }

    sayName() {
        console.log(this.name);
    }
}('PersonName');

person.sayName(); // PersonName
[/javascript]




Article which saves my day:
<ul>
    <li>on <a href="http://TODO">TODO</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>853</wp:post_id>
		<wp:post_date>2015-07-04 08:48:03</wp:post_date>
		<wp:post_date_gmt>2015-07-04 06:48:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>exploring-ecmascript2015</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3903427325]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[864]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GIT store credentials on disk</title>
		<link>http://savemyday.in/skip-password-typing-when-using-git/</link>
		<pubDate>Thu, 13 Aug 2015 14:07:58 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=877</guid>
		<description></description>
		<content:encoded><![CDATA[Using this helper will store your passwords unencrypted on disk, protected only by filesystem permissions.

<script src="https://gist.github.com/qetr1ck-op/ca7809aa4a58e8a65a4b.js"></script>
<!--more-->

Article which saves my day:
<ul>
    <li>on <a href="http://git-scm.com/docs/git-credential-store">official git</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>877</wp:post_id>
		<wp:post_date>2015-08-13 16:07:58</wp:post_date>
		<wp:post_date_gmt>2015-08-13 14:07:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>skip-password-typing-when-using-git</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="git"><![CDATA[Git]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[4029048366]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>What are PATH and other environment variables, and how set or use them</title>
		<link>http://savemyday.in/what-are-path-and-other-environment-variables-and-how-set-or-use-them/</link>
		<pubDate>Sun, 06 Sep 2015 08:07:39 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=910</guid>
		<description></description>
		<content:encoded><![CDATA[<ul style="list-style: none;">
    <li><a class="link-icon" href="http://savemyday.in/what-are-path-and-other-environment-variables-and-how-set-or-use-them/#Environment Variables"></a>Environment Variables</li>
    <li><a class="link-icon" href="http://savemyday.in/what-are-path-and-other-environment-variables-and-how-set-or-use-them/#Path"></a>Path</li>
    <li><a class="link-icon" href="http://savemyday.in/what-are-path-and-other-environment-variables-and-how-set-or-use-them/#Other"></a>Other</li>
    <li>Creating new env variable on Windows
        <ul>
            <li><a class="link-icon" href="http://savemyday.in/what-are-path-and-other-environment-variables-and-how-set-or-use-them/#Creating new env variable on Windows by GUI"></a>by GUI</li>
            <li><a class="link-icon" href="http://savemyday.in/what-are-path-and-other-environment-variables-and-how-set-or-use-them/#Creating new env variable on Windows by CLI"></a>by CLI</li>
        </ul>
    </li>


</ul>

<!--more-->

<a href name="Environment Variables"></a>
<div class="title-block">
    Environment Variables
</div>

Environment variables hold values related to the current environment, like the Operating System or user sessions.

<a href name="Path"></a>
<div class="title-block">
    Path
</div>

One of the best known on Windows, OS X or Linux platforms is <code>PATH</code>. It specifies the directories in which executable programs are located that can be started without typing the whole path to the program file on command line. On Windows <code>cmd</code> (in my case it's a <a href="http://savemyday.in/cmder/">cmder</a>) use <code>Win+R</code>.

<a href name="Other"></a>
<div class="title-block">
    Other
</div>

Other variables might to tell for example, where the Windows folder is located (e.g. <code>%WINDIR%</code> is <code>C:\Windows</code>)

<a href name="Creating new env variable on Windows by GUI"></a>
<div class="title-block">
    Creating new env variable on Windows by GUI
</div>

<ol>
    <li>Open Control Panel » System » Advanced » Environment Variables.</li>
    <li>Type control <code>sysdm.cpl,,3</code> in the Run dialog (Win+R) and click Environment Variables.For editing user variables you can also type</li>
</ol>

<a href="http://savemyday.in/wp-content/uploads/2014/12/subl-environment-variable-1.jpg"><img src="http://savemyday.in/wp-content/uploads/2014/12/subl-environment-variable-1-300x273.jpg" alt="subl-environment-variable-1" width="300" height="273" class="aligncenter size-medium wp-image-842" /></a>

<a href="http://savemyday.in/wp-content/uploads/2014/12/subl-windows-system-path-2.jpg"><img src="http://savemyday.in/wp-content/uploads/2014/12/subl-windows-system-path-2-300x277.jpg" alt="subl-windows-system-path-2" width="300" height="277" class="aligncenter size-medium wp-image-843" /></a>

<a href name="Creating new env variable on Windows by CLI"></a>
<div class="title-block">
    Creating new env variable on Windows by CLI
</div>

Environment Variables in Windows are denoted with percent signs (%) surrounding the name <code>%name%</code>.

To <b>display</b> environment variable value type <code>echo %name%</code>.

<script src="https://gist.github.com/qetr1ck-op/ac52d61c309701eaeaf2.js"></script>

To <b>create/set</b> a variable permanently, use <code>setx varname=value</code>:

<script src="https://gist.github.com/qetr1ck-op/72ec25e9ba08f904e2d6.js"></script>

To <b>append/add</b> a variable, use <code>setx varname=value;%varname%</code>:

<script src="https://gist.github.com/qetr1ck-op/0de00967b6e14ceaae35.js"></script>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>910</wp:post_id>
		<wp:post_date>2015-09-06 10:07:39</wp:post_date>
		<wp:post_date_gmt>2015-09-06 08:07:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>what-are-path-and-other-environment-variables-and-how-set-or-use-them</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cli"><![CDATA[CLI]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[4102332284]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>TOP 10 mistakes when you develop on AngularJS</title>
		<link>http://savemyday.in/top-10-mistakes-when-you-develop-on-angularjs/</link>
		<pubDate>Wed, 23 Sep 2015 16:40:03 +0000</pubDate>
		<dc:creator><![CDATA[qetr1ck]]></dc:creator>
		<guid isPermaLink="false">http://savemyday.in/?p=921</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="wp-center">
    <a href="TODO">
        <img src="http://savemyday.in/source/images/TOP 10 mistakes when you develop on AngularJS/img.jpg" alt="" width="700px"/>
    </a>
</div>

<ul style="list-style: none;">
    <li><a class="link-icon" href="#1. MVC directory structure"></a>1. MVC directory structure</li>
    <li><a class="link-icon" href="#2. Modules (or lack of them)"></a>2. Modules (or lack of them)</li>
    <li><a class="link-icon" href="#3. Dependency Injection"></a>3. Dependency Injection</li>
    <li><a class="link-icon" href="#3.1. Global Dependencies"></a>3.1. Global Dependencies</li>
    <li><a class="link-icon" href="#4. Fat controllers"></a>4. Fat controllers</li>
    <li><a class="link-icon" href="#5. Service vs Factory vs Provider"></a>5. Service vs Factory vs Provider</li>
    <li><a class="link-icon" href="#6. Always dot in VM $scope's"></a>6. Always dot in VM $scope's</li>
    <li><a class="link-icon" href="#7. Unit testing AngularJS apps"></a>7. Unit testing AngularJS apps</li>
    <li><a class="link-icon" href="#8. Not to do an end-to-end testing with Protractor"></a>8. Not to do an end-to-end testing with Protractor</li>
    <li><a class="link-icon" href="#9. Full-Spectrum Testing with Karma"></a>9. Full-Spectrum Testing with Karma</li>
    <li><a class="link-icon" href="#10. Using jQuery"></a>10. Using jQuery</li>
</ul>

<!--more-->

<a href="#1. MVC directory structure" name="1. MVC directory structure"></a>
<div class="title-block">
    1. MVC directory structure
</div>

When you work with MVC / MVW frameworks it's convenience to structure code by <code>MVC components</code> using the following template:

<script src="https://gist.github.com/qetr1ck-op/24404d318344f4b77595.js"></script>

But when project will rise it's hard to use such structure of folders. You always need to open a few folder at the same time. It isn't depend what IDE or tool you use (Sublime, VS, Vim with NerdTree) - it's uncomfortable.

To avoid this this developers often use grouping by <code>functionality type</code>:

<script src="https://gist.github.com/qetr1ck-op/9a0e5e9af7eed2f6aef3.js"></script>

The structure allows more faster search for files which are related to the same feature. It may puzzled at the beginning to share js with html or even with test files. But it saves a lot of time, because it's more natural.

<a href="#2. Modules (or lack of them)" name="2. Modules (or lack of them)"></a>
<div class="title-block">
     2. Modules (or lack of them)
</div>

At the beginning of development all functionalities include in a single module. But manage a such type of code is inconvenient:

<script src="https://gist.github.com/qetr1ck-op/f91462f76a1ca37f3232.js"></script>

The next most common approach is grouping objects by type:

<script src="https://gist.github.com/qetr1ck-op/3912656b35c16c50bce3.js"></script>

For better scalability and future re-usability - split code by feature:

<script src="https://gist.github.com/qetr1ck-op/2b390ced242af620f214.js"></script>

<a href="#3. Dependency Injection" name="3. Dependency Injection"></a>
<div class="title-block">
    3. Dependency Injection
</div>

Pattern DI in AngularJS uses out of box. DI helps to keep code clean and helps with testing process.

<script src="https://gist.github.com/qetr1ck-op/58281552fe5475f79dda.js"></script>

Now AngularJS can't resolve minificated variables. Easiest solution is:

<script src="https://gist.github.com/qetr1ck-op/01721016841fc0760acd.js"></script>

Another way to handle DI with minification is <a href="https://github.com/olov/ng-annotate">ng-annotate</a> module. More information on official <a href="https://docs.angularjs.org/tutorial/step_05#a-note-on-minification">AngularJS docs</a>

<a href name="3.1. Global Dependencies"></a>
<div class="title-block">
    3.1. Global Dependencies
</div>

Often when writing AngularJS apps there will be a dependency on an object that binds itself to the global scope. This means it's available in any AngularJS code, but this breaks the dependency injection model.

AngularJS makes it simple to encapsulate these globals into modules so they can be injected like standard AngularJS modules.

<script src="https://gist.github.com/qetr1ck-op/641f588b6820a1f3de81.js"></script>

<a href="#4. Fat controllers" name="4. Fat controllers"></a>
<div class="title-block">
    4. Fat controllers
</div>

It's easy, especially when starting out, to put to much logic in the controller. Controller should <b>never</b> do DOM manipulation. That's work for directives! Likewise business logic should live in services.

App data should be also stored and fetched in services, except when we need bound to the <code>$scope</code>. Services are singletons that persist throughout the lifetime of the application, while controllers are transient between application states. If data is stored in the controller then it will need to be fetched from somewhere when it is instantiate.

AngularJS works best when following the Single Responsibility Principle (SRP). If the controller is a coordinator between the view and the model, then the amount of logic it has should be minimal. This will also make testing much simpler.

<a href="#5. Service vs Factory vs Provider" name="5. Service vs Factory vs Provider"></a>
<div class="title-block">
    5. Service vs Factory vs Provider
</div>

What is service:

<ol>
    <li>It provides methods to keep, share and organize data across the lifetime of the Angular app</li>
    <li>Lazy loads, Angular only creates instance of a service when an application component depends on it</li>
    <li>Singleton object, application component dependent on the service work with the single instance</li>
</ol>

An Angular service can be created in five different ways:

<ol>
    <li>service</li>
    <li>factory</li>
    <li>provider</li>
    <li>value</li>
    <li>constant</li>
</ol>

The most verbose, but also the most comprehensive one is a <code>Provider</code> recipe. The remaining four recipe types — Value, Factory, Service and Constant — are just syntactic sugar on top of a provider recipe.

Here is a great examples by Misko:

<script src="https://gist.github.com/qetr1ck-op/dc7fb71d2d3f61b4de76.js"></script>

In this case the injectors simply return the value. But what if you want to compute the value?

<script src="https://gist.github.com/qetr1ck-op/1a02d77c585f4ed31397.js"></script>

So <code>factory</code> is a function which responsible to creating or/and modifying the value. Notice that the the factory function can ask for other <code>dependencies</code>

If you want to be more OO and have a class?

<script src="https://gist.github.com/qetr1ck-op/8ef78320b0af84631e00.js"></script>

But if we want to configure function <code>before injection</code>?

<script src="https://gist.github.com/qetr1ck-op/e98dbc733fb7be97877b.js"></script>

As a side <code>note</code>, <code>service</code>, <code>factory</code>, and value are all derived from provider:

<script src="https://gist.github.com/qetr1ck-op/586b2f682b2aed2039e9.js"></script>

<a href="6. Always dot in VM $scope's" name="6. Always dot in VM $scope's"></a>
<div class="title-block">
    6. Always dot in VM $scope's
</div>

In AngularJS every <code>$scope</code> prototypical inherits from its parent <code>$scope</code> till the highest level <code>$rootScope</code>.

<script src="https://gist.github.com/qetr1ck-op/35a0dd1b8e16ff0bec4b.js"></script>

When looking up <code>primitive</code>, the prototype chain is not consulted. If <code>navCtrl</code> is to be updated simultaneously then a prototype chain lookup is required; this will happen when the value is an <code>object</code>:

<script src="https://gist.github.com/qetr1ck-op/763543e38942e2e38c1b.js"></script>

<a href="#7. Unit testing AngularJS apps" name="7. Unit testing AngularJS apps"></a>
<div class="title-block">
    7. Unit testing AngularJS apps
</div>

JavaScript is a dynamically typed language which comes with great power of expression, but it also comes with almost no help from the compiler.
For this reason we feel very strongly that any code written in JavaScript needs to come with a strong <a href="https://docs.angularjs.org/guide/unit-testing">set of tests</a>.

<a href name="8. Not to do an end-to-end testing with Protractor"></a>
<div class="title-block">
    8. Not to do an end-to-end testing with Protractor
</div>

<a href="https://github.com/angular/protractor">Protractor</a> uses the <a href="http://jasmine.github.io/1.3/introduction.html">Jasmine</a> test framework for defining tests. Protractor has a very robust API for different page interactions.
There are other end to end test tools, but Protractor has the advantage of understanding how to work with AngularJS code, especially when it comes to <code>$digest</code> cycles and more.

<a href="#9. Full-Spectrum Testing with Karma" name="9. Full-Spectrum Testing with Karma"></a>
<div class="title-block">
    9. Full-Spectrum Testing with Karma
</div>

<a href="http://www.yearofmoo.com/2013/01/full-spectrum-testing-with-angularjs-and-karma.html">Awesome post</a> about testing AngularJS with <code>Karma</code>, passage form the post:

Karma is an amazing testing tool which is designed to take all the frustration out of setting up a working test runner when testing JavaScript code.
Karma works by spawning up each browser that is specified within its configuration file and then running JavaScript code against those browsers to see if they pass certain tests.
Communication between Karma and each of the browsers is handled with the karma service running in the terminal using socket.io.
Each time a test is run, Karma records its status and then tallies up which browsers have failed for each test and which ones passed and timed out.
This makes each test work 100% natively in each browser without the need to test individually.
Also, since the Karma service runs on a port and keeps track of browsers by itself, you can easily hook up other browsers and devices to it just by visiting its broadcasting port.
Oh and did I mention that Karma is fast? Yeah it's really fast...

<a href="#10. Using jQuery" name="10. Using jQuery"></a>
<div class="title-block">
    10. Using jQuery
</div>

AngularJS is a framework for building scalable apps. jQuery is a famous library for simplifying DOM manipulation, event handling, AJAX operation.

AngularJS is about architecture of app, not augmenting HTML pages.

Try to stop using jQuery and imperative paradigm, just let your code to extend HTML syntax in declarative style.

DOM manipulation should only be done in directives, but this doesn't mean they have to be jQuery wrappers. Always consider what features AngularJS already provides before reaching for jQuery.

Article which saves my day:
<ul>
    <li>on <a href="https://www.airpair.com/angularjs/posts/top-10-mistakes-angularjs-developers-make">Original post</a></li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>921</wp:post_id>
		<wp:post_date>2015-09-23 18:40:03</wp:post_date>
		<wp:post_date_gmt>2015-09-23 16:40:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>top-10-mistakes-when-you-develop-on-angularjs</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="angular"><![CDATA[Angular]]></category>
		<category domain="category" nicename="javascript-2"><![CDATA[Javascript]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[Gallery]]></category>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[top-10-mistakes-that-you-could-do-angularjs]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rawhtml_settings</wp:meta_key>
			<wp:meta_value><![CDATA[0,0,1,1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[4158317962]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
